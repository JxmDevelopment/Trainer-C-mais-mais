#include "script.h"
#include "keyboard.h"
#include <string>
#include <ctime>
#include "Pattern.h"
//#include <Psapi.h>

#pragma warning(disable : 4244 4305) // double <-> float conversions

#include "Hashs.h"
#include "VehicleValues.h"
#include "MenuFunctions.h"

//INICIO

Object ropes;
HANDLE mainFiber;
DWORD wakeAt;
Entity ENT;
Entity ENT2;
Vector3 handcoords;
Vector3 shootcoords[3];
Vector3 empty;

//BOOL
bool couting = false;
bool attach = false;
bool givew = true;
bool isHospitalSpawned = false;
bool nocops = false;
bool LoadingObject;
bool g_bKeyBoardDisplayed = false;
bool Minus = false;
bool hasModdedBullet;
bool hasMagicBullet;
bool lasersight = false;
bool modelChanger;
bool LoadingPed;
bool isMainCharacter;

//INT
int bone = 0;
int onec = 0;
int KeyboardIndex = 0;
int currenttime, firsttime;
int RPMS;

//CHAR
char* ObjectString;
char* VehicleString;
char* ModelString;
char* modelChange;
char *model;

bool RequestNetworkControl(uint vehID)
{
	int Tries = 0;
	bool
		hasControl = false,
		giveUp = false;
	do
	{
		hasControl = NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(vehID);
		Tries++;
		if (Tries > 300)
			giveUp = true;
	} while (!hasControl && !giveUp);

	if (giveUp)
		return false;
	else return true;
}

void RequestingControl(Entity e)
{
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(e);
	if (!NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(e))
		WAIT(0);
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(e);
}

bool cstrcmp(const char* s1, const char* s2)
{
	while (*s1 && (*s1 == *s2))
		s1++, s2++;
	if (*(const unsigned char*)s1 - *(const unsigned char*)s2 == 0)
		return true;
	else
		return false;
}

bool doTeleportVehicle;
Vector3 TPCoords;
void ChangeCoords(Vector3 Coords)
{
	Ped Handle = PLAYER::PLAYER_PED_ID();
	if (PED::IS_PED_IN_ANY_VEHICLE(Handle, 0))
	{
		ENTITY::SET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_IN(Handle, false), Coords.x, Coords.y, Coords.z, 0, 0, 0, 1);
	}
	else
		ENTITY::SET_ENTITY_COORDS(Handle, Coords.x, Coords.y, Coords.z, 0, 0, 0, 1);
}

static float dist(Vector3 p1, Vector3 p2)
{
	float x = p1.x - p2.x;
	float y = p1.y - p2.y;
	float z = p1.z - p2.z;
	return sqrt(x*x + y * y + z * z);
}

void toggleIPL(char* IPLName, char* MessageEnabled, char* MessageDisabled, bool show = false)
{
	if (STREAMING::IS_IPL_ACTIVE(IPLName))
	{
		STREAMING::REMOVE_IPL(IPLName);
		if (show)
			drawNotification(MessageDisabled);
	}
	else
	{
		STREAMING::REQUEST_IPL(IPLName);
		if (show)
			drawNotification(MessageEnabled);
	}
}

Player PLAYER_ID = PLAYER::PLAYER_ID();
Ped PLAYER_PED_ID = PLAYER::PLAYER_PED_ID();

Vehicle veh;
Vehicle VEHICLE_ID = PED::GET_VEHICLE_PED_IS_USING(PLAYER_PED_ID);
Vector3 ONLINE_PLAYER_COORDS = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER_ID, false);

// RASCUNHO FIM //



void Main() // MENU ~~>> SUB MENUS � DESTINADO AO ATALHO: // MAIN <<~~
{
	addTitle("Malboro Edition");
	addSubmenuOption("Jogador", 2);
	addSubmenuOption("Visual do Jogador", 3);
	addSubmenuOption("Spawnar Veiculos", 4);
	addSubmenuOption("Opcoes Do Veiculo", 5);
	addSubmenuOption("Teleporte", 6);
	addSubmenuOption("Armas", 7);
	addSubmenuOption("Outras Opcoes", 8);
	addSubmenuOption("Todos Os Jogadores", 11);
	addSubmenuOption("Lista de Jogadores", 12);
	addSubmenuOption("Creditos", 130);
	normalMenuActions();
}

void Credits()
{
	addTitle("Creditos");

	addOption("~b~Ultima Atualizacao:");
	addOption("~c~Dia: 01");
	addOption("~d~Mes: 02");
	addOption("~g~Ano: 2021");
	addOption("~m~--------------------");
	addOption("~o~Horas: 15:");
	addOption("~p~Minutos: 32:");
	addOption("~q~Segundos: 20");
	addOption("~u~--------------------");
	addOption("~r~Atualizado Por: JXM");
	addOption("~y~Versao: 1.5");
	normalMenuActions();
}
// ************ INICIO SELF MENU ************ //

bool inviso = false;
void Inviso()
{
	inviso = !inviso;
	Ped Ped = PLAYER::PLAYER_PED_ID();
	if (!inviso == false)
	{
		ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), false, 0);
	    //ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_ID(), false, 0); * Caso D� Erro No C�digo Anterior *
		drawNotification("Invisibilidade: ~r~Ativado");
	}
	else
	{
		ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true, 0);
		drawNotification("Invisibilidade: ~b~Desativado");
	}
}

void Notificacao1() // Atacar Jogador
{
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING("~r~ATENCAO !!! VERIFIQUE SE O SERVIDOR TEM CHAT KILL!");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_CALL911", "CHAR_CALL911", 1, 2, "~b~Malboro", "~c~ALERTA:", 1, "___BR", 4);
	UI::_DRAW_NOTIFICATION(3000, 1);
}

void Notificacao2() // Atacar Jogador
{
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING("~g~CASO O SERVIDOR TENHA CHAT KILL IRA MOSTRAR QUE FOI VOCE QUEM O ATACOU !");
	UI::_SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_DETONATEPHONE", "CHAR_DETONATEPHONE", 1, 2, "~b~Malboro", "~c~ALERTA:", 1, "___BR", 4);
	UI::_DRAW_NOTIFICATION(3000, 1);
}

bool God = false;
void GodMode()
{
	God = !God;
	if (!God == false)
	{
		drawNotification("Godmode: ~b~Ativado");
	}
	else
	{
		drawNotification("Godmode: ~r~Desativado");
	}
}

bool SJump = false;
void SuperJump()
{
	SJump = !SJump;
	if (!SJump)
	{
		GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(PLAYER::PLAYER_PED_ID());
		GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(PLAYER::PLAYER_ID());
		drawNotification("Super Pulo: ~r~Desativado");
	}
	else
	{
		GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(PLAYER::PLAYER_PED_ID());
		GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(PLAYER::PLAYER_ID());
		drawNotification("Super Pulo: ~b~Ativado");
	}
}

bool fastrun = false;
void FastRun()
{
	fastrun = !fastrun;
	if (!fastrun)
	{
		PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_ID(), 1.00);
		PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_PED_ID(), 1.00);
		drawNotification("Correr 2x Mais: ~r~Desativado");
	}
	else
	{
		PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_ID(), 1.49);
		PLAYER::SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(PLAYER::PLAYER_PED_ID(), 1.49);
		drawNotification("Correr 2x Mais: ~b~Ativado");
	}
}

void cleanPed()
{
	Ped Ped = PLAYER::PLAYER_PED_ID();
	PED::CLEAR_PED_BLOOD_DAMAGE(Ped);
	PED::RESET_PED_VISIBLE_DAMAGE(Ped);
}

void ToggleNoCops()
{
	if (!nocops)
	{
		nocops = true;
		PLAYER::CLEAR_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID());
		PLAYER::SET_MAX_WANTED_LEVEL(0);
		drawNotification("Nunca Procurado: ~b~Ativado");
	}
	else
	{
		nocops = false;
		PLAYER::SET_MAX_WANTED_LEVEL(5);
		drawNotification("Nunca Procurado: ~r~Desativado");
	}
}

void ApplyForceToEntity(Player ped_id, int x, int y, int z)
{
	ENTITY::APPLY_FORCE_TO_ENTITY(ped_id, 1, 0, x, y, z, 0, 0, 0, 1, 1, 1, 0, 1);
}

bool superman = false;
void SuperMan()
{
	if (getKeyPressed(VK_SPACE))
	{
		ENTITY::APPLY_FORCE_TO_ENTITY(PLAYER::PLAYER_PED_ID(), 1, 0, 0, 10, 0, 0, 0, 1, true, true, true, true, true);
	}
	Hash hash = GAMEPLAY::GET_HASH_KEY("GADGET_PARACHUTE");
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), hash, 1, 1);
	PLAYER::SET_PLAYER_INVINCIBLE(PLAYER::PLAYER_ID(), 1);
	PED::SET_PED_TO_RAGDOLL_WITH_FALL(PLAYER::PLAYER_PED_ID(), 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0);

	if (ENTITY::IS_ENTITY_IN_AIR(PLAYER::PLAYER_PED_ID()) && !PED::IS_PED_RAGDOLL(PLAYER::PLAYER_PED_ID()))
	{
		if (getKeyPressed(0x57)) // W key
		{
			ApplyForceToEntity(PLAYER::PLAYER_PED_ID(), 3, 0, 0);
		}

		if (getKeyPressed(0x53)) // S key
		{
			ApplyForceToEntity(PLAYER::PLAYER_PED_ID(), 3, 6, 0);
		}
		if (getKeyPressed(VK_SHIFT))
		{
			ApplyForceToEntity(PLAYER::PLAYER_PED_ID(), 6, 0, 0);
		}
	}
}

bool forcejump = false;
void ForceJump()
{
	if (getKeyPressed(VK_SPACE))
	{
		ENTITY::APPLY_FORCE_TO_ENTITY(PLAYER::PLAYER_PED_ID(), 1, 0, 0, 10, 0, 0, 0, 1, true, true, true, true, true);
		PED::SET_PED_CAN_RAGDOLL(PLAYER::PLAYER_ID(), false);
		PED::SET_PED_CAN_RAGDOLL(PLAYER::PLAYER_PED_ID(), false);
		PED::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(PLAYER::PLAYER_ID(), false);
		PED::SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(PLAYER::PLAYER_ID(), false);
		PLAYER::GIVE_PLAYER_RAGDOLL_CONTROL(PLAYER::PLAYER_ID(), false);
		PED::SET_PED_RAGDOLL_ON_COLLISION(PLAYER::PLAYER_ID(), false);
	}
}

void Selfmenu() // SELF // MENU SELF // JOGADOR
{
	addTitle("Jogador");
	addBoolOption("God Mode", God);
	addOption("Heal / Reviver");
	addOption("Colete");
	addOption("Limpar Jogador");
	addBoolOption("Super Pulo", SJump);
	addBoolOption("Correr 2x Mais", fastrun);
	addBoolOption("Invisivel", inviso);
	addBoolOption("SuperMan", superman);
	addBoolOption("Ganhar Altitude", forcejump);
	addBoolOption("Nunca Seja Procurado", nocops);
	addOption("~y~Allahu Akbar");

	if (getOption() == 1)
	{
		GodMode();
	}
	if (getOption() == 2)
	{
		ENTITY::SET_ENTITY_HEALTH(PLAYER::PLAYER_PED_ID(),
		ENTITY::GET_ENTITY_HEALTH(PLAYER::PLAYER_PED_ID())),
		ENTITY::SET_ENTITY_HEALTH(PLAYER::PLAYER_PED_ID(),
		PED::GET_PED_MAX_HEALTH(PLAYER::PLAYER_PED_ID()));
		drawNotification(" ~b~Jogador Curado");
	}
	if (getOption() == 3)
	{
		PED::ADD_ARMOUR_TO_PED(PLAYER::PLAYER_PED_ID(), 200);
		drawNotification(" ~b~Colete Setado");
	}
	if (getOption() == 4)
	{
		cleanPed();
		drawNotification(" ~b~Jogador Limpo");
	}
	if (getOption() == 5)
	{
		SuperJump();
	}
	if (getOption() == 6)
	{
		FastRun();
	}
	if (getOption() == 7)
	{
		Inviso();
	}
	if (getOption() == 8)
	{
		superman = !superman;
		if (superman == true)
		{
			drawNotification("SuperMan: ~b~Ativado");
			drawNotification("~r~SPACE: ~w~Ganha Altitude");
			drawNotification("~b~SHIFT: ~w~Impulsona Para Frente");
		}
		else if (superman == false)
		{
			drawNotification("SuperMan: ~r~Desativado");
		}
	}
	if (getOption() == 9)
	{
		forcejump = !forcejump;
		if (forcejump == true)
		{
			drawNotification("~w~Segure ~b~ESPACO ~w~Para Subir");
		}
		else if (forcejump == false)
		{
			drawNotification("Ganhar Altitude ~r~Desativado");
		}
	}
	if (getOption() == 10)
	{
		ToggleNoCops();
	}
	if (getOption() == 11)
	{
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
		FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, EXPLOSION_PLANE, true, true, false, true);
	//  FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, EXPLOSION_PROPANE, true, true, false, true);
		drawNotification("~r~Allahu Akbar !");
	}
	normalMenuActions();
}

// ************ FIM SELF MENU ************ //
// ************ INICIO VEHICLES ************ //

void MaxUpgrades(uint veh)
{
	VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, 0, 0, 0);
	VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh, 0, 0, 0);
	//VEHICLE::SET_VEHICLE_COLOURS(veh, 0, 0);
	VEHICLE::SET_VEHICLE_MOD_KIT(veh, 0);
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh, 1);
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, "BEATNGU");
	VEHICLE::SET_VEHICLE_WINDOW_TINT(veh, 1);
	VEHICLE::TOGGLE_VEHICLE_MOD(veh, 18, 1);
	VEHICLE::TOGGLE_VEHICLE_MOD(veh, 22, 1);
	VEHICLE::SET_VEHICLE_MOD(veh, 0, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 1, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 2, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 3, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 4, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 5, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 6, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 7, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 8, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 9, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 10, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 11, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 12, 2, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 13, 2, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 14, 1, 0); // BUZINA
	VEHICLE::SET_VEHICLE_MOD(veh, 15, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 16, 5, 0);
	VEHICLE::SET_VEHICLE_MOD(veh, 18, 18, 0); // TURBO
    //VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(veh, 1);
	//VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 0, 1);
	//VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 1, 1);
	//VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 2, 1);
	//VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 3, 1);
	//VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 4, 1);
	//VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 5, 1);
	//VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 6, 1);
	//VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(veh, 7, 1);
	VEHICLE::TOGGLE_VEHICLE_MOD(veh, 20, 1);
	VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(veh, 0, 0, 0);
}

bool SpawningVehicle;
bool vehspawncheck = false;
bool SPAWN_WRAP = true;
bool deleteprevious = true;
bool spawnwithmax = false;
bool SpawnCustomPaint = false;

int PrimR, PrimG, PrimB, SecR, SecG, SecB, TyreR, TyreG, TyreB, NeonR, NeonG, NeonB;

void BypassOnlineVehicleKick(Vehicle vehicle)
{
	Player player = PLAYER::PLAYER_ID();
	int var;
	DECORATOR::DECOR_REGISTER("Player_Vehicle", 3);
	DECORATOR::DECOR_REGISTER("Veh_Modded_By_Player", 3);
	DECORATOR::DECOR_SET_INT(vehicle, "Player_Vehicle", NETWORK::_NETWORK_HASH_FROM_PLAYER_HANDLE(player));
	DECORATOR::DECOR_SET_INT(vehicle, "Veh_Modded_By_Player", GAMEPLAY::GET_HASH_KEY(PLAYER::GET_PLAYER_NAME(player)));
	DECORATOR::DECOR_SET_INT(vehicle, "Not_Allow_As_Saved_Veh", 0);
	if (DECORATOR::DECOR_EXIST_ON(vehicle, "MPBitset"))
		var = DECORATOR::DECOR_GET_INT(vehicle, "MPBitset");
	GAMEPLAY::SET_BIT(&var, 3);
	DECORATOR::DECOR_SET_INT(vehicle, "MPBitset", var);
	VEHICLE::SET_VEHICLE_IS_STOLEN(vehicle, false);
}

int CREATE_VEHICLE(char* hash, float x, float y, float z)
{
	DWORD model = GAMEPLAY::GET_HASH_KEY(hash);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(model) && STREAMING::IS_MODEL_A_VEHICLE(model))
	{
		Player playerPed = PLAYER::PLAYER_PED_ID();
		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(0);
		{
			Vehicle veh = VEHICLE::CREATE_VEHICLE(model, x, y, z, ENTITY::GET_ENTITY_HEADING(playerPed), true, false);
			NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(veh);
			if (SPAWN_WRAP)
			{
				PED::SET_PED_INTO_VEHICLE(playerPed, veh, SEAT_DRIVER);
			}
			VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 1);
			VEHICLE::SET_VEHICLE_ENGINE_ON(veh, true, true, true);
			BypassOnlineVehicleKick(veh);
			if (spawnwithmax == true)
			{
				MaxUpgrades(veh);
				MaxUpgrades(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
			}
			else if (spawnwithmax == false)
			{

			}
			if (deleteprevious)
			{
				Vehicle veh = VEHICLE::GET_LAST_DRIVEN_VEHICLE();
				ENTITY::SET_ENTITY_AS_MISSION_ENTITY(veh, true, true);
				VEHICLE::DELETE_VEHICLE(&veh);
			}
			if (SpawnCustomPaint)// custom paint spawn
			{
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, PrimR, PrimG, PrimB);
				VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh, SecR, SecG, SecB);
				VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(veh, TyreR, TyreG, TyreB);
				VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(veh, NeonR, NeonG, NeonB);
			}
		}
	}
	return veh;
}

void addVehOption(char* option, char* model, char *notification)
{
	addOption(option);
	if (currentOption == optionCount && optionPress)
	{
		//Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0f, 5.0f, 0.0f); Spawnar Na Frente
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true); // Spawnar Em Cima
		CREATE_VEHICLE(model, coords.x, coords.y, coords.z);
		drawNotification(notification);
	}
}

void CREATE_VEHONPLAYER(char *hash)
{
	Vehicle model = GAMEPLAY::GET_HASH_KEY(hash);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(model) && STREAMING::IS_MODEL_A_VEHICLE(model))
	{
		STREAMING::REQUEST_MODEL(model);
		while (!STREAMING::HAS_MODEL_LOADED(model)) WAIT(1);
		Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 0.0f, 10.0f, 0.0f);
		Vehicle veh = VEHICLE::CREATE_VEHICLE(model, coords.x, coords.y, coords.z, 1.0f, true, false);
		VEHICLE::SET_VEHICLE_DOORS_LOCKED(veh, 1);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh); // Spawnar J� No Ch�o "Sem Cair"
		//ENTITY::SET_ENTITY_CAN_BE_DAMAGED(veh, false);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(model);
		MaxUpgrades(veh); // Coloquei Para Spawnar Tunado
	}
}

void doKeyboardFunc(char* Result, int KBIndex, int Client)
{
	char buf[100];
	switch (KBIndex)
	{
	case 0: drawNotification(Result);
		break;
	case 1: // SKIN
		ModelString = Result;
		LoadingPed = true;
		_snprintf(buf, sizeof(buf), "Skin Mudada Para: ~b~%s", Result);
		drawNotification(buf);
		break;
	}
	KeyboardIndex = 0;
}
/*
Vector3 CombineVector(float x, float y, float z)
{
	Vector3 returnVector;
	returnVector.x = x;
	returnVector.y = y;
	returnVector.z = z;
	return returnVector;
}
Object Create_Obj(char* ObjectName, Vector3 Coordinates)
{
	Object returnObj;
	Hash ObjectHash = GAMEPLAY::GET_HASH_KEY(ObjectName);
	if (STREAMING::IS_MODEL_IN_CDIMAGE(ObjectHash))
	{
		if (STREAMING::IS_MODEL_VALID(ObjectHash))
		{
			STREAMING::REQUEST_MODEL(ObjectHash);
			if (STREAMING::HAS_MODEL_LOADED(ObjectHash))
			{
				returnObj = OBJECT::CREATE_OBJECT(ObjectHash, Coordinates.x, Coordinates.y, Coordinates.z, 1, 1, 0);
			}
			else
			{
				returnObj = NULL;
			}
		}
	}
	return returnObj;
} */

bool doWheelbarrow = false;
bool doBumpercar = false;
bool doWheelchair = false;
bool doCouch = false;
bool doToilet = false;
bool doTrolley = false;

bool spawnTrolley()
{
	int Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(Handle, 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -0.4f, a.z = 0.1f;
	Vector3 b; b.x = 0, b.y = 0, b.z = 180;
	int hash = GAMEPLAY::GET_HASH_KEY("blazer");
	int hash2 = GAMEPLAY::GET_HASH_KEY("prop_rub_trolley01a");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, true, false, true);
		if (ENTITY::DOES_ENTITY_EXIST(Object))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), true, false);
			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, 0);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				drawNotification("Spawnou um ~b~Carrinho De Compras");
				ENTITY::SET_ENTITY_VISIBLE(Handle, true, 0);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool spawnToilet()
{
	int Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(Handle, 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -0.4f, a.z = 0.1f;
	Vector3 b; b.x = 0, b.y = 0, b.z = 180;
	int hash = GAMEPLAY::GET_HASH_KEY("blazer");
	int hash2 = GAMEPLAY::GET_HASH_KEY("prop_ld_toilet_01");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, true, false, true);
		if (ENTITY::DOES_ENTITY_EXIST(Object))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), true, false);
			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, 0);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				drawNotification("Spawnou uma ~b~Privada");
				ENTITY::SET_ENTITY_VISIBLE(Handle, true, 0);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool spawnCouch()
{
	int Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(Handle, 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -0.4f, a.z = 0;
	Vector3 b; b.x = 0, b.y = 0, b.z = 180.0f;
	int hash = GAMEPLAY::GET_HASH_KEY("dune");
	int hash2 = GAMEPLAY::GET_HASH_KEY("prop_t_sofa");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, true, false, true);
		if (ENTITY::DOES_ENTITY_EXIST(Object))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), true, false);
			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, 0);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				drawNotification("Spawnou uma ~b~Cama");
				ENTITY::SET_ENTITY_VISIBLE(Handle, true, 0);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool spawnWheelchair()
{
	int Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(Handle, 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = -0.27, a.y = -0.24, a.z = 0.13f;
	Vector3 b; b.x = 0, b.y = 0, b.z = 180;
	int hash = GAMEPLAY::GET_HASH_KEY("caddy2");
	int hash2 = GAMEPLAY::GET_HASH_KEY("prop_wheelchair_01");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, true, false, true);
		if (ENTITY::DOES_ENTITY_EXIST(Object))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), true, false);
			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, 0);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				drawNotification("Spawnou uma ~b~Cadeira de Rodas");
				ENTITY::SET_ENTITY_VISIBLE(Handle, true, 0);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool spawnBumpercar()
{
	int Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(Handle, 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = -0.34, a.y = 0.32, a.z = -0.25;
	Vector3 b; b.x = 0, b.y = 0, b.z = 180;
	int hash = GAMEPLAY::GET_HASH_KEY("blista");
	int hash2 = GAMEPLAY::GET_HASH_KEY("prop_bumper_car_01");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, true, false, true);
		if (ENTITY::DOES_ENTITY_EXIST(Object))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), true, false);
			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, 0);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				drawNotification("Spawnou um ~b~Carrinho de Batida");
				ENTITY::SET_ENTITY_VISIBLE(Handle, true, 0);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool spawnWheelbarrow()
{
	int Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(Handle, 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -0.62, a.z = 0.12;
	Vector3 b; b.x = 0, b.y = 41.0, b.z = 90.0;
	int hash = GAMEPLAY::GET_HASH_KEY("blazer");
	int hash2 = GAMEPLAY::GET_HASH_KEY("prop_wheelbarrow01a");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, true, false, true);
		if (ENTITY::DOES_ENTITY_EXIST(Object))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), true, false);
			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, false, 0);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				drawNotification("Spawnou um ~b~Carrinho de Mao");
				ENTITY::SET_ENTITY_VISIBLE(Handle, true, 0);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

void ModdedVehicles()
{
	DRAW_TEXTURE("shopui_title_carmod2", "shopui_title_carmod2", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Carrinho De Compras");
	addOption("Carrinho De Mao");
	addOption("Carrinho De Batida");
	addOption("Cadeira De Rodas");
	addOption("Cama");
	addOption("Privada");

	if (getOption() == 1)
	{
		doTrolley = true;
	}
	if (getOption() == 2)
	{
		doWheelbarrow = true;
	}
	if (getOption() == 3)
	{
		doBumpercar = true;
	}
	if (getOption() == 4)
	{
		doWheelchair = true;
	}
	if (getOption() == 5)
	{
		doCouch = true;
	}
	if (getOption() == 6)
	{
		doToilet = true;
	}
	normalMenuActions();
}

#pragma region Vehicle Spawning
void VehSpawner() // VEHICLE SPAWNER // MENU VEHICLE SPAWNER
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Opcoes de Spawn ~r~>", 80);
	addOption("~g~Veiculos Modificados ~r~>");
	addOption("Barcos");
	addOption("Comerciais");
	addOption("Compactos");
	addOption("Coupes");
	addOption("Bikes");
	addOption("Emergencia");
	addOption("Helicopteros");
	addOption("Industrial");
	addOption("Militares");
	addOption("Motos");
	addOption("Muscle");
	addOption("Off-Road");
	addOption("Avioes");
	addOption("SUV's");
	addOption("Sedans");
	addOption("Servicos");
	addOption("Esportes");
	addOption("Esportes Classicos");
	addOption("Supers");
	addOption("Utilitarios");
	addOption("Vans");
	addOption("Trailers");
	addOption("Trains");
	addOption("Novos");
	addOption("~g~Novos 2 - ~b~EM BREVE...");

	if (getOption() == 2)
	{
		changeSubmenu(99);
	}
	else if (getOption() == 3)
	{
		changeSubmenu(100);
	}
	else if (getOption() == 4)
	{
		changeSubmenu(101);
	}
	else if (getOption() == 5)
	{
		changeSubmenu(102);
	}
	else if (getOption() == 6)
	{
		changeSubmenu(103);
	}
	else if (getOption() == 7)
	{
		changeSubmenu(104);
	}
	else if (getOption() == 8)
	{
		changeSubmenu(105);
	}
	else if (getOption() == 9)
	{
		changeSubmenu(106);
	}
	else if (getOption() == 10)
	{
		changeSubmenu(107);
	}
	else if (getOption() == 11)
	{
		changeSubmenu(108);
	}
	else if (getOption() == 12)
	{
		changeSubmenu(109);
	}
	else if (getOption() == 13)
	{
		changeSubmenu(110);
	}
	else if (getOption() == 14)
	{
		changeSubmenu(111);
	}
	else if (getOption() == 15)
	{
		changeSubmenu(112);
	}
	else if (getOption() == 16)
	{
		changeSubmenu(113);
	}
	else if (getOption() == 17)
	{
		changeSubmenu(114);
	}
	else if (getOption() == 18)
	{
		changeSubmenu(115);
	}
	else if (getOption() == 19)
	{
		changeSubmenu(116);
	}
	else if (getOption() == 20)
	{
		changeSubmenu(117);
	}
	else if (getOption() == 21)
	{
		changeSubmenu(118);
	}
	else if (getOption() == 22)
	{
		changeSubmenu(119);
	}
	else if (getOption() == 23)
	{
		changeSubmenu(120);
	}
	else if (getOption() == 24)
	{
		changeSubmenu(121);
	}
	else if (getOption() == 25)
	{
		changeSubmenu(122);
	}
	else if (getOption() == 26) // 2021 - Atualizando "Veiculos Novos"
	{
		changeSubmenu(123);
	}
	else if (getOption() == 27) // 2021 - Atualizando ( N�o Est�o Spawnando )
	{
		changeSubmenu(124);
	}
	normalMenuActions();
}

void VehOptions()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addBoolOption("Spawnar Tunado", spawnwithmax);
	addBoolOption("Spawnar Dentro", SPAWN_WRAP);
	addBoolOption("Deletar Veic. Anterior", deleteprevious);
	addBoolOption("~m~Spawnar Com Cor Personalizada", SpawnCustomPaint);

	if (SpawnCustomPaint)
	{
		addNotifyOption("-Primary-", "Primary RGB");
		addIntOption("Red", &PrimR, 0, 255);
		addIntOption("Green", &PrimG, 0, 255);
		addIntOption("Blue", &PrimB, 0, 255);
		addNotifyOption("-Secondary-", "Secondary RGB");
		addIntOption("Red", &SecR, 0, 255);
		addIntOption("Green", &SecG, 0, 255);
		addIntOption("Blue", &SecB, 0, 255);
		addNotifyOption("-Tyre Smoke-", "Tyre Smoke RGB");
		addIntOption("Red", &TyreR, 0, 255);
		addIntOption("Green", &TyreG, 0, 255);
		addIntOption("Blue", &TyreB, 0, 255);
		addNotifyOption("-Neon's-", "Neon's RGB");
		addIntOption("Red", &TyreR, 0, 255);
		addIntOption("Green", &TyreG, 0, 255);
		addIntOption("Blue", &TyreB, 0, 255);
	}
	if (getOption() == 1)
	{
		spawnwithmax = !spawnwithmax;
	}
	if (getOption() == 2)
	{
		SPAWN_WRAP = !SPAWN_WRAP;
	}
	if (getOption() == 3)
	{
		deleteprevious = !deleteprevious;
	}
	if (getOption() == 4)
	{
		SpawnCustomPaint = !SpawnCustomPaint;
	}
	normalMenuActions();
}

void Barcos()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Dinghy", "Dinghy", "Voce Spawnou: ~b~Dinghy");
	addVehOption("Dinghy2", "Dinghy2", "Voce Spawnou: ~b~Dinghy2");
	addVehOption("Dinghy3", "Dinghy3", "Voce Spawnou: ~b~Dinghy3");
	addVehOption("Dinghy4", "Dinghy4", "Voce Spawnou: ~b~Dinghy4");
	addVehOption("Jetmax", "Jetmax", "Voce Spawnou: ~b~Jetmax");
	addVehOption("Marquis", "Marquis", "Voce Spawnou: ~b~Marquis");
	addVehOption("Seashark", "Seashark", "Voce Spawnou: ~b~Seashark");
	addVehOption("Seashark2", "Seashark2", "Voce Spawnou: ~b~Seashark2");
	addVehOption("Seashark3", "Seashark3", "Voce Spawnou: ~b~Seashark3");
	addVehOption("Speeder", "Speeder", "Voce Spawnou: ~b~Speeder");
	addVehOption("Speeder2", "Speeder2", "Voce Spawnou: ~b~Speeder2");
	addVehOption("Squalo", "Squalo", "Voce Spawnou: ~b~Squalo");
	addVehOption("Submersible", "Submersible", "Voce Spawnou: ~b~Submersible");
	addVehOption("Submersible2", "Submersible2", "Voce Spawnou: ~b~Submersible2");
	addVehOption("Suntrap", "Suntrap", "Voce Spawnou: ~b~Suntrap");
	addVehOption("Toro", "Toro", "Voce Spawnou: ~b~Toro");
	addVehOption("Toro2", "Toro2", "Voce Spawnou: ~b~Toro2");
	addVehOption("Tropic", "Tropic", "Voce Spawnou: ~b~Tropic");
	addVehOption("Tropic2", "Tropic2", "Voce Spawnou: ~b~Tropic2");
	addVehOption("Tug", "Tug", "Voce Spawnou: ~b~Tug");
	normalMenuActions();
}

void Comerciais()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Benson", "Benson", "Voce Spawnou: ~b~Benson");
	addVehOption("Biff", "Biff", "Voce Spawnou: ~b~Biff");
	addVehOption("Hauler", "Hauler", "Voce Spawnou: ~b~Hauler");
	addVehOption("Hauler2", "Hauler2", "Voce Spawnou: ~b~Hauler2");
	addVehOption("Mule", "Mule", "Voce Spawnou: ~b~Mule");
	addVehOption("Mule2", "Mule2", "Voce Spawnou: ~b~Mule2");
	addVehOption("Mule3", "Mule3", "Voce Spawnou: ~b~Mule3");
	addVehOption("Packer", "Packer", "Voce Spawnou: ~b~Packer");
	addVehOption("Phantom", "Phantom", "Voce Spawnou: ~b~Phantom");
	addVehOption("Phantom2", "Phantom2", "Voce Spawnou: ~b~Phantom2");
	addVehOption("Phantom3", "Phantom3", "Voce Spawnou: ~b~Phantom3");
	addVehOption("Pounder", "Pounder", "Voce Spawnou: ~b~Pounder");
	addVehOption("Stockade", "Stockade", "Voce Spawnou: ~b~Stockade");
	addVehOption("Stockade3", "Stockade3", "Voce Spawnou: ~b~Stockade3");
	normalMenuActions();
}

void Compactos()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Blista", "Blista", "Voce Spawnou: ~b~Blista");
	addVehOption("Blista2", "Blista2", "Voce Spawnou: ~b~Blista2");
	addVehOption("Blista3", "Blista3", "Voce Spawnou: ~b~Blista3");
	addVehOption("Brioso", "Brioso", "Voce Spawnou: ~b~Brioso");
	addVehOption("Dilettante", "Dilettante", "Voce Spawnou: ~b~Dilettante");
	addVehOption("Dilettante2", "Dilettante2", "Voce Spawnou: ~b~Dilettante2");
	addVehOption("Issi2", "Issi2", "Voce Spawnou: ~b~Issi2");
	addVehOption("Panto", "Panto", "Voce Spawnou: ~b~Panto");
	addVehOption("Prairie", "Prairie", "Voce Spawnou: ~b~Prairie");
	addVehOption("Rhapsody", "Rhapsody", "Voce Spawnou: ~b~Rhapsody");
	normalMenuActions();
}

void Coupes()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("CogCabrio", "CogCabrio", "Voce Spawnou: ~b~CogCabrio");
	addVehOption("Exemplar", "Exemplar", "Voce Spawnou: ~b~Exemplar");
	addVehOption("F620", "F620", "Voce Spawnou: ~b~F620");
	addVehOption("Felon", "Felon", "Voce Spawnou: ~b~Felon");
	addVehOption("Felon2", "Felon2", "Voce Spawnou: ~b~Felon2");
	addVehOption("Jackal", "Jackal", "Voce Spawnou: ~b~Jackal");
	addVehOption("Oracle", "Oracle", "Voce Spawnou: ~b~Oracle");
	addVehOption("Oracle2", "Oracle2", "Voce Spawnou: ~b~Oracle2");
	addVehOption("Sentinel", "Sentinel", "Voce Spawnou: ~b~Sentinel");
	addVehOption("Sentinel2", "Sentinel2", "Voce Spawnou: ~b~Sentinel2");
	addVehOption("Windsor", "Windsor", "Voce Spawnou: ~b~Windsor");
	addVehOption("Windsor2", "Windsor2", "Voce Spawnou: ~b~Windsor2");
	addVehOption("Zion", "Zion", "Voce Spawnou: ~b~Zion");
	addVehOption("Zion2", "Zion2", "Voce Spawnou: ~b~Zion2");
	normalMenuActions();
}

void Bikes()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Bmx", "Bmx", "Voce Spawnou: ~b~Bmx");
	addVehOption("Cruiser", "Cruiser", "Voce Spawnou: ~b~Cruiser");
	addVehOption("Fixter", "Fixter", "Voce Spawnou: ~b~Fixter");
	addVehOption("Scorcher", "Scorcher", "Voce Spawnou: ~b~Scorcher");
	addVehOption("TriBike", "TriBike", "Voce Spawnou: ~b~TriBike");
	addVehOption("TriBike2", "TriBike2", "Voce Spawnou: ~b~TriBike2");
	addVehOption("TriBike3", "TriBike3", "Voce Spawnou: ~b~TriBike3");
	normalMenuActions();
}

void Emergencia()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Ambulance", "Ambulance", "Voce Spawnou: ~b~Ambulance");
	addVehOption("FBI", "FBI", "Voce Spawnou: ~b~FBI");
	addVehOption("FBI2", "FBI2", "Voce Spawnou: ~b~FBI2");
	addVehOption("FireTruck", "FireTruk", "Voce Spawnou: ~b~FireTruck");
	addVehOption("PBus", "PBus", "Voce Spawnou: ~b~PBus");
	addVehOption("Police", "Police", "Voce Spawnou: ~b~Police");
	addVehOption("Police2", "Police2", "Voce Spawnou: ~b~Police2");
	addVehOption("Police3", "Police3", "Voce Spawnou: ~b~Police3");
	addVehOption("Police4", "Police4", "Voce Spawnou: ~b~Police4");
	addVehOption("PoliceOld1", "PoliceOld1", "Voce Spawnou: ~b~PoliceOld1");
	addVehOption("PoliceOld2", "PoliceOld2", "Voce Spawnou: ~b~PoliceOld2");
	addVehOption("PoliceT", "PoliceT", "Voce Spawnou: ~b~PoliceT");
	addVehOption("Policeb", "Policeb", "Voce Spawnou: ~b~Policeb");
	addVehOption("Polmav", "Polmav", "Voce Spawnou: ~b~Polmav");
	addVehOption("Pranger", "Pranger", "Voce Spawnou: ~b~Pranger");
	addVehOption("Predator", "Predator", "Voce Spawnou: ~b~Predator");
	addVehOption("Riot", "Riot", "Voce Spawnou: ~b~Riot");
	addVehOption("Sheriff", "Sheriff", "Voce Spawnou: ~b~Sheriff");
	addVehOption("Sheriff2", "Sheriff2", "Voce Spawnou: ~b~Sheriff2");
	normalMenuActions();
}

void Helicopteros()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Annihilator", "Annihilator", "Voce Spawnou: ~b~Annihilator");
	addVehOption("Buzzard", "Buzzard", "Voce Spawnou: ~b~Buzzard");
	addVehOption("Buzzard2", "Buzzard2", "Voce Spawnou: ~b~Buzzard2");
	addVehOption("Cargobob", "Cargobob", "Voce Spawnou: ~b~Cargobob");
	addVehOption("Cargobob2", "Cargobob2", "Voce Spawnou: ~b~Cargobob2");
	addVehOption("Cargobob3", "Cargobob3", "Voce Spawnou: ~b~Cargobob3");
	addVehOption("Cargobob4", "Cargobob4", "Voce Spawnou: ~b~Cargobob4");
	addVehOption("Frogger", "Frogger", "Voce Spawnou: ~b~Frogger");
	addVehOption("Frogger2", "Frogger2", "Voce Spawnou: ~b~Frogger2");
	addVehOption("Maverick", "Maverick", "Voce Spawnou: ~b~Maverick");
	addVehOption("Savage", "Savage", "Voce Spawnou: ~b~Savage");
	addVehOption("Skylift", "Skylift", "Voce Spawnou: ~b~Skylift");
	addVehOption("Supervolito", "Supervolito", "Voce Spawnou: ~b~Supervolito");
	addVehOption("Supervolito2", "Supervolito2", "Voce Spawnou: ~b~Supervolito2");
	addVehOption("Swift", "Swift", "Voce Spawnou: ~b~Swift");
	addVehOption("Swift2", "Swift2", "Voce Spawnou: ~b~Swift2");
	addVehOption("Valkyrie", "Valkyrie", "Voce Spawnou: ~b~Valkyrie");
	addVehOption("Valkyrie2", "Valkyrie2", "Voce Spawnou: ~b~Valkyrie2");
	addVehOption("Volatus", "Volatus", "Voce Spawnou: ~b~Volatus");
	normalMenuActions();
}

void Industrial()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Bulldozer", "Bulldozer", "Voce Spawnou: ~b~Bulldozer");
	addVehOption("Cutter", "Cutter", "Voce Spawnou: ~b~Cutter");
	addVehOption("Dump", "Dump", "Voce Spawnou: ~b~Dump");
	addVehOption("Flatbed", "Flatbed", "Voce Spawnou: ~b~Flatbed");
	addVehOption("Guardian", "Guardian", "Voce Spawnou: ~b~Guardian");
	addVehOption("Handler", "Handler", "Voce Spawnou: ~b~Handler");
	addVehOption("Mixer", "Mixer", "Voce Spawnou: ~b~Mixer");
	addVehOption("Mixer2", "Mixer2", "Voce Spawnou: ~b~Mixer2");
	addVehOption("Rubble", "Rubble", "Voce Spawnou: ~b~Rubble");
	addVehOption("TipTruck", "TipTruck", "Voce Spawnou: ~b~TipTruck");
	addVehOption("TipTruck2", "TipTruck2", "Voce Spawnou: ~b~TipTruck2");
	normalMenuActions();
}

void Militares()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("APC", "APC", "Voce Spawnou: ~b~APC");
	addVehOption("Barracks", "Barracks", "Voce Spawnou: ~b~Barracks");
	addVehOption("Barracks2", "Barracks2", "Voce Spawnou: ~b~Barracks2");
	addVehOption("Barracks3", "Barracks3", "Voce Spawnou: ~b~Barracks3");
	addVehOption("Crusader", "Crusader", "Voce Spawnou: ~b~Crusader");
	addVehOption("Halftrack", "Halftrack", "Voce Spawnou: ~b~Halftrack");
	addVehOption("Rhino", "Rhino", "Voce Spawnou: ~b~Rhino");
	normalMenuActions();
}

void Motos()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Akuma", "Akuma", "Voce Spawnou: ~b~Akuma");
	addVehOption("Avarus", "Avarus", "Voce Spawnou: ~b~Avarus");
	addVehOption("Bagger", "Bagger", "Voce Spawnou: ~b~Bagger");
	addVehOption("Bati2", "Bati2", "Voce Spawnou: ~b~Bati2");
	addVehOption("Bati", "Bati", "Voce Spawnou: ~b~Bati");
	addVehOption("BF400", "BF400", "Voce Spawnou: ~b~BF400");
	addVehOption("Blazer4", "Blazer4", "Voce Spawnou: ~b~Blazer4");
	addVehOption("CarbonRS", "CarbonRS", "Voce Spawnou: ~b~CarbonRS");
	addVehOption("Chimera", "Chimera", "Voce Spawnou: ~b~Chimera");
	addVehOption("Cliffhanger", "Cliffhanger", "Voce Spawnou: ~b~Cliffhanger");
	addVehOption("Daemon2", "Daemon2", "Voce Spawnou: ~b~Daemon2");
	addVehOption("Daemon", "Daemon", "Voce Spawnou: ~b~Daemon");
	addVehOption("Defiler", "Defiler", "Voce Spawnou: ~b~Defiler");
	addVehOption("Double", "Double", "Voce Spawnou: ~b~Double");
	addVehOption("Enduro", "Enduro", "Voce Spawnou: ~b~Enduro");
	addVehOption("Esskey", "Esskey", "Voce Spawnou: ~b~Esskey");
	addVehOption("Faggio", "Faggio", "Voce Spawnou: ~b~Faggio");
	addVehOption("Faggio2", "Faggio2", "Voce Spawnou: ~b~Faggio2");
	addVehOption("Faggio3", "Faggio3", "Voce Spawnou: ~b~Faggio3");
	addVehOption("Fcr2", "Fcr2", "Voce Spawnou: ~b~Fcr2");
	addVehOption("Fcr", "Fcr", "Voce Spawnou: ~b~Fcr");
	addVehOption("Gargoyle", "Gargoyle", "Voce Spawnou: ~b~Gargoyle");
	addVehOption("Hakuchou2", "Hakuchou2", "Voce Spawnou: ~b~Hakuchou2");
	addVehOption("Hakuchou", "Hakuchou", "Voce Spawnou: ~b~Hakuchou");
	addVehOption("Hexer", "Hexer", "Voce Spawnou: ~b~Hexer");
	addVehOption("Innovation", "Innovation", "Voce Spawnou: ~b~Innovation");
	addVehOption("Lectro", "Lectro", "Voce Spawnou: ~b~Lectro");
	addVehOption("Manchez", "Manchez", "Voce Spawnou: ~b~Manchez");
	addVehOption("Nemesis", "Nemesis", "Voce Spawnou: ~b~Nemesis");
	addVehOption("Nightblade", "Nightblade", "Voce Spawnou: ~b~Nightblade");
	addVehOption("PCJ", "PCJ", "Voce Spawnou: ~b~PCJ");
	addVehOption("Ratbike", "Ratbike", "Voce Spawnou: ~b~Ruffian");
	addVehOption("Ruffian", "Ruffian", "Voce Spawnou: ~b~Ratbike");
	addVehOption("Sanchez", "Sanchez", "Voce Spawnou: ~b~Sanchez");
	addVehOption("Sanchez2", "Sanchez2", "Voce Spawnou: ~b~Sanchez2");
	addVehOption("Sanctus", "Sanctus", "Voce Spawnou: ~b~Sanctus");
	addVehOption("Shotaro", "Shotaro", "Voce Spawnou: ~b~Shotaro");
	addVehOption("Sovereign", "Sovereign", "Voce Spawnou: ~b~Sovereign");
	addVehOption("Thrust", "Thrust", "Voce Spawnou: ~b~Thrust");
	addVehOption("Vader", "Vader", "Voce Spawnou: ~b~Vader");
	addVehOption("Vindicator", "Vindicator", "Voce Spawnou: ~b~Vindicator");
	addVehOption("Vortex", "Vortex", "Voce Spawnou: ~b~Vortex");
	addVehOption("Wolfsbane", "Wolfsbane", "Voce Spawnou: ~b~Wolfsbane");
	addVehOption("Zombiea", "Zombiea", "Voce Spawnou: ~b~Zombiea");
	addVehOption("Zombieb", "Zombieb", "Voce Spawnou: ~b~Zombieb");
	normalMenuActions();
}

void Muscle()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Blade", "Blade", "Voce Spawnou: ~b~Blade");
	addVehOption("Buccaneer", "Buccaneer", "Voce Spawnou: ~b~Buccaneer");
	addVehOption("Buccaneer2", "Buccaneer2", "Voce Spawnou: ~b~Buccaneer2");
	addVehOption("Chino", "Chino", "Voce Spawnou: ~b~Chino");
	addVehOption("Chino2", "Chino2", "Voce Spawnou: ~b~Chino2");
	addVehOption("Dominator", "Dominator", "Voce Spawnou: ~b~Dominator");
	addVehOption("Dominator2", "Dominator2", "Voce Spawnou: ~b~Dominator");
	addVehOption("Dukes", "Dukes", "Voce Spawnou: ~b~Dukes");
	addVehOption("Dukes2", "Dukes2", "Voce Spawnou: ~b~Dukes2");
	addVehOption("Faction", "Faction", "Voce Spawnou: ~b~Faction");
	addVehOption("Faction2", "Faction2", "Voce Spawnou: ~b~Faction2");
	addVehOption("Faction3", "Faction3", "Voce Spawnou: ~b~Faction3");
	addVehOption("Gauntlet", "Gauntlet", "Voce Spawnou: ~b~Gauntlet");
	addVehOption("Gauntlet2", "Gauntlet", "Voce Spawnou: ~b~Gauntlet2");
	addVehOption("Hotknife", "Hotknife", "Voce Spawnou: ~b~Hotknife");
	addVehOption("Lurcher", "Lurcher", "Voce Spawnou: ~b~Lurcher");
	addVehOption("Moonbeam", "Moonbeam", "Voce Spawnou: ~b~Moonbeam");
	addVehOption("Moonbeam2", "Moonbeam2", "Voce Spawnou: ~b~Moonbeam2");
	addVehOption("Nightshade", "Nightshade", "Voce Spawnou: ~b~Nightshade");
	addVehOption("Phoenix", "Phoenix", "Voce Spawnou: ~b~Phoenix");
	addVehOption("Picador", "Picador", "Voce Spawnou: ~b~Picador");
	addVehOption("RatLoader", "RatLoader", "Voce Spawnou: ~b~RatLoader");
	addVehOption("RatLoader2", "RatLoader2", "Voce Spawnou: ~b~RatLoader2");
	addVehOption("Ruiner", "Ruiner", "Voce Spawnou: ~b~Ruiner");
	addVehOption("Ruiner2", "Ruiner2", "Voce Spawnou: ~b~Ruiner2");
	addVehOption("SabreGT", "SabreGT", "Voce Spawnou: ~b~SabreGT");
	addVehOption("SabreGT2", "SabreGT2", "Voce Spawnou: ~b~SabreGT2");
	addVehOption("Sadler2", "Sadler2", "Voce Spawnou: ~b~Sadler2");
	addVehOption("SlamVan", "SlamVan", "Voce Spawnou: ~b~SlamVan");
	addVehOption("SlamVan2", "SlamVan2", "Voce Spawnou: ~b~SlamVan2");
	addVehOption("SlamVan3", "SlamVan3", "Voce Spawnou: ~b~SlamVan3");
	addVehOption("Stalion", "Stalion", "Voce Spawnou: ~b~Stalion");
	addVehOption("Stalion2", "Stalion2", "Voce Spawnou: ~b~Stalion2");
	addVehOption("Tampa", "Tampa", "Voce Spawnou: ~b~Tampa");
	addVehOption("Tampa3", "Tampa3", "Voce Spawnou: ~b~Tampa3");
	addVehOption("Vigero", "Vigero", "Voce Spawnou: ~b~Vigero");
	addVehOption("Virgo", "Virgo", "Voce Spawnou: ~b~Virgo");
	addVehOption("Virgo2", "Virgo2", "Voce Spawnou: ~b~Virgo2");
	addVehOption("Virgo3", "Virgo3", "Voce Spawnou: ~b~Virgo3");
	addVehOption("Voodoo", "Voodoo", "Voce Spawnou: ~b~Voodoo");
	addVehOption("Voodoo2", "Voodoo2", "Voce Spawnou: ~b~Voodoo2");
	normalMenuActions();
}

void OffRoad()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("BfInjection", "BfInjection", "Voce Spawnou: ~b~BfInjection");
	addVehOption("Bifta", "Bifta", "Voce Spawnou: ~b~Bifta");
	addVehOption("Blazer", "Blazer", "Voce Spawnou: ~b~Blazer");
	addVehOption("Blazer2", "Blazer2", "Voce Spawnou: ~b~Blazer2");
	addVehOption("Blazer3", "Blazer3", "Voce Spawnou: ~b~Blazer3");
	addVehOption("Blazer5", "Blazer5", "Voce Spawnou: ~b~Blazer5");
	addVehOption("Bodhi2", "Bodhi2", "Voce Spawnou: ~b~Bodhi2");
	addVehOption("Brawler", "Brawler", "Voce Spawnou: ~b~Brawler");
	addVehOption("DLoader", "BfInjection", "Voce Spawnou: ~b~BfInjection");
	addVehOption("Dune", "Dune", "Voce Spawnou: ~b~Dune");
	addVehOption("Dune2", "Dune2", "Voce Spawnou: ~b~Dune2");
	addVehOption("Dune3", "Dune3", "Voce Spawnou: ~b~Dune3");
	addVehOption("Dune4", "Dune4", "Voce Spawnou: ~b~Dune4");
	addVehOption("Dune5", "Dune5", "Voce Spawnou: ~b~Dune5");
	addVehOption("Insurgent", "Insurgent", "Voce Spawnou: ~b~Insurgent");
	addVehOption("Insurgent2", "Insurgent2", "Voce Spawnou: ~b~Insurgent2");
	addVehOption("Insurgent3", "Insurgent3", "Voce Spawnou: ~b~Insurgent3");
	addVehOption("Kalahari", "Kalahari", "Voce Spawnou: ~b~Kalahari");
	addVehOption("Lguard", "Lguard", "Voce Spawnou: ~b~Lguard");
	addVehOption("Marshall", "Marshall", "Voce Spawnou: ~b~Marshall");
	addVehOption("Mesa", "Mesa", "Voce Spawnou: ~b~Mesa");
	addVehOption("Mesa2", "Mesa2", "Voce Spawnou: ~b~Mesa2");
	addVehOption("Mesa3", "Mesa3", "Voce Spawnou: ~b~Mesa3");
	addVehOption("Monster", "Monster", "Voce Spawnou: ~b~Monster");
	addVehOption("Nightshark", "Nightshark", "Voce Spawnou: ~b~Nightshark");
	addVehOption("RancherXL", "RancherXL", "Voce Spawnou: ~b~RancherXL");
	addVehOption("RancherXL2", "RancherXL2", "Voce Spawnou: ~b~RancherXL2");
	addVehOption("Rebel", "Rebel", "Voce Spawnou: ~b~Rebel");
	addVehOption("Rebel2", "Rebel2", "Voce Spawnou: ~b~Rebel2");
	addVehOption("Sandking", "Sandking", "Voce Spawnou: ~b~Sandking");
	addVehOption("Sandking2", "Sandking2", "Voce Spawnou: ~b~Sandking2");
	addVehOption("Technical", "Technical", "Voce Spawnou: ~b~Technical");
	addVehOption("Technical2", "Technical2", "Voce Spawnou: ~b~Technical2");
	addVehOption("Technical3", "Technical3", "Voce Spawnou: ~b~Technical3");
	addVehOption("TrophyTruck", "TrophyTruck", "Voce Spawnou: ~b~TrophyTruck");
	addVehOption("TrophyTruck2", "TrophyTruck2", "Voce Spawnou: ~b~TrophyTruck2");
	normalMenuActions();
}

void Avioes()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Besra", "Besra", "Voce Spawnou: ~b~Besra");
	addVehOption("Blimp", "Blimp", "Voce Spawnou: ~b~Blimp");
	addVehOption("Blimp2", "Blimp2", "Voce Spawnou: ~b~Blimp2");
	addVehOption("CargoPlane", "CargoPlane", "Voce Spawnou: ~b~CargoPlane");
	addVehOption("Cuban800", "Cuban800", "Voce Spawnou: ~b~Cuban800");
	addVehOption("Dodo", "Dodo", "Voce Spawnou: ~b~Dodo");
	addVehOption("Duster", "Duster", "Voce Spawnou: ~b~Duster");
	addVehOption("Hydra", "Hydra", "Voce Spawnou: ~b~Hydra");
	addVehOption("Jet", "Jet", "Voce Spawnou: ~b~Jet");
	addVehOption("Lazer", "Lazer", "Voce Spawnou: ~b~Lazer");
	addVehOption("Luxor", "Luxor", "Voce Spawnou: ~b~Luxor");
	addVehOption("Luxor2", "Luxor2", "Voce Spawnou: ~b~Luxor2");
	addVehOption("Mammatus", "Mammatus", "Voce Spawnou: ~b~Mammatus");
	addVehOption("Miljet", "Miljet", "Voce Spawnou: ~b~Miljet");
	addVehOption("Nimbus", "Nimbus", "Voce Spawnou: ~b~Nimbus");
	addVehOption("Shamal", "Shamal", "Voce Spawnou: ~b~Shamal");
	addVehOption("Stunt", "Stunt", "Voce Spawnou: ~b~Stunt");
	addVehOption("Titan", "Titan", "Voce Spawnou: ~b~Titan");
	addVehOption("Velum", "Velum", "Voce Spawnou: ~b~Velum");
	addVehOption("Velum2", "Velum2", "Voce Spawnou: ~b~Velum2");
	addVehOption("Vestra", "Vestra", "Voce Spawnou: ~b~Vestra");
	normalMenuActions();
}

void Suvs()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("BJXL", "BJXL", "Voce Spawnou: ~b~BJXL");
	addVehOption("Baller", "Baller", "Voce Spawnou: ~b~Baller");
	addVehOption("Baller2", "Baller2", "Voce Spawnou: ~b~Baller2");
	addVehOption("Baller3", "Baller3", "Voce Spawnou: ~b~Baller3");
	addVehOption("Baller4", "Baller4", "Voce Spawnou: ~b~Baller4");
	addVehOption("Baller5", "Baller5", "Voce Spawnou: ~b~Baller5");
	addVehOption("Baller6", "Baller6", "Voce Spawnou: ~b~Baller6");
	addVehOption("Cavalcade", "Cavalcade", "Voce Spawnou: ~b~Cavalcade");
	addVehOption("Cavalcade2", "Cavalcade2", "Voce Spawnou: ~b~Cavalcade2");
	addVehOption("Contender", "Contender", "Voce Spawnou: ~b~Contender");
	addVehOption("Dubsta", "Dubsta", "Voce Spawnou: ~b~Dubsta");
	addVehOption("Dubsta2", "Dubsta2", "Voce Spawnou: ~b~Dubsta2");
	addVehOption("Dubsta3", "Dubsta3", "Voce Spawnou: ~b~Dubsta3");
	addVehOption("FQ2", "FQ2", "Voce Spawnou: ~b~FQ2");
	addVehOption("Granger", "Granger", "Voce Spawnou: ~b~Granger");
	addVehOption("Gresley", "Gresley", "Voce Spawnou: ~b~Gresley");
	addVehOption("Habanero", "Habanero", "Voce Spawnou: ~b~Habanero");
	addVehOption("Huntley", "Huntley", "Voce Spawnou: ~b~Huntley");
	addVehOption("Landstalker", "Landstalker", "Voce Spawnou: ~b~Landstalker");
	addVehOption("Patriot", "Patriot", "Voce Spawnou: ~b~Patriot");
	addVehOption("Radi", "Radi", "Voce Spawnou: ~b~Radi");
	addVehOption("Rocoto", "Rocoto", "Voce Spawnou: ~b~Rocoto");
	addVehOption("Seminole", "Seminole", "Voce Spawnou: ~b~Seminole");
	addVehOption("Serrano", "Serrano", "Voce Spawnou: ~b~Serrano");
	addVehOption("XLS", "XLS", "Voce Spawnou: ~b~XLS");
	addVehOption("XLS2", "XLS2", "Voce Spawnou: ~b~XLS2");
	normalMenuActions();
}

void Sedans()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Asea", "Asea", "Voce Spawnou: ~b~Asea");
	addVehOption("Asea2", "Asea2", "Voce Spawnou: ~b~Asea2");
	addVehOption("Asterope", "Asterope", "Voce Spawnou: ~b~Asterope");
	addVehOption("Cog55", "Cog55", "Voce Spawnou: ~b~Cog55");
	addVehOption("Cog552", "Cog552", "Voce Spawnou: ~b~Cog552");
	addVehOption("Cognoscenti", "Cognoscenti", "Voce Spawnou: ~b~Cognoscenti");
	addVehOption("Cognoscenti2", "Cognoscenti2", "Voce Spawnou: ~b~Cognoscenti2");
	addVehOption("Emperor", "Emperor", "Voce Spawnou: ~b~Emperor");
	addVehOption("Emperor2", "Emperor2", "Voce Spawnou: ~b~Emperor2");
	addVehOption("Emperor3", "Emperor3", "Voce Spawnou: ~b~Emperor3");
	addVehOption("Fugitive", "Fugitive", "Voce Spawnou: ~b~Fugitive");
	addVehOption("Glendale", "Glendale", "Voce Spawnou: ~b~Glendale");
	addVehOption("Ingot", "Ingot", "Voce Spawnou: ~b~Ingot");
	addVehOption("Intruder", "Intruder", "Voce Spawnou: ~b~Intruder");
	addVehOption("Limo2", "Limo2", "Voce Spawnou: ~b~Limo2");
	addVehOption("Premier", "Premier", "Voce Spawnou: ~b~Premier");
	addVehOption("Primo", "Primo", "Voce Spawnou: ~b~Primo");
	addVehOption("Primo2", "Primo2", "Voce Spawnou: ~b~Primo2");
	addVehOption("Regina", "Regina", "Voce Spawnou: ~b~Regina");
	addVehOption("Romero", "Romero", "Voce Spawnou: ~b~Romero");
	addVehOption("Stanier", "Stanier", "Voce Spawnou: ~b~Stanier");
	addVehOption("Stratum", "Stratum", "Voce Spawnou: ~b~Stratum");
	addVehOption("Stretch", "Stretch", "Voce Spawnou: ~b~Stretch");
	addVehOption("Surge", "Surge", "Voce Spawnou: ~b~Surge");
	addVehOption("Tailgater", "Tailgater", "Voce Spawnou: ~b~Tailgater");
	addVehOption("Warrener", "Warrener", "Voce Spawnou: ~b~Warrener");
	addVehOption("Washington", "Washington", "Voce Spawnou: ~b~Washington");
	normalMenuActions();
}

void Servicos()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Airbus", "Airbus", "Voce Spawnou: ~b~Airbus");
	addVehOption("Brickade", "Brickade", "Voce Spawnou: ~b~Brickade");
	addVehOption("Bus", "Bus", "Voce Spawnou: ~b~Bus");
	addVehOption("Coach", "Coach", "Voce Spawnou: ~b~Coach");
	addVehOption("Rallytruck", "Rallytruck", "Voce Spawnou: ~b~Rallytruck");
	addVehOption("RentalBus", "RentalBus", "Voce Spawnou: ~b~RentalBus");
	addVehOption("Taxi", "Taxi", "Voce Spawnou: ~b~Taxi");
	addVehOption("Tourbus", "Tourbus", "Voce Spawnou: ~b~Tourbus");
	addVehOption("Trash", "Trash", "Voce Spawnou: ~b~Trash");
	addVehOption("Trash2", "Trash2", "Voce Spawnou: ~b~Trash2");
	normalMenuActions();
}

void Esportes()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Alpha", "Alpha", "Voce Spawnou: ~b~Alpha");
	addVehOption("Banshee", "Banshee", "Voce Spawnou: ~b~Banshee");
	addVehOption("Banshee2", "Banshee2", "Voce Spawnou: ~b~Banshee2");
	addVehOption("BestiaGTS", "BestiaGTS", "Voce Spawnou: ~b~BestiaGTS");
	addVehOption("Buffalo", "Buffalo", "Voce Spawnou: ~b~Buffalo");
	addVehOption("Buffalo2", "Buffalo2", "Voce Spawnou: ~b~Buffalo2");
	addVehOption("Buffalo3", "Buffalo3", "Voce Spawnou: ~b~Buffalo3");
	addVehOption("Carbonizzare", "Carbonizzare", "Voce Spawnou: ~b~Carbonizzare");
	addVehOption("Comet2", "Comet2", "Voce Spawnou: ~b~Comet2");
	addVehOption("Comet3", "Comet3", "Voce Spawnou: ~b~Comet3");
	addVehOption("Coquette", "Coquette", "Voce Spawnou: ~b~Coquette");
	addVehOption("Elegy", "Elegy", "Voce Spawnou: ~b~Elegy");
	addVehOption("Elegy2", "Elegy2", "Voce Spawnou: ~b~Elegy2");
	addVehOption("Feltzer2", "Feltzer2", "Voce Spawnou: ~b~Feltzer2");
	addVehOption("Feltzer3", "Feltzer3", "Voce Spawnou: ~b~Feltzer3");
	addVehOption("Furoregt", "Furoregt", "Voce Spawnou: ~b~Furoregt");
	addVehOption("Fusilade", "Fusilade", "Voce Spawnou: ~b~Fusilade");
	addVehOption("Futo", "Futo", "Voce Spawnou: ~b~Futo");
	addVehOption("Jester", "Jester", "Voce Spawnou: ~b~Jester");
	addVehOption("Jester2", "Jester2", "Voce Spawnou: ~b~Jester2");
	addVehOption("Khamelion", "Khamelion", "Voce Spawnou: ~b~Khamelion");
	addVehOption("Kuruma", "Kuruma", "Voce Spawnou: ~b~Kuruma");
	addVehOption("Kuruma2", "Kuruma2", "Voce Spawnou: ~b~Kuruma2");
	addVehOption("Lynx", "Lynx", "Voce Spawnou: ~b~Lynx");
	addVehOption("Massacro", "Massacro", "Voce Spawnou: ~b~Massacro");
	addVehOption("Massacro2", "Massacro2", "Voce Spawnou: ~b~Massacro2");
	addVehOption("Ninef", "Ninef", "Voce Spawnou: ~b~Ninef");
	addVehOption("Ninef2", "Ninef2", "Voce Spawnou: ~b~Ninef2");
	addVehOption("Omnis", "Omnis", "Voce Spawnou: ~b~Omnis");
	addVehOption("Penumbra", "Penumbra", "Voce Spawnou: ~b~Penumbra");
	addVehOption("RapidGT", "RapidGT", "Voce Spawnou: ~b~RapidGT");
	addVehOption("RapidGT2", "RapidGT2", "Voce Spawnou: ~b~RapidGT2");
	addVehOption("Raptor", "Raptor", "Voce Spawnou: ~b~Raptor");
	addVehOption("Ruston", "Ruston", "Voce Spawnou: ~b~Ruston");
	addVehOption("Schafter2", "Schafter2", "Voce Spawnou: ~b~Schafter2");
	addVehOption("Schafter3", "Schafter3", "Voce Spawnou: ~b~Schafter3");
	addVehOption("Schafter4", "Schafter4", "Voce Spawnou: ~b~Schafter4");
	addVehOption("Schafter5", "Schafter5", "Voce Spawnou: ~b~Schafter5");
	addVehOption("Schafter6", "Schafter6", "Voce Spawnou: ~b~Schafter6");
	addVehOption("Schwarzer", "Schwarzer", "Voce Spawnou: ~b~Schwarzer");
	addVehOption("Seven70", "Seven70", "Voce Spawnou: ~b~Seven70");
	addVehOption("Specter", "Specter", "Voce Spawnou: ~b~Specter");
	addVehOption("Specter2", "Specter2", "Voce Spawnou: ~b~Specter2");
	addVehOption("Sultan", "Sultan", "Voce Spawnou: ~b~Sultan");
	addVehOption("Surano", "Surano", "Voce Spawnou: ~b~Surano");
	addVehOption("Tampa2", "Tampa2", "Voce Spawnou: ~b~Tampa2");
	addVehOption("Tropos", "Tropos", "Voce Spawnou: ~b~Tropos");
	addVehOption("Verlierer2", "Verlierer2", "Voce Spawnou: ~b~Verlierer2");
	normalMenuActions();
}

void EsportesClassicos()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Ardent", "Ardent", "Voce Spawnou: ~b~Ardent");
	addVehOption("BType", "BType", "Voce Spawnou: ~b~BType");
	addVehOption("BType2", "BType2", "Voce Spawnou: ~b~BType2");
	addVehOption("BType3", "BType3", "Voce Spawnou: ~b~BType3");
	addVehOption("Casco", "Casco", "Voce Spawnou: ~b~Casco");
	addVehOption("Cheetah2", "Cheetah2", "Voce Spawnou: ~b~Cheetah2");
	addVehOption("Coquette2", "Coquette2", "Voce Spawnou: ~b~Coquette2");
	addVehOption("Coquette3", "Coquette3", "Voce Spawnou: ~b~Coquette3");
	addVehOption("JB700", "JB700", "Voce Spawnou: ~b~JB700");
	addVehOption("Mamba", "Mamba", "Voce Spawnou: ~b~Mamba");
	addVehOption("Manana", "Manana", "Voce Spawnou: ~b~Manana");
	addVehOption("Monroe", "Monroe", "Voce Spawnou: ~b~Monroe");
	addVehOption("Peyote", "Peyote", "Voce Spawnou: ~b~Peyote");
	addVehOption("Pigalle", "Pigalle", "Voce Spawnou: ~b~Pigalle");
	addVehOption("Stinger", "Stinger", "Voce Spawnou: ~b~Stinger");
	addVehOption("StingerGT", "StingerGT", "Voce Spawnou: ~b~StingerGT");
	addVehOption("Torero", "Torero", "Voce Spawnou: ~b~Torero");
	addVehOption("Tornado", "Tornado", "Voce Spawnou: ~b~Tornado");
	addVehOption("Tornado2", "Tornado2", "Voce Spawnou: ~b~Tornado2");
	addVehOption("Tornado3", "Tornado3", "Voce Spawnou: ~b~Tornado3");
	addVehOption("Tornado4", "Tornado4", "Voce Spawnou: ~b~Tornado4");
	addVehOption("Tornado5", "Tornado5", "Voce Spawnou: ~b~Tornado5");
	addVehOption("Tornado6", "Tornado6", "Voce Spawnou: ~b~Tornado6");
	addVehOption("ZType", "ZType", "Voce Spawnou: ~b~ZType");
	normalMenuActions();
}

void Supers()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Adder", "adder", "Voce Spawnou: ~b~Adder");
	addVehOption("Bullet", "Bullet", "Voce Spawnou: ~b~Bullet");
	addVehOption("Cheetah", "Cheetah", "Voce Spawnou: ~b~Cheetah");
	addVehOption("EntityXF", "EntityXF", "Voce Spawnou: ~b~EntityXF");
	addVehOption("FMJ", "FMJ", "Voce Spawnou: ~b~FMJ");
	addVehOption("GP1", "GP1", "Voce Spawnou: ~b~GP1");
	addVehOption("Infernus", "Infernus", "Voce Spawnou: ~b~Infernus");
	addVehOption("Nero", "Nero", "Voce Spawnou: ~b~Nero");
	addVehOption("Nero2", "Nero2", "Voce Spawnou: ~b~Nero2");
	addVehOption("Osiris", "Osiris", "Voce Spawnou: ~b~Osiris");
	addVehOption("Penetrator", "Penetrator", "Voce Spawnou: ~b~Penetrator");
	addVehOption("Pfister811", "Pfister811", "Voce Spawnou: ~b~Pfister811");
	addVehOption("Prototipo", "Prototipo", "Voce Spawnou: ~b~Prototipo");
	addVehOption("Reaper", "Reaper", "Voce Spawnou: ~b~Reaper");
	addVehOption("Sheava", "Sheava", "Voce Spawnou: ~b~Sheava");
	addVehOption("SultanRS", "SultanRS", "Voce Spawnou: ~b~SultanRS");
	addVehOption("Superd", "Superd", "Voce Spawnou: ~b~Superd");
	addVehOption("T20", "T20", "Voce Spawnou: ~b~T20");
	addVehOption("Tempesta", "Tempesta", "Voce Spawnou: ~b~Tempesta");
	addVehOption("Turismo2", "Turismo2", "Voce Spawnou: ~b~Turismo2");
	addVehOption("Turismor", "Turismor", "Voce Spawnou: ~b~Turismor");
	addVehOption("Tyrus", "Tyrus", "Voce Spawnou: ~b~Tyrus");
	addVehOption("Vacca", "Vacca", "Voce Spawnou: ~b~Vacca");
	addVehOption("Vagner", "Vagner", "Voce Spawnou: ~b~Vagner");
	addVehOption("Voltic", "Voltic", "Voce Spawnou: ~b~Voltic");
	addVehOption("Voltic2", "Voltic2", "Voce Spawnou: ~b~Voltic2");
	addVehOption("Zentorno", "Zentorno", "Voce Spawnou: ~b~Zentorno");
	addVehOption("Italigtb", "Italigtb", "Voce Spawnou: ~b~Italigtb");
	addVehOption("Italigtb2", "Italigtb2", "Voce Spawnou: ~b~Italigtb2");
	addVehOption("XA21", "XA21", "Voce Spawnou: ~b~XA21");
	normalMenuActions();
}

void Utilitarios()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Airtug", "Airtug", "Voce Spawnou: ~b~Airtug");
	addVehOption("Caddy", "Caddy", "Voce Spawnou: ~b~Caddy");
	addVehOption("Caddy2", "Caddy2", "Voce Spawnou: ~b~Caddy2");
	addVehOption("Caddy3", "Caddy3", "Voce Spawnou: ~b~Caddy3");
	addVehOption("Docktug", "Docktug", "Voce Spawnou: ~b~Docktug");
	addVehOption("Forklift", "Forklift", "Voce Spawnou: ~b~Forklift");
	addVehOption("Mower", "Mower", "Voce Spawnou: ~b~Mower");
	addVehOption("Ripley", "Ripley", "Voce Spawnou: ~b~Ripley");
	addVehOption("Sadler", "Sadler", "Voce Spawnou: ~b~Sadler");
	addVehOption("Scrap", "Scrap", "Voce Spawnou: ~b~Scrap");
	addVehOption("TowTruck", "TowTruck", "Voce Spawnou: ~b~TowTruck");
	addVehOption("TowTruck2", "TowTruck2", "Voce Spawnou: ~b~TowTruck2");
	addVehOption("Tractor", "Tractor", "Voce Spawnou: ~b~Tractor");
	addVehOption("Tractor2", "Tractor2", "Voce Spawnou: ~b~Tractor2");
	addVehOption("Tractor3", "Tractor3", "Voce Spawnou: ~b~Tractor3");
	addVehOption("TrailerLarge", "TrailerLarge", "Voce Spawnou: ~b~TrailerLarge");
	addVehOption("TrailerS4", "TrailerS4", "Voce Spawnou: ~b~TrailerS4");
	addVehOption("UtilliTruck", "UtilliTruck", "Voce Spawnou: ~b~UtilliTruck");
	addVehOption("UtilliTruck3", "UtilliTruck3", "Voce Spawnou: ~b~UtilliTruck3");
	addVehOption("UtilliTruck2", "UtilliTruck2", "Voce Spawnou: ~b~UtilliTruck2");
	normalMenuActions();
}

void Vans()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Bison", "Bison", "Voce Spawnou: ~b~Bison");
	addVehOption("Bison2", "Bison2", "Voce Spawnou: ~b~Bison2");
	addVehOption("Bison3", "Bison3", "Voce Spawnou: ~b~Bison3");
	addVehOption("BobcatXL", "BobcatXL", "Voce Spawnou: ~b~BobcatXL");
	addVehOption("Boxville", "Boxville", "Voce Spawnou: ~b~Boxville");
	addVehOption("Boxville2", "Boxville2", "Voce Spawnou: ~b~Boxville2");
	addVehOption("Boxville3", "Boxville3", "Voce Spawnou: ~b~Boxville3");
	addVehOption("Boxville4", "Boxville4", "Voce Spawnou: ~b~Boxville4");
	addVehOption("Boxville5", "Boxville5", "Voce Spawnou: ~b~Boxville5");
	addVehOption("Burrito", "Burrito", "Voce Spawnou: ~b~Burrito");
	addVehOption("Burrito2", "Burrito2", "Voce Spawnou: ~b~Burrito2");
	addVehOption("Burrito3", "Burrito3", "Voce Spawnou: ~b~Burrito3");
	addVehOption("Burrito4", "Burrito4", "Voce Spawnou: ~b~Burrito4");
	addVehOption("Burrito5", "Burrito5", "Voce Spawnou: ~b~Burrito5");
	addVehOption("Camper", "Camper", "Voce Spawnou: ~b~Camper");
	addVehOption("GBurrito", "GBurrito", "Voce Spawnou: ~b~GBurrito");
	addVehOption("GBurrito2", "GBurrito2", "Voce Spawnou: ~b~GBurrito2");
	addVehOption("Journey", "Journey", "Voce Spawnou: ~b~Journey");
	addVehOption("Minivan", "Minivan", "Voce Spawnou: ~b~Minivan");
	addVehOption("Minivan2", "Minivan2", "Voce Spawnou: ~b~Minivan2");
	addVehOption("Paradise", "Paradise", "Voce Spawnou: ~b~Paradise");
	addVehOption("Pony", "Pony", "Voce Spawnou: ~b~Pony");
	addVehOption("Pony2", "Pony2", "Voce Spawnou: ~b~Pony2");
	addVehOption("Rumpo", "Rumpo", "Voce Spawnou: ~b~Rumpo");
	addVehOption("Rumpo2", "Rumpo2", "Voce Spawnou: ~b~Rumpo2");
	addVehOption("Rumpo3", "Rumpo3", "Voce Spawnou: ~b~Rumpo3");
	addVehOption("Speedo", "Speedo", "Voce Spawnou: ~b~Speedo");
	addVehOption("Speedo2", "Speedo2", "Voce Spawnou: ~b~Speedo2");
	addVehOption("Surfer", "Surfer", "Voce Spawnou: ~b~Surfer");
	addVehOption("Surfer2", "Surfer2", "Voce Spawnou: ~b~Surfer2");
	addVehOption("Taco", "Taco", "Voce Spawnou: ~b~Taco");
	addVehOption("Youga", "Youga", "Voce Spawnou: ~b~Youga");
	addVehOption("Youga2", "Youga2", "Voce Spawnou: ~b~Youga2");
	normalMenuActions();
}

void Trailers()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("ArmyTanker", "ArmyTanker", "Voce Spawnou: ~b~ArmyTanker");
	addVehOption("ArmyTrailer", "ArmyTrailer", "Voce Spawnou: ~b~ArmyTrailer");
	addVehOption("ArmyTrailer2", "ArmyTrailer2", "Voce Spawnou: ~b~ArmyTrailer2");
	addVehOption("BaleTrailer", "BaleTrailer", "Voce Spawnou: ~b~BaleTrailer");
	addVehOption("BoatTrailer", "BoatTrailer", "Voce Spawnou: ~b~BoatTrailer");
	addVehOption("CableCar", "CableCar", "Voce Spawnou: ~b~CableCar");
	addVehOption("DockTrailer", "DockTrailer", "Voce Spawnou: ~b~DockTrailer");
	addVehOption("GrainTrailer", "GrainTrailer", "Voce Spawnou: ~b~GrainTrailer");
	addVehOption("PropTrailer", "PropTrailer", "Voce Spawnou: ~b~PropTrailer");
	addVehOption("RakeTrailer", "RakeTrailer", "Voce Spawnou: ~b~RakeTrailer");
	addVehOption("TR2", "TR2", "Voce Spawnou: ~b~TR2");
	addVehOption("TR3", "TR3", "Voce Spawnou: ~b~TR3");
	addVehOption("TR4", "TR4", "Voce Spawnou: ~b~TR4");
	addVehOption("TRFlat", "TRFlat", "Voce Spawnou: ~b~TRFlat");
	addVehOption("TVTrailer", "TVTrailer", "Voce Spawnou: ~b~TVTrailer");
	addVehOption("Tanker", "Tanker", "Voce Spawnou: ~b~Tanker");
	addVehOption("Tanker2", "Tanker2", "Voce Spawnou: ~b~Tanker2");
	addVehOption("TrailerLogs", "TrailerLogs", "Voce Spawnou: ~b~TrailerLogs");
	addVehOption("TrailerSmall", "TrailerSmall", "Voce Spawnou: ~b~TrailerSmall");
	addVehOption("Trailers", "Trailers", "Voce Spawnou: ~b~Trailers");
	addVehOption("Trailers2", "Trailers2", "Voce Spawnou: ~b~Trailers2");
	addVehOption("Trailers3", "Trailers3", "Voce Spawnou: ~b~Trailers3");
	normalMenuActions();
}

void Trains()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("Freight", "Freight", "Voce Spawnou: ~b~Freight");
	addVehOption("FreightCar", "FreightCar", "Voce Spawnou: ~b~FreightCar");
	addVehOption("FreightCont1", "FreightCont1", "Voce Spawnou: ~b~FreightCont1");
	addVehOption("FreightCont2", "FreightCont2", "Voce Spawnou: ~b~FreightCont2");
	addVehOption("FreightGrain", "FreightGrain", "Voce Spawnou: ~b~FreightGrain");
	addVehOption("FreightTrailer", "FreightTrailer", "Voce Spawnou: ~b~FreightTrailer");
	addVehOption("TankerCar", "TankerCar", "Voce Spawnou: ~b~TankerCar");
	normalMenuActions();
}

void Novos1()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("BLIMP3", "BLIMP3", "Voce Spawnou: ~b~BLIMP3");
	addVehOption("MENACER", "MENACER", "Voce Spawnou: ~b~MENACER");
	addVehOption("MULE4", "MULE4", "Voce Spawnou: ~b~MULE4");
	addVehOption("OPPRESSOR2", "OPPRESSOR2", "Voce Spawnou: ~b~OPPRESSOR2");
	addVehOption("PATRIOT2", "PATRIOT2", "Voce Spawnou: ~b~PATRIOT2");
	addVehOption("PBUS2", "PBUS2", "Voce Spawnou: ~b~PBUS2");
	addVehOption("SCRAMJET", "SCRAMJET", "Voce Spawnou: ~b~SCRAMJET");
	addVehOption("SPEEDO4", "SPEEDO4", "Voce Spawnou: ~b~SPEEDO4");
	addVehOption("STAFFORD", "STAFFORD", "Voce Spawnou: ~b~STAFFORD");
	addVehOption("STRIKEFORCE", "STRIKEFORCE", "Voce Spawnou: ~b~STRIKEFORCE");
	addVehOption("SWINGER", "SWINGER", "Voce Spawnou: ~b~SWINGER");
	addVehOption("TERBYTE", "TERBYTE", "Voce Spawnou: ~b~TERBYTE");
	addVehOption("BRUISER", "BRUISER", "Voce Spawnou: ~b~BRUISER");
	addVehOption("BRUISER2", "BRUISER2", "Voce Spawnou: ~b~BRUISER2");
	addVehOption("BRUISER3", "BRUISER3", "Voce Spawnou: ~b~BRUISER3");
	addVehOption("BRUTUS", "BRUTUS", "Voce Spawnou: ~b~BRUTUS");
	addVehOption("BRUTUS2", "BRUTUS2", "Voce Spawnou: ~b~BRUTUS2");
	addVehOption("BRUTUS3", "BRUTUS3", "Voce Spawnou: ~b~BRUTUS3");
	addVehOption("CERBERUS", "CERBERUS", "Voce Spawnou: ~b~CERBERUS");
	addVehOption("CERBERUS2", "CERBERUS2", "Voce Spawnou: ~b~CERBERUS2");
	addVehOption("CERBERUS3", "CERBERUS3", "Voce Spawnou: ~b~CERBERUS3");
	addVehOption("CLIQUE", "CLIQUE", "Voce Spawnou: ~b~CLIQUE");
	addVehOption("DEATHBIKE2", "DEATHBIKE2", "Voce Spawnou: ~b~DEATHBIKE2");
	addVehOption("DEATHBIKE3", "DEATHBIKE3", "Voce Spawnou: ~b~DEATHBIKE3");
	addVehOption("DEVESTE", "DEVESTE", "Voce Spawnou: ~b~DEVESTE");
	addVehOption("DEVIANT", "DEVIANT", "Voce Spawnou: ~b~DEVIANT");
	addVehOption("DOMINATOR4", "DOMINATOR4", "Voce Spawnou: ~b~DOMINATOR4");
	addVehOption("DOMINATOR5", "DOMINATOR5", "Voce Spawnou: ~b~DOMINATOR5");
	addVehOption("DOMINATOR6", "DOMINATOR6", "Voce Spawnou: ~b~DOMINATOR6");
	addVehOption("IMPALER", "IMPALER", "Voce Spawnou: ~b~IMPALER");
	addVehOption("IMPALER2", "IMPALER2", "Voce Spawnou: ~b~IMPALER2");
	addVehOption("IMPALER3", "IMPALER3", "Voce Spawnou: ~b~IMPALER3");
	addVehOption("IMPALER4", "IMPALER4", "Voce Spawnou: ~b~IMPALER4");
	addVehOption("IMPERATOR", "IMPERATOR", "Voce Spawnou: ~b~IMPERATOR");
	addVehOption("IMPERATOR2", "IMPERATOR2", "Voce Spawnou: ~b~IMPERATOR2");
	addVehOption("IMPERATOR3", "IMPERATOR3", "Voce Spawnou: ~b~IMPERATOR3");
	addVehOption("ISSI4", "ISSI4", "Voce Spawnou: ~b~ISSI4");
	addVehOption("ISSI5", "ISSI5", "Voce Spawnou: ~b~ISSI5");
	addVehOption("ISSI6", "ISSI6", "Voce Spawnou: ~b~ISSI6");
	addVehOption("ITALIGTO", "ITALIGTO", "Voce Spawnou: ~b~ITALIGTO");
	addVehOption("MONSTER3", "MONSTER3", "Voce Spawnou: ~b~MONSTER3");
	addVehOption("MONSTER4", "MONSTER4", "Voce Spawnou: ~b~MONSTER4");
	addVehOption("MONSTER5", "MONSTER5", "Voce Spawnou: ~b~MONSTER5");
	addVehOption("RCBANDITO", "RCBANDITO", "Voce Spawnou: ~b~RCBANDITO");
	addVehOption("SCARAB", "SCARAB", "Voce Spawnou: ~b~SCARAB");
	addVehOption("SCARAB2", "SCARAB2", "Voce Spawnou: ~b~SCARAB2");
	addVehOption("SCARAB3", "SCARAB3", "Voce Spawnou: ~b~SCARAB3");
	addVehOption("SCHLAGEN", "SCHLAGEN", "Voce Spawnou: ~b~SCHLAGEN");
	addVehOption("SLAMVAN4", "SLAMVAN4", "Voce Spawnou: ~b~SLAMVAN4");
	addVehOption("SLAMVAN5", "SLAMVAN5", "Voce Spawnou: ~b~SLAMVAN5");
	addVehOption("SLAMVAN6", "SLAMVAN6", "Voce Spawnou: ~b~SLAMVAN6");
	addVehOption("TOROS", "TOROS", "Voce Spawnou: ~b~TOROS");
	addVehOption("TULIP", "TULIP", "Voce Spawnou: ~b~TULIP");
	addVehOption("VAMOS", "VAMOS", "Voce Spawnou: ~b~VAMOS");
	addVehOption("ZR380", "ZR380", "Voce Spawnou: ~b~ZR380");
	addVehOption("ZR3802", "ZR3802", "Voce Spawnou: ~b~ZR3802");
	addVehOption("ZR3803", "ZR3803", "Voce Spawnou: ~b~ZR3803");
	normalMenuActions();
}

void Novos2() // VEICULOS QUE N�O SPAWNARAM
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addVehOption("RIOT2", "RIOT2", "Voce Spawnou: ~b~RIOT2");
	addVehOption("HAVOK", "HAVOK", "Voce Spawnou: ~b~HAVOK");
	addVehOption("SEASPARROW", "SEASPARROW", "Voce Spawnou: ~b~SEASPARROW");
	addVehOption("SKYLIFT", "SKYLIFT", "Voce Spawnou: ~b~SKYLIFT");
	addVehOption("AKULA", "AKULA", "Voce Spawnou: ~b~AKULA");
	addVehOption("BARRAGE", "BARRAGE", "Voce Spawnou: ~b~BARRAGE");
	addVehOption("CHERNOBOG", "CHERNOBOG", "Voce Spawnou: ~b~CHERNOBOG");
	addVehOption("KHANJALI", "KHANJALI", "Voce Spawnou: ~b~KHANJALI");
	addVehOption("MINITANK", "MINITANK", "Voce Spawnou: ~b~MINITANK");
	addVehOption("SCARAB", "SCARAB", "Voce Spawnou: ~b~SCARAB");
	addVehOption("SCARAB2", "SCARAB2", "Voce Spawnou: ~b~SCARAB2");
	addVehOption("SCARAB3", "SCARAB3", "Voce Spawnou: ~b~SCARAB3");
	addVehOption("THRUSTER", "THRUSTER", "Voce Spawnou: ~b~THRUSTER");	
	addVehOption("CARACARA2", "CARACARA2", "Voce Spawnou: ~b~CARACARA2");
	addVehOption("DRAFTER", "DRAFTER", "Voce Spawnou: ~b~DRAFTER");
	addVehOption("DYNASTY", "DYNASTY", "Voce Spawnou: ~b~DYNASTY");
	addVehOption("EMERUS", "EMERUS", "Voce Spawnou: ~b~EMERUS");
	addVehOption("GAUNTLET3", "GAUNTLET3", "Voce Spawnou: ~b~GAUNTLET3");
	addVehOption("GAUNTLET4", "GAUNTLET4", "Voce Spawnou: ~b~GAUNTLET4");
	addVehOption("HELLION", "HELLION", "Voce Spawnou: ~b~HELLION");
	addVehOption("ISSI7", "ISSI7", "Voce Spawnou: ~b~ISSI7");
	addVehOption("JUGULAR", "JUGULAR", "Voce Spawnou: ~b~JUGULAR");
	addVehOption("KRIEGER", "KRIEGER", "Voce Spawnou: ~b~KRIEGER");
	addVehOption("LOCUST", "LOCUST", "Voce Spawnou: ~b~LOCUST");
	addVehOption("NEBULA", "NEBULA", "Voce Spawnou: ~b~NEBULA");
	addVehOption("NEO", "NEO", "Voce Spawnou: ~b~NEO");
	addVehOption("NOVAK", "NOVAK", "Voce Spawnou: ~b~NOVAK");
	addVehOption("PARAGON", "PARAGON", "Voce Spawnou: ~b~PARAGON");
	addVehOption("PARAGON2", "PARAGON2", "Voce Spawnou: ~b~PARAGON2");
	addVehOption("PEYOTE2", "PEYOTE2", "Voce Spawnou: ~b~PEYOTE2");
	addVehOption("RROCKET", "RROCKET", "Voce Spawnou: ~b~RROCKET");
	addVehOption("S80", "S80", "Voce Spawnou: ~b~S80");
	addVehOption("THRAX", "THRAX", "Voce Spawnou: ~b~THRAX");
	addVehOption("ZION3", "ZION3", "Voce Spawnou: ~b~ZION3");
	addVehOption("ZORRUSSO", "ZORRUSSO", "Voce Spawnou: ~b~ZORRUSSO");
	addVehOption("ASBO", "ASBO", "Voce Spawnou: ~b~ASBO");
	addVehOption("EVERON", "EVERON", "Voce Spawnou: ~b~EVERON");
	addVehOption("FORMULA", "FORMULA", "Voce Spawnou: ~b~FORMULA");
	addVehOption("FORMULA2", "FORMULA2", "Voce Spawnou: ~b~FORMULA2");
	addVehOption("FURIA", "FURIA", "Voce Spawnou: ~b~FURIA");
	addVehOption("IMORGON", "IMORGON", "Voce Spawnou: ~b~IMORGON");
	addVehOption("JB7002", "JB7002", "Voce Spawnou: ~b~JB7002");
	addVehOption("KANJO", "KANJO", "Voce Spawnou: ~b~KANJO");
	addVehOption("KOMODA", "KOMODA", "Voce Spawnou: ~b~KOMODA");
	addVehOption("MINITANK", "MINITANK", "Voce Spawnou: ~b~MINITANK");
	addVehOption("OUTLAW", "OUTLAW", "Voce Spawnou: ~b~OUTLAW");
	addVehOption("REBLA", "REBLA", "Voce Spawnou: ~b~REBLA");
	addVehOption("RETINUE2", "RETINUE2", "Voce Spawnou: ~b~RETINUE2");
	addVehOption("STRYDER", "STRYDER", "Voce Spawnou: ~b~STRYDER");
	addVehOption("SUGOI", "SUGOI", "Voce Spawnou: ~b~SUGOI");
	addVehOption("SULTAN2", "SULTAN2", "Voce Spawnou: ~b~SULTAN2");
	addVehOption("VAGRANT", "VAGRANT", "Voce Spawnou: ~b~VAGRANT");
	addVehOption("VSTR", "VSTR", "Voce Spawnou: ~b~VSTR");
	addVehOption("YOSEMITE2", "YOSEMITE2", "Voce Spawnou: ~b~YOSEMITE2");
	addVehOption("ZHABA", "ZHABA", "Voce Spawnou: ~b~ZHABA");
	addVehOption("CLUB", "CLUB", "Voce Spawnou: ~b~CLUB");
	addVehOption("COQUETTE4", "COQUETTE4", "Voce Spawnou: ~b~COQUETTE4");
	addVehOption("DUKES3", "DUKES3", "Voce Spawnou: ~b~DUKES3");
	addVehOption("GAUNTLET5", "GAUNTLET5", "Voce Spawnou: ~b~GAUNTLET5");
	addVehOption("GLENDALE2", "GLENDALE2", "Voce Spawnou: ~b~GLENDALE2");
	addVehOption("LANDSTALKER2", "LANDSTALKER2", "Voce Spawnou: ~b~LANDSTALKER2");
	addVehOption("MANANA2", "MANANA2", "Voce Spawnou: ~b~MANANA2");
	addVehOption("OPENWHEEL1", "OPENWHEEL1", "Voce Spawnou: ~b~OPENWHEEL1");
	addVehOption("OPENWHEEL2", "OPENWHEEL2", "Voce Spawnou: ~b~OPENWHEEL2");
	addVehOption("PENUMBRA2", "PENUMBRA2", "Voce Spawnou: ~b~PENUMBRA2");
	addVehOption("PEYOTE3", "PEYOTE3", "Voce Spawnou: ~b~PEYOTE3");
	addVehOption("SEMINOLE2", "SEMINOLE2", "Voce Spawnou: ~b~SEMINOLE2");
	addVehOption("TIGON", "TIGON", "Voce Spawnou: ~b~TIGON");
	addVehOption("YOSEMITE3", "YOSEMITE3", "Voce Spawnou: ~b~YOSEMITE3");
	addVehOption("YOUGA3", "YOUGA3", "Voce Spawnou: ~b~YOUGA3");
	addVehOption("ALKONOST", "ALKONOST", "Voce Spawnou: ~b~ALKONOST");
	addVehOption("ANNIHILATOR2", "ANNIHILATOR2", "Voce Spawnou: ~b~ANNIHILATOR2");
	addVehOption("AVISA", "AVISA", "Voce Spawnou: ~b~AVISA");
	addVehOption("BRIOSO2", "BRIOSO2", "Voce Spawnou: ~b~BRIOSO2");
	addVehOption("DINGHY5", "DINGHY5", "Voce Spawnou: ~b~DINGHY5");
	addVehOption("ITALIRSX", "ITALIRSX", "Voce Spawnou: ~b~ITALIRSX");
	addVehOption("KOSATKA", "KOSATKA", "Voce Spawnou: ~b~KOSATKA");
	addVehOption("KOSATKA", "KOSATKA", "Voce Spawnou: ~b~KOSATKA");
	addVehOption("LONGFIN", "LONGFIN", "Voce Spawnou: ~b~LONGFIN");
	addVehOption("MANCHEZ2", "MANCHEZ2", "Voce Spawnou: ~b~MANCHEZ2");
	addVehOption("PATROLBOAT", "PATROLBOAT", "Voce Spawnou: ~b~PATROLBOAT");
	addVehOption("SEASPARROW2", "SEASPARROW2", "Voce Spawnou: ~b~SEASPARROW2");
	addVehOption("SEASPARROW3", "SEASPARROW3", "Voce Spawnou: ~b~SEASPARROW3");
	addVehOption("SLAMTRUCK", "SLAMTRUCK", "Voce Spawnou: ~b~SLAMTRUCK");
	addVehOption("SQUADDIE", "SQUADDIE", "Voce Spawnou: ~b~SQUADDIE");
	addVehOption("TOREADOR", "TOREADOR", "Voce Spawnou: ~b~TOREADOR");
	addVehOption("VERUS", "VERUS", "Voce Spawnou: ~b~VERUS");
	addVehOption("VETIR", "VETIR", "Voce Spawnou: ~b~VETIR");
	addVehOption("VETO", "VETO", "Voce Spawnou: ~b~VETO");
	addVehOption("VETO2", "VETO2", "Voce Spawnou: ~b~VETO2");
	addVehOption("WEEVIL", "WEEVIL", "Voce Spawnou: ~b~WEEVIL");
	addVehOption("WINKY", "WINKY", "Voce Spawnou: ~b~WINKY");
	normalMenuActions();
}

// ************ FIM VEHICLES ************ //
// ************ INICIO TELEPORT ************ //

#pragma region Teleportation
void TPtoWaypoint()
{
	int WaypointHandle = UI::GET_FIRST_BLIP_INFO_ID(8);
	if (UI::DOES_BLIP_EXIST(WaypointHandle))
	{
		Vector3 WaypointPos = UI::GET_BLIP_COORDS(WaypointHandle);
		Ped Handle = PLAYER::PLAYER_PED_ID();
		if (PED::IS_PED_IN_ANY_VEHICLE(Handle, 0))
		Handle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		ENTITY::SET_ENTITY_COORDS(Handle, WaypointPos.x, WaypointPos.y, WaypointPos.z, 0, 0, 0, 1);
		WaypointPos.z += 30.0f;
		drawNotification("Teleportado ate a Marcacao");
	}
	else drawNotification("~r~Faca uma Marcacao");
}

void TeleportToClient(int Client)
{
	Vector3 Coords = ENTITY::GET_ENTITY_COORDS(Client, 1);
	if (PED::IS_PED_SITTING_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID()))
		ENTITY::SET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_USING(PLAYER::PLAYER_PED_ID()), Coords.x, Coords.y, Coords.z, 1, 0, 0, 1);
	else
		ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), Coords.x, Coords.y, Coords.z, 1, 0, 0, 1);
}

bool TeleportClientHook(int Client, float Coords, float y, float z)
{
	Ped handle = PLAYER::GET_PLAYER_PED(Client);
	if (PED::IS_PED_IN_ANY_VEHICLE(handle, 0))
	{
		handle = PED::GET_VEHICLE_PED_IS_IN(handle, 0);
		if (NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(handle))
		{
			ENTITY::SET_ENTITY_COORDS(handle, Coords, y, z, 0, 0, 0, 1);
			drawNotification("Teleportado !");
			return true;
		}
		return false;
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		return false;
	}
}

bool TeleportClientHook2(int Client, float Coords, float y, float z)
{
	Ped handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		if (NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(handle))
		{
			ENTITY::SET_ENTITY_COORDS(handle, Coords, y, z, 0, 0, 0, 1);
			drawNotification("Teleportado !");
			return true;
	    }
	    else
	    {
		drawNotification("~r~FAIL!");
		return false;
     	}
}

void RequestControl(Entity input)
{
	NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(input);

	int tick = 0;
	while (tick <= 50)
	{
		if (!NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(input))
			WAIT(0);
		else
			return;
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(input);
		tick++;
	}
}

#pragma region SIN COS TAN
#define PI (3.14159265359)

float DegreesToRadians(float Degrees)
{
	return (Degrees / 180.0f) * PI;
}

float Factorial(int Value)
{
	int Ret = 1;
	for (int i = Value; i > 0; i--)
		Ret = Ret * i;
	return Ret;
}

float myPow(float Value, int Pow)
{
	float Ret = 1;
	for (int i = 0; i < Pow; i++)
		Ret = Ret * Value;
	return Ret;
}

float mySin(float AnglesRad, int Accuracy)
{
	float i = AnglesRad; float Ret = 0;
	for (int j = 1; j <= Accuracy; j += 2)
	{
		if (!Minus)
			Ret += myPow(i, j) / Factorial(j);
		else
			Ret -= myPow(i, j) / Factorial(j);
		Minus = !Minus;
	}
	return Ret;
}

float myCos(float AnglesRad, int Accuracy)
{
	float Rad = (PI / 2) - AnglesRad;
	return mySin(Rad, Accuracy);
}

float myTan(float AnglesRad, int Accuracy)
{
	float sinus = mySin(AnglesRad, Accuracy);
	float cosinus = myCos(AnglesRad, Accuracy);
	return sinus / cosinus;
}
#pragma endregion

#pragma region TELEPORTING

Vector3 GET_COORDS_INFRONT(float Distance)
{
	float Tan = Distance * myTan(CAM::GET_GAMEPLAY_CAM_ROT(2).y, 20);
	Vector3 init = { 0, Distance, Distance * Tan };
	Vector3 Coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), init.x, init.y, init.z);
	return Coords;
}

void IPLMaps() // INTERIORES
{
	addTitle("IPL Control");
	addOption("North Yankton");
	addOption("Iate");
	addOption("Navio Militar");
	addOption("Navio Afundado");
	addOption("Hospital");
	addOption("Casa Incendiada");
	addOption("Life");
	addOption("Navio");
	addOption("Loja De Joias");
	addOption("Necroterio");
	addOption("Maze Bank Interior");
	addOption("UFO 1");
	addOption("UFO 2");

	if (getOption() == 1)
	{
		toggleIPL("prologue01", "", "");
		toggleIPL("Prologue01c", "", "");
		toggleIPL("Prologue01d", "", "");
		toggleIPL("Prologue01e", "", "");
		toggleIPL("Prologue01f", "", "");
		toggleIPL("Prologue01g", "", "");
		toggleIPL("prologue01h", "", "");
		toggleIPL("prologue01i", "", "");
		toggleIPL("prologue01j", "", "");
		toggleIPL("prologue01k", "", "");
		toggleIPL("prologue01z", "", "");
		toggleIPL("prologue02", "", "");
		toggleIPL("prologue03", "", "");
		toggleIPL("prologue03b", "", "");
		toggleIPL("prologue03_grv_cov", "", "");
		toggleIPL("prologue03_grv_dug", "", "");
		toggleIPL("prologue03_grv_fun", "", "");
		toggleIPL("prologue04", "", "");
		toggleIPL("prologue04b", "", "");
		toggleIPL("prologue04_cover", "", "");
		toggleIPL("prologue05", "", "");
		toggleIPL("prologue05b", "", "");
		toggleIPL("prologue06", "", "");
		toggleIPL("prologue06b", "", "");
		toggleIPL("prologue06_int", "", "");
		toggleIPL("prologuerd", "", "");
		toggleIPL("prologuerdb", "", "");
		toggleIPL("prologue_DistantLights", "", "");
		toggleIPL("prologue_grv_torch", "", "");
		toggleIPL("prologue_m2_door", "", "");
		toggleIPL("prologue_LODLights", "", "");
		toggleIPL("DES_ProTree_start", "", "");
		Vector3 Coords;
		Coords.x = 3595.39673f; Coords.y = -4893.727f; Coords.z = 115.838394f;
		ChangeCoords(Coords);
		toggleIPL("DES_ProTree_start_lod", "North Yankton: ~r~Deletado", "North Yankton: ~g~Spawnado", true);
	}
	if (getOption() == 2)
	{
		toggleIPL("smboat", "Iate: ~g~Spawnado", "Iate: ~r~Deletado", true);
		Vector3 Coords;
		Coords.x = -2045.8f; Coords.y = -1031.2f; Coords.z = 11.9f;
		ChangeCoords(Coords);
	}
	if (getOption() == 3)
	{
		if (STREAMING::IS_IPL_ACTIVE("hei_carrier"))
		{
			STREAMING::REMOVE_IPL("hei_carrier");
			STREAMING::REMOVE_IPL("hei_carrier_DistantLights");
			STREAMING::REMOVE_IPL("hei_Carrier_int1");
			STREAMING::REMOVE_IPL("hei_Carrier_int2");
			STREAMING::REMOVE_IPL("hei_Carrier_int3");
			STREAMING::REMOVE_IPL("hei_Carrier_int4");
			STREAMING::REMOVE_IPL("hei_Carrier_int5");
			STREAMING::REMOVE_IPL("hei_Carrier_int6");
			STREAMING::REMOVE_IPL("hei_carrier_LODLights");
			drawNotification("Base Militar: ~r~Deletada");
		}
		else
		{
			DLC2::_LOAD_MP_DLC_MAPS();
			STREAMING::REQUEST_IPL("hei_carrier");
			STREAMING::REQUEST_IPL("hei_carrier_DistantLights");
			STREAMING::REQUEST_IPL("hei_Carrier_int1");
			STREAMING::REQUEST_IPL("hei_Carrier_int2");
			STREAMING::REQUEST_IPL("hei_Carrier_int3");
			STREAMING::REQUEST_IPL("hei_Carrier_int4");
			STREAMING::REQUEST_IPL("hei_Carrier_int5");
			STREAMING::REQUEST_IPL("hei_Carrier_int6");
			STREAMING::REQUEST_IPL("hei_carrier_LODLights");
			Vector3 Coords;
			Coords.x = 3069.330f; Coords.y = -4632.4f; Coords.z = 15.043f;
			ChangeCoords(Coords);
			drawNotification("Base Militar: ~g~Spawnada");
		}
	}
	if (getOption() == 4)
	{
		if (STREAMING::IS_IPL_ACTIVE("sunkcargoship"))
		{
			STREAMING::REMOVE_IPL("sunkcargoship");
			drawNotification("Navio Afundado: ~r~Deletado");
		}
		else
		{
			STREAMING::REQUEST_IPL("sunkcargoship");
			Vector3 Coords;
			Coords.x = -162.8918f; Coords.y = -2365.769f; Coords.z = 0.0f;
			ChangeCoords(Coords);
			drawNotification("Navio Afundado: ~g~Spawnado");
		}
	}
	if (getOption() == 5)
	{
		if (isHospitalSpawned)
		{
			STREAMING::REQUEST_IPL("RC12B_Default");
			STREAMING::REQUEST_IPL("RC12B_Fixed");
			drawNotification("Hospital: ~r~Deletado");
			isHospitalSpawned = false;
		}
		else
		{
			STREAMING::REQUEST_IPL("RC12B_HospitalInterior");
			STREAMING::REQUEST_IPL("RC12B_Destroyed");
			Vector3 Coords;
			Coords.x = 356.8f; Coords.y = -590.1f; Coords.z = 43.3f;
			ChangeCoords(Coords);
			drawNotification("Hospital: ~g~Spawnado");
			isHospitalSpawned = true;
		}
	}
	if (getOption() == 6)
	{
		if (STREAMING::IS_IPL_ACTIVE("farm"))
		{
			STREAMING::REMOVE_IPL("farm");
			STREAMING::REMOVE_IPL("farm_props");
			STREAMING::REMOVE_IPL("farmint");
			STREAMING::REMOVE_IPL("farmint_cap");
			STREAMING::REQUEST_IPL("farm_burnt");
			STREAMING::REQUEST_IPL("farm_burnt_props");
			drawNotification("Casa Incendiada: ~g~Spawnada: Queimada");
		}
		else
		{
			STREAMING::REMOVE_IPL("farm_burnt");
			STREAMING::REMOVE_IPL("farm_burnt_props");
			STREAMING::REQUEST_IPL("farm");
			STREAMING::REQUEST_IPL("farm_props");
			STREAMING::REQUEST_IPL("farmint");
			STREAMING::REQUEST_IPL("farmint_cap");
			Vector3 Coords;
			Coords.x = 2441.2f; Coords.y = 4968.5f; Coords.z = 51.7f;
			ChangeCoords(Coords);
			drawNotification("Casa Incendiada: ~g~Spawnada: Normal");
		}
	}
	if (getOption() == 7)
	{
		char* IPLName = "facelobby";
		if (STREAMING::IS_IPL_ACTIVE(IPLName))
		{
			STREAMING::REMOVE_IPL(IPLName);
			STREAMING::REMOVE_IPL("facelobbyfake");
			drawNotification("LifeInvader: ~r~Deletada");
		}
		else
		{
			STREAMING::REQUEST_IPL(IPLName);
			STREAMING::REQUEST_IPL("facelobbyfake");
			Vector3 Coords;
			Coords.x = -1047.9f; Coords.y = -233.0f; Coords.z = 39.0f;
			ChangeCoords(Coords);
			drawNotification("LifeInvader: ~g~Spawnada");
		}
	}
	if (getOption() == 8)
	{
		char* IPLName = "cargoship";
		if (STREAMING::IS_IPL_ACTIVE(IPLName))
		{
			STREAMING::REMOVE_IPL(IPLName);
			drawNotification("Navio: ~r~Deletado");
		}
		else
		{
			STREAMING::REQUEST_IPL(IPLName);
			drawNotification("Navio: ~g~Spawnado");
			Vector3 Coords;
			Coords.x = -162.8918f; Coords.y = -2365.769f; Coords.z = 9.3192f;
			ChangeCoords(Coords);
		}
	}
	if (getOption() == 9)
	{
		char* IPLName = "jewel2fake";
		if (STREAMING::IS_IPL_ACTIVE(IPLName))
		{
			STREAMING::REMOVE_IPL(IPLName);
			STREAMING::REMOVE_IPL("post_hiest_unload");
			STREAMING::REMOVE_IPL("bh1_16_refurb");
			drawNotification("Loja De Joias: ~r~Deletada");
		}
		else
		{
			STREAMING::REQUEST_IPL(IPLName);
			STREAMING::REQUEST_IPL("post_hiest_unload");
			STREAMING::REQUEST_IPL("bh1_16_refurb");
			drawNotification("Loja De Joais: ~g~Spawnada");
			Vector3 Coords;
			Coords.x = -630.4f; Coords.y = -236.7f; Coords.z = 40.0f;
			ChangeCoords(Coords);
		}
	}
	if (getOption() == 10)
	{
		char* IPLName = "Coroner_Int_on";
		if (STREAMING::IS_IPL_ACTIVE(IPLName))
		{
			STREAMING::REMOVE_IPL(IPLName);
			drawNotification("Necroterio: ~r~Deletado");
		}
		else
		{
			STREAMING::REQUEST_IPL(IPLName);
			drawNotification("Necroterio: ~g~Spawnado");
			Vector3 Coords;
			Coords.x = 244.9f; Coords.y = -1374.7f; Coords.z = 39.5f;
			ChangeCoords(Coords);
		}
	}
	if (getOption() == 11)
	{
		if (STREAMING::IS_IPL_ACTIVE("ex_dt1_11_office_02b"))
		{
			STREAMING::REMOVE_IPL("ex_dt1_11_office_02b");
			drawNotification("Maze Bank Interior: ~r~Deletado");
		}
		else
		{
			DLC2::_LOAD_MP_DLC_MAPS();
			STREAMING::REQUEST_IPL("ex_dt1_11_office_02b");
			Vector3 Coords;
			Coords.x = -75.8466f; Coords.y = -826.9893f; Coords.z = 243.3859f;
			ChangeCoords(Coords);
			drawNotification("Maze Bank Interior: ~g~Spawnado");
		}
	}
	else if (getOption() == 12)
	{
		Vector3 Coords;
		Coords.x = -2051.99463; Coords.y = 3237.05835; Coords.z = 1456.97021;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~UFO 1");
	}
	else if (getOption() == 13)
	{
		Vector3 Coords;
		Coords.x = 2490.47729; Coords.y = 3774.84351; Coords.z = 2414.035;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~UFO 2");
	}
	normalMenuActions();
}

void TeleportMenu() // TELEPORT // MENU TELEPORT // TELEPORTES
{
	addTitle("Teleportes");
	addSubmenuOption("Lugares Personalizados ~r~>", 144);
	addOption("~p~Teleportar ate a marcacao");
	addOption("~y~2 passos a frente");
	addOption("Maze Bank");
	addOption("Mount Chilliad");
	addOption("Fort Zancundo");
	addOption("LS Customs");
	addOption("Mask Shop");
	addOption("Clothes Store");
	addOption("Ammunation");
	addOption("Outside Garage");
	addOption("Main Airport");
	addOption("Waterfall Hangout");
	addOption("Inside FIB Building");
	addOption("Humane Labs 1");
	addOption("Humane Labs 2");
	addOption("Inside Fort Tower");
	addOption("Vespucci House");
	addOption("Car Impound");
	addOption("Mors Mutual Impound");
	addOption("Sandy Shores Airfield");

	if (getOption() == 2)
	{
		TPtoWaypoint();
	}
	else if (getOption() == 3)
	{
		Vector3 Coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 2.0, 0.0);
		int Handle = PLAYER::PLAYER_PED_ID();
		if (PED::IS_PED_IN_ANY_VEHICLE(Handle, 0))
			Handle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		ENTITY::SET_ENTITY_COORDS_NO_OFFSET(Handle, Coords.x, Coords.y, Coords.z, 0, 0, 1);
		drawNotification("Teleportado: ~b~2 Metros A Frente");
	}
	else if (getOption() == 4)
	{
		Vector3 Coords;
		Coords.x = -74.94243f; Coords.y = -818.63446f; Coords.z = 326.174347f;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Maze Bank Helipad");
	}
	else if (getOption() == 5)
	{
		Vector3 Coords;
		Coords.x = 496.75f; Coords.y = 5591.17f; Coords.z = 795.03f;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Mount Chiliad");
	}
	else if (getOption() == 6)
	{
		Vector3 Coords;
		Coords.x = -2012.8470f; Coords.y = 2956.5270f; Coords.z = 32.8101f;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Fort Zancudo");
	}
	else if (getOption() == 7)
	{
		Vector3 Coords;
		Coords.x = -373.01; Coords.y = -124.91; Coords.z = 38.31;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Los Santos Customs");
	}
	else if (getOption() == 8)
	{
		Vector3 Coords;
		Coords.x = -1338.16; Coords.y = -1278.11; Coords.z = 4.87;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Mask Shop");
	}
	else if (getOption() == 9)
	{
		Vector3 Coords;
		Coords.x = -718.91; Coords.y = -158.16; Coords.z = 37.00;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Ponsonbys");
	}
	else if (getOption() == 10)
	{
		Vector3 Coords;
		Coords.x = 247.3652; Coords.y = -45.8777; Coords.z = 69.9411;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Ammunation");
	}
	else if (getOption() == 11)
	{
		Vector3 Coords;
		Coords.x = -795.46f; Coords.y = 308.89f; Coords.z = 85.71f;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Garage - Outside");
	}
	else if (getOption() == 12)
	{
		Vector3 Coords;
		Coords.x = -1102.2910f; Coords.y = -2894.5160f; Coords.z = 13.9467f;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Main Airport");
	}
	else if (getOption() == 13)
	{
		Vector3 Coords;
		Coords.x = -597.9525f; Coords.y = 4475.2910f; Coords.z = 25.6890f;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Waterfall Hangout");
	}
	else if (getOption() == 14)
	{
		Vector3 Coords;
		Coords.x = 135.5220f; Coords.y = -749.0003f; Coords.z = 260.0000f;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Inside FIB Building ");
	}
	else if (getOption() == 15)
	{
		Vector3 Coords;
		Coords.x = 3617.231f; Coords.y = 3739.871f; Coords.z = 28.6901f;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Humane Labs 1");
	}
	else if (getOption() == 16)
	{
		Vector3 Coords;
		Coords.x = 3531.703f; Coords.y = 3673.642f; Coords.z = 28.1212f;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Humane Labs 2");
	}
	else if (getOption() == 17)
	{
		Vector3 Coords;
		Coords.x = -2356.0940; Coords.y = 3248.645; Coords.z = 101.4505;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Inside Zancudo Tower ");
	}
	else if (getOption() == 18)
	{
		Vector3 Coords;
		Coords.x = -976.0147; Coords.y = -1003.843; Coords.z = 2.1502;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Vespucci House ");
	}
	else if (getOption() == 19)
	{
		Vector3 Coords;
		Coords.x = 391.4746; Coords.y = -1637.9750; Coords.z = 29.3153;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Car Impound");
	}
	else if (getOption() == 20)
	{
		Vector3 Coords;
		Coords.x = -222.1977; Coords.y = -1185.8500; Coords.z = 23.0294;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Mors Mutual Impound");
	}
	else if (getOption() == 21)
	{
		Vector3 Coords;
		Coords.x = 1741.4960; Coords.y = 3269.2570; Coords.z = 41.6014;
		ChangeCoords(Coords);
		drawNotification("Teleportado para: ~b~Sandy Shores Airfield");
	}
	normalMenuActions();
}
// ************ FIM TELEPORT ************ //
// ************ INICIO WEAPON - AMMU NATION ************ //

Hash* weap;
Hash *GetCurrentWeapon(int ped)
{
	WEAPON::GET_CURRENT_PED_WEAPON(ped, weap, true);
	return weap;
}

void GiveWeaponPed(int Ped, int WeaponHash)
{
	WEAPON::GIVE_WEAPON_TO_PED(Ped, WeaponHash, 250, 1, 1);

}

void WeaponSkins()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");

	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	normalMenuActions();
}

void SMG()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Scope");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Grip");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip SMG");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_smg_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_macro"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 13)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 14)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_smg"), 250, 1, 1);
	}
	normalMenuActions();
}

void MicroSMG()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Scope");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Micro SMG");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), GAMEPLAY::GET_HASH_KEY("component_microsmg_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_macro"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 13)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_microsmg"), 250, 1, 1);
	}
	normalMenuActions();
}

void AssaultSMG()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Scope");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Assault SMG");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultsmg"), GAMEPLAY::GET_HASH_KEY("component_assaultsmg_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultsmg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_macro"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultsmg"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultsmg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 13)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultsmg"), 250, 1, 1);
	}
	normalMenuActions();
}

void SubMachine()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Micro SMG ~r~>", 328);
	addSubmenuOption("SMG ~r~>", 329);
	addSubmenuOption("Assault SMG ~r~>", 330);
	normalMenuActions();
}

void PumpShotgun()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Pump Shotgun");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pumpshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pumpshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_sr_supp"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 11)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pumpshotgun"), 250, 1, 1);
	}
	normalMenuActions();
}

void AssaultShotgun()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Grip");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Assault Shotgun");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), GAMEPLAY::GET_HASH_KEY("component_assaultshotgun_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 13)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), 250, 1, 1);
	}
	normalMenuActions();
}

void BullpupShotgun()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Grip");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Bullpup Shotgun");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpupshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpupshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpupshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 12)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpupshotgun"), 250, 1, 1);
	}
	normalMenuActions();
}

void HeavyShotgun()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Grip");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Heavy Shotgun");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavyshotgun"), GAMEPLAY::GET_HASH_KEY("component_heavyshotgun_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavyshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavyshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultshotgun"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 13)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavyshotgun"), 250, 1, 1);
	}
	normalMenuActions();
}

void ShotGuns()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Pump Shotgun ~r~>", 324);
	addSubmenuOption("Assault Shotgun ~r~>", 325);
	addSubmenuOption("Bullpup Shotgun ~r~>", 326);
	addSubmenuOption("Heavy Shotgun ~r~>", 327);
	normalMenuActions();
}

void Pistol()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Extended Clip");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Pistol");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol"), GAMEPLAY::GET_HASH_KEY("component_pistol_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 12)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol"), 250, 1, 1);
	}
	normalMenuActions();
}

void CombatPistol()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Extended Clip");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Combat Pistol");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatpistol"), GAMEPLAY::GET_HASH_KEY("component_combatpistol_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatpistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatpistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 12)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatpistol"), 250, 1, 1);
	}
	normalMenuActions();
}

void ApPistol()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Extended Clip");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip AP Pistol");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_appistol"), GAMEPLAY::GET_HASH_KEY("component_appistol_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_appistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_appistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 12)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_appistol"), 250, 1, 1);
	}
	normalMenuActions();
}

void VintagePistol()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Extended Clip");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Vintage Pistol");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_vintagepistol"), GAMEPLAY::GET_HASH_KEY("component_vintagepistol_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_vintagepistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 11)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_vintagepistol"), 250, 1, 1);
	}
	normalMenuActions();
}

void Pistol50cal()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Extended Clip");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip 50cal Pistol");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol50"), GAMEPLAY::GET_HASH_KEY("component_pistol50_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol50"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol50"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 12)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_pistol50"), 250, 1, 1);
	}
	normalMenuActions();
}

void SNSPistol()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Extended Clip");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip SNS Pistol");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_snspistol"), GAMEPLAY::GET_HASH_KEY("component_snspistol_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 10)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_snspistol"), 250, 1, 1);
	}
	normalMenuActions();
}

void HeavyPistol()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Extended Clip");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Heavy Pistol");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavypistol"), GAMEPLAY::GET_HASH_KEY("component_heavypistol_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavypistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_flsh"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavypistol"), GAMEPLAY::GET_HASH_KEY("component_at_pi_supp"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 12)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavypistol"), 250, 1, 1);
	}
	normalMenuActions();
}

void Pistols()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Pistol 9mm. ~r~>", 317);
	addSubmenuOption("Combat Pistol ~r~>", 318);
	addSubmenuOption("AP Pistol ~r~>", 319);
	addSubmenuOption("Vintage Pistol ~r~>", 320);
	addSubmenuOption("Pistol 50cal. ~r~>", 321);
	addSubmenuOption("SNS Pistol ~r~>", 322);
	addSubmenuOption("Heavy Pistol ~r~>", 323);
	addOption("Taser");

	if (getOption() == 8)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x3656C8C1, 1, 1, 1);
	}
	normalMenuActions();
}

void GusenbergRifle()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Extended Clip");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Gusenberg Sweeper");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_gusenberg"), GAMEPLAY::GET_HASH_KEY("component_gusenberg_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 10)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_gusenberg"), 250, 1, 1);
	}
	normalMenuActions();
}

void AssaultRifle()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Scope");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Grip");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Assault Rifle");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_assaultrifle_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_macro"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 13)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 14)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_assaultrifle"), 250, 1, 1);
	}
	normalMenuActions();
}

void CarbineRifle()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Rail Cover");
	addOption("Scope");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Grip");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Carbine Rifle");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_carbinerifle_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_railcover_01"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_medium"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 13)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 14)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 15)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_carbinerifle"), 250, 1, 1);
	}
	normalMenuActions();
}

void AdvancedRifle()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Scope");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Advanced Rifle");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), GAMEPLAY::GET_HASH_KEY("component_advancedrifle_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_small"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 13)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_advancedrifle"), 250, 1, 1);
	}
	normalMenuActions();
}

void MG()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Clip");
	addOption("Scope");
	addOption("Grip");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip LMG MG");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_mg"), GAMEPLAY::GET_HASH_KEY("component_mg_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_mg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_small"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_mg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 12)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_mg"), 250, 1, 1);
	}
	normalMenuActions();
}

void CombatMG()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	Hash WeapHash;
	addOption("Clip");
	addOption("Scope");
	addOption("Grip");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Combat MG");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatmg"), GAMEPLAY::GET_HASH_KEY("component_combatmg_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatmg"), GAMEPLAY::GET_HASH_KEY("component_at_scope_medium"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatmg"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 12)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_combatmg"), 250, 1, 1);
	}
	normalMenuActions();
}

void SpecialCarbine()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Rail Cover");
	addOption("Scope");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Grip");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Special Carbine");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_specialcarbine_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_railcover_01"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_scope_medium"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 13)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 14)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 15)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_specialcarbine"), 250, 1, 1);
	}
	normalMenuActions();
}

void BullpupRifle()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Rail Cover");
	addOption("Scope");
	addOption("Flashlight");
	addOption("Suppressor");
	addOption("Grip");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Bullpup Rifle");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_bullpuprifle_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_railcover_01"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_medium"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 13)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 14)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 15)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_bullpuprifle"), 250, 1, 1);
	}
	normalMenuActions();
}

void Rifles()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Gusenberg ~r~>", 309);
	addSubmenuOption("Assault Rifle ~r~>", 310);
	addSubmenuOption("Carbine Rifle ~r~>", 311);
	addSubmenuOption("Advanced Rifle ~r~>", 312);
	addSubmenuOption("LMG MG ~r~>", 313);
	addSubmenuOption("LMG Combat MG ~r~>", 314);
	addSubmenuOption("Special Carbine ~r~>", 315);
	addSubmenuOption("Bullpup Rifle ~r~>", 316);
	normalMenuActions();
}

void Sniper()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Scope");
	addOption("Supressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Sniper Rifle");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_sniperrifle"), GAMEPLAY::GET_HASH_KEY("component_at_scope_max"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_sniperrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp_02"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 13)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_sniperrifle"), 250, 1, 1);
	}
	normalMenuActions();
}

void HeavySniper()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Scope");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Heavy Rifle");


	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavysniper"), GAMEPLAY::GET_HASH_KEY("component_at_scope_max"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 10)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_heavysniper"), 250, 1, 1);
	}
	normalMenuActions();
}

void MarksmanRifle()
{
	Hash WeapHash;
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Extended Clip");
	addOption("Rail Cover");
	addOption("Grip");
	addOption("Flashlight");
	addOption("Supressor");
	addOption("Normal");
	addOption("Green");
	addOption("Gold");
	addOption("Pink");
	addOption("Army");
	addOption("LSPD");
	addOption("Orange");
	addOption("Platinum");
	addOption("Equip Marksman Rifle");
	addOption("Equip Marksman Rifle Mk II");

	if (getOption() == 1)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_marksmanrifle_clip_02"));
	}
	else if (getOption() == 2)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_at_railcover_01"));
	}
	else if (getOption() == 3)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_afgrip"));
	}
	else if (getOption() == 4)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_flsh"));
	}
	else if (getOption() == 5)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::GIVE_WEAPON_COMPONENT_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), GAMEPLAY::GET_HASH_KEY("component_at_ar_supp"));
	}
	else if (getOption() == 6)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 0);
	}
	else if (getOption() == 7)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 1);
	}
	else if (getOption() == 8)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 2);
	}
	else if (getOption() == 9)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 3);
	}
	else if (getOption() == 10)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 4);
	}
	else if (getOption() == 11)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 5);
	}
	else if (getOption() == 12)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 6);
	}
	else if (getOption() == 13)
	{
		WEAPON::GET_CURRENT_PED_WEAPON(PLAYER::PLAYER_PED_ID(), &WeapHash, false);
		WEAPON::SET_PED_WEAPON_TINT_INDEX(PLAYER::PLAYER_PED_ID(), WeapHash, 7);
	}
	else if (getOption() == 14)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), GAMEPLAY::GET_HASH_KEY("weapon_marksmanrifle"), 250, 1, 1);
	}
	else if (getOption() == 15)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x6A6C02E0, 250, 1, 1);
	}
	normalMenuActions();
}

void SniperRifles()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Sniper Rifle ~r~>", 306);
	addSubmenuOption("Heavy Sniper ~r~>", 307);
	addSubmenuOption("Marksman Rifle ~r~>", 308);
	normalMenuActions();
}

void Ammunation()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Weapon Tints ~r~>", 300);
	addSubmenuOption("Pistols ~r~>", 301);
	addSubmenuOption("Submachine Guns ~r~>", 302);
	addSubmenuOption("Shotguns ~r~>", 303);
	addSubmenuOption("Rifles ~r~>", 304);
	addSubmenuOption("Sniper Rifles ~r~>", 305);
	addSubmenuOption("Armas Pesadas ~r~>", 331);
    normalMenuActions();
}

void ArmasPesadas()
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Firework Launcher");
	addOption("RPG");
	addOption("Homing Launcher");
	addOption("Grenade Launcher");
	addOption("Smoke Launcher");
	addOption("Minigun");
	addOption("Compact Grenade Launcher");
	addOption("Up-n-Atomizer");
	addOption("Unholy Hellbringer");
	addOption("Railgun");
	addOption("Widowmaker");

	if (getOption() == 1)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x7F7497E5, 250, 1, 1);
	}
	if (getOption() == 2)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xB1CA77B1, 250, 1, 1);
	}
	if (getOption() == 3)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x63AB0442, 250, 1, 1);
	}
	if (getOption() == 4)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xA284510B, 250, 1, 1);
	}
	if (getOption() == 5)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x4DD2DC56, 250, 1, 1);
	}
	if (getOption() == 6)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x42BF8A85, 250, 1, 1);
	}
	if (getOption() == 7)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x0781FE4A, 250, 1, 1);
	}
	if (getOption() == 8)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xAF3696A1, 250, 1, 1);
	}
	if (getOption() == 9)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x476BF155, 250, 1, 1);
	}
	if (getOption() == 10)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x6D544C99, 1, 1, 1);
	}
	if (getOption() == 11)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xB62D1F67, 1, 1, 1);
	}
	normalMenuActions();
}

// ************ FIM WEAPON - AMMU NATION ************ //
void GiveWeapons()
{
	uint Weapons[] = { 0x92A27487 , 0x958A4A8F , 0xF9E6AA4B , 0x84BD7BFD, 0x8BB05FD7 , 0x440E4788, 0x4E875F73, 0xF9DCBF2D, 0xD8DF3C3C, 0x99B507EA, 0xDD5DF8D9, 0xDFE37640, 0x678B81B1, 0x19044EE0, 0xCD274149, 0x94117305, 0x3813FC08, 0x1B06D571, 0xBFE256D4, 0x5EF9FEC4, 0x22D8FE39, 0x3656C8C1, 0x99AEEB3B, 0xBFD21232, 0x88374054, 0xD205520E, 0x83839C4, 0x47757124, 0xDC4DB296, 0xC1B3C3D1, 0xCB96392F, 0x97EA20B8 , 0xAF3696A1, 0x2B5EF5EC, 0x917F6C8C, 0x57A4368C, 0x13532244, 0x2BE6766B, 0x78A97CD0, 0xEFE7E2DF, 0x0A3D4D34, 0xDB1AA450, 0xBD248B55, 0x476BF155, 0x1D073A89, 0x555AF99A, 0x7846A318, 0xE284C527, 0x9D61E50F, 0xA89CB99E, 0x3AABBBAA, 0xEF951FBB, 0x12E82D3D, 0x5A96BA4, 0xBFEFFF6D, 0x394F415C, 0x83BF0278, 0xFAD1F1C9, 0xAF113F99, 0xC0A3098D, 0x969C3D67, 0x7F229F94, 0x84D6FAFD, 0x624FE830, 0x9D1F17E6, 0x9D07F764, 0x7FD62962, 0xDBBD7280, 0x61012683, 0x05FC3C11, 0x0C472FE2, 0xA914799, 0xC734385A, 0x6A6C02E0, 0xB1CA77B1, 0xA284510B, 0x4DD2DC56, 0x42BF8A85, 0x7F7497E5, 0x6D544C99, 0x63AB0442, 0x0781FE4A, 0xB62D1F67, 0x93E220BD, 0xA0973D5E, 0x24B17070, 0x2C3731D9, 0xAB564B93, 0x787F0BB, 0xBA45E8B8, 0x23C9F95C, 0xFDBC8A50, 0x497FACC3, 0x34A67B97, 0xFBAB5776, 0x060EC506, 0xBA536372 };
	for (int i = 0; i < (sizeof(Weapons) / 4); i++)
		WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), Weapons[i], 250, false); // false = N�o equipar
}

void RemoverArmas()
{
	{
		WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::PLAYER_PED_ID(), true);
	}
}

bool Ammo = false;
void InfAmmo()
{
	Ammo = !Ammo;
	if (!Ammo == false)
	{
		WEAPON::SET_PED_INFINITE_AMMO_CLIP(PLAYER::PLAYER_ID(), true);
		drawNotification("Municao infinita: ~b~Ativado");
	}
	else
	{
		WEAPON::SET_PED_INFINITE_AMMO_CLIP(PLAYER::PLAYER_ID(), false);
		drawNotification("Municao infinita: ~r~Desativado");
	}
}

bool UmTiro = false;
void umtiro()
{
	UmTiro = !UmTiro;
	if (!UmTiro)
	{
		PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(PLAYER::PLAYER_ID(), 1.0);
		drawNotification("Matar Com 1 Tiro: ~r~Desativado");
	}
	else
	{
		PLAYER::SET_PLAYER_WEAPON_DAMAGE_MODIFIER(PLAYER::PLAYER_ID(), 100000.0);
		drawNotification("Matar Com 1 Tiro: ~b~Ativado");
	}
}

bool NightVision = false;
void NV()
{
	NightVision = !NightVision;
	if (!NightVision)
	{
		GRAPHICS::SET_NIGHTVISION(false);
		drawNotification("Visao Noturna: ~r~Desativado");
	}
	else
	{
		GRAPHICS::SET_NIGHTVISION(true);
		drawNotification("Visao Noturna: ~b~Ativado");
	}
}

bool Thermal = false;
void TV()
{
	Thermal = !Thermal;
	if (!Thermal)
	{
		GRAPHICS::SET_SEETHROUGH(false);
		drawNotification("Thermal: ~r~Desativado");
	}
	else
	{
		GRAPHICS::SET_SEETHROUGH(true);
		drawNotification("Thermal: ~b~Ativado");
	}
}

// ************ INICIO WEAPON ************ //

void WeaponEditor() // WEAPON // MENU WEAPON // LOJA AMMUNATION
{
	DRAW_TEXTURE("shopui_title_gunclub", "shopui_title_gunclub", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Loja Ammunation ~r~>", 299);
	addOption("Pegar Todas as Armas");
	addOption("Deletar Armas");
	addOption("Obter Municoes");
	addBoolOption("Municao Infinita", Ammo);
	addBoolOption("Matar com 1 Tiro", UmTiro);
	addBoolOption("Night Vision", NightVision);
	addBoolOption("Thermal", Thermal);

	if (getOption() == 2)
	{
		GiveWeapons();
	}
	if (getOption() == 3)
	{
		RemoverArmas();
	}
	if (getOption() == 4)
	{
		uint Weapons[] = { 0x92A27487 , 0x958A4A8F , 0xF9E6AA4B , 0x84BD7BFD, 0x8BB05FD7 , 0x440E4788, 0x4E875F73, 0xF9DCBF2D, 0xD8DF3C3C, 0x99B507EA, 0xDD5DF8D9, 0xDFE37640, 0x678B81B1, 0x19044EE0, 0xCD274149, 0x94117305, 0x3813FC08, 0x1B06D571, 0xBFE256D4, 0x5EF9FEC4, 0x22D8FE39, 0x3656C8C1, 0x99AEEB3B, 0xBFD21232, 0x88374054, 0xD205520E, 0x83839C4, 0x47757124, 0xDC4DB296, 0xC1B3C3D1, 0xCB96392F, 0x97EA20B8 , 0xAF3696A1, 0x2B5EF5EC, 0x917F6C8C, 0x57A4368C, 0x13532244, 0x2BE6766B, 0x78A97CD0, 0xEFE7E2DF, 0x0A3D4D34, 0xDB1AA450, 0xBD248B55, 0x476BF155, 0x1D073A89, 0x555AF99A, 0x7846A318, 0xE284C527, 0x9D61E50F, 0xA89CB99E, 0x3AABBBAA, 0xEF951FBB, 0x12E82D3D, 0x5A96BA4, 0xBFEFFF6D, 0x394F415C, 0x83BF0278, 0xFAD1F1C9, 0xAF113F99, 0xC0A3098D, 0x969C3D67, 0x7F229F94, 0x84D6FAFD, 0x624FE830, 0x9D1F17E6, 0x9D07F764, 0x7FD62962, 0xDBBD7280, 0x61012683, 0x05FC3C11, 0x0C472FE2, 0xA914799, 0xC734385A, 0x6A6C02E0, 0xB1CA77B1, 0xA284510B, 0x4DD2DC56, 0x42BF8A85, 0x7F7497E5, 0x6D544C99, 0x63AB0442, 0x0781FE4A, 0xB62D1F67, 0x93E220BD, 0xA0973D5E, 0x24B17070, 0x2C3731D9, 0xAB564B93, 0x787F0BB, 0xBA45E8B8, 0x23C9F95C, 0xFDBC8A50, 0x497FACC3, 0x34A67B97, 0xFBAB5776, 0x060EC506, 0xBA536372 };
		for (int i = 0; i < (sizeof(Weapons) / 4); i++)
			WEAPON::SET_PED_AMMO(PLAYER::PLAYER_PED_ID(), Weapons[i], 250);
	}
	if (getOption() == 5)
	{
		InfAmmo();
	}
	if (getOption() == 6)
	{
		umtiro();
	}
	if (getOption() == 7)
	{
		NV();
	}
	if (getOption() == 8)
	{
		TV();
	}
	normalMenuActions();
}

// ************ FIM WEAPON ************ //

#pragma endregion
#pragma region Models+Outfits
void ResetAppearance()
{
	PED::CLEAR_ALL_PED_PROPS(PLAYER::PLAYER_PED_ID());
	PED::CLEAR_PED_DECORATIONS(PLAYER::PLAYER_PED_ID());
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 0, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 1, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 2, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 3, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 4, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 5, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 6, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 7, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 8, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 9, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 10, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 11, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 12, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 13, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 14, 0, 0, 0);
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 15, 0, 0, 0);
}

bool
SetModelOption(char* Model)
{
	if (STREAMING::IS_MODEL_IN_CDIMAGE(GAMEPLAY::GET_HASH_KEY(Model)))
	{
		if (STREAMING::IS_MODEL_VALID(GAMEPLAY::GET_HASH_KEY(Model)))
		{
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(Model));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(Model)))
			{
				PLAYER::SET_PLAYER_MODEL(PLAYER::PLAYER_ID(), GAMEPLAY::GET_HASH_KEY(Model));
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY(Model));
				return true;
			}
			else
			return false;
		}
	}
};

int fam;
int Face_ = 0;
int Glasses_ = 0;
int Ears_ = 0;
int Mask_ = 0;
int Hair_ = 0;
int Torso_ = 0;
int Legs_ = 0;
int Hands_ = 0;
int Shoes_ = 0;
int Watches_ = 0;
int Special1_ = 0;
int Special2_ = 0;
int Special3_ = 0;
int Texture_ = 0;
int Torso2_ = 0;

void changeAppearance(char* family, int model, int texture)
{
	if (cstrcmp(family, "HATS") || cstrcmp(family, "GLASSES") || cstrcmp(family, "EARS"))
	{
		if (cstrcmp(family, "HATS"))
			fam = 0;
		else if (cstrcmp(family, "GLASSES"))
			fam = 1;
		else if (cstrcmp(family, "EARS"))
			fam = 2;
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), fam, model - 1, texture, 1);
	}
	else
	{
		if (cstrcmp(family, "FACE"))
			fam = 0;
		else if (cstrcmp(family, "MASK"))
			fam = 1;
		else if (cstrcmp(family, "HAIR"))
			fam = 2;
		else if (cstrcmp(family, "TORSO"))
			fam = 3;
		else if (cstrcmp(family, "LEGS"))
			fam = 4;
		else if (cstrcmp(family, "HANDS"))
			fam = 5;
		else if (cstrcmp(family, "SHOES"))
			fam = 6;
		else if (cstrcmp(family, "SPECIAL1"))
			fam = 7;
		else if (cstrcmp(family, "SPECIAL2"))
			fam = 8;
		else if (cstrcmp(family, "SPECIAL3"))
			fam = 9;
		else if (cstrcmp(family, "TEXTURE"))
			fam = 10;
		else if (cstrcmp(family, "TORSO2"))
			fam = 11;
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), fam, model, texture, 0);
	}
}

int hattex = 0;
int glasstex = 0;
int eartex = 0;
int torsotex = 0;
int legtex = 0;
int handtex = 0;
int watchtex = 0;
int special1tex = 0;
int special2tex = 0;
int special3tex = 0;
int torso2tex = 0;
int mask = 0;
int masktex = 0;
int shoes = 0;
int shoetex = 0;

void title() { DRAW_TEXTURE("shopui_title_highendfashion", "shopui_title_highendfashion", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255); }

void hats() 
{
	title(); addIntOption("Hats", &Face_, 0, 55); addIntOption("Hat Textures", &hattex, 0, 10);
	if (getOptionint() == 1)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 0, Face_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 0, Face_, hattex, 1);
	}
	normalMenuActions();
}

void masks()
{
	title(); addIntOption("Masks", &mask, 0, 55); addIntOption("Mask Textures", &masktex, 0, 10);
	if (getOptionint() == 1)
	{
		changeAppearance("MASK", mask, 0);
	}
	if (getOptionint() == 2)
	{
		changeAppearance("MASK", mask, masktex);
	}
	normalMenuActions();
}

void glasses() 
{
	title(); addIntOption("Glasses", &Glasses_, 0, 23); addIntOption("Glasses Textures", &glasstex, 0, 10);
	if (getOptionint() == 1)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 1, Glasses_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 1, Glasses_, glasstex, 1);
	}
	normalMenuActions();
}

void ears()
{
	title(); addIntOption("Ears", &Ears_, 0, 3); addIntOption("Ear Textures", &eartex, 0, 10);
	if (getOptionint() == 1)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 2, Ears_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 2, Ears_, eartex, 1);
	}
	normalMenuActions();
}

void torso()
{
	title(); addIntOption("Torso", &Torso_, 0, 50); addIntOption("Torso Textures", &torsotex, 0, 10);
	if (getOptionint() == 1)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 3, Torso_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 3, Torso_, torsotex, 1);
	}
	normalMenuActions();
}

void legs()
{
	title(); addIntOption("Legs", &Legs_, 0, 50); addIntOption("Leg Textures", &legtex, 0, 10);	if (getOptionint() == 1)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 4, Legs_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 4, Legs_, legtex, 1);
	}
	normalMenuActions();
}

void hands() 
{
	title(); 	addIntOption("Hands", &Hands_, 0, 50); addIntOption("Hand Textures", &handtex, 0, 10);	if (getOptionint() == 1)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 5, Hands_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 5, Hands_, handtex, 1);
	}
	normalMenuActions();
}

void watches() 
{
	title(); addIntOption("Watches", &Watches_, 0, 50); addIntOption("Watch Textures", &watchtex, 0, 10);	if (getOptionint() == 1)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 6, Watches_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 6, Watches_, watchtex, 1);
	}
	normalMenuActions();
}

void special1() 
{
	title(); addIntOption("Special1", &Special1_, 0, 50); addIntOption("Special1 Textures", &special1tex, 0, 10);	if (getOptionint() == 1)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 7, Special1_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 7, Special1_, special1tex, 1);
	}
	normalMenuActions();
}

void special2() 
{
	title(); addIntOption("Special2", &Special2_, 0, 50); addIntOption("Special2 Textures", &special2tex, 0, 10);	if (getOptionint() == 1)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 8, Special2_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 8, Special2_, special2tex, 1);
	}
	normalMenuActions();
}

void special3() 
{
	title(); addIntOption("Special3", &Special3_, 0, 100); addIntOption("Special3 Textures", &special3tex, 0, 10);	if (getOptionint() == 1)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 9, Special3_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 9, Special3_, special3tex, 1);
	}
	normalMenuActions();
}

void torso2()
{
	title(); addIntOption("Torso2", &Torso2_, 0, 100); addIntOption("Torso2 Textures", &torso2tex, 0, 10);	if (getOptionint() == 1)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 11, Torso2_, 0, 1);
	}
	if (getOptionint() == 2)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 11, Torso2_, torso2tex, 1);
	}
	normalMenuActions();
}

void shoe()
{
	title(); 	addIntOption("Shoes", &shoes, 0, 50); addIntOption("Shoe Textures", &shoetex, 0, 10);	if (getOptionint() == 1)
	{
		changeAppearance("SHOES", shoes, 0);
	}
	if (getOptionint() == 2)
	{
		changeAppearance("SHOES", shoes, shoetex);
	}
	normalMenuActions();
}

void ComponentChanger()
{
	DRAW_TEXTURE("shopui_title_highendfashion", "shopui_title_highendfashion", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addIntOption("Hats", &Face_, 0, 55);
	addIntOption("Glasses", &Glasses_, 0, 23);
	addIntOption("Ears", &Ears_, 0, 3);
	addIntOption("Torso", &Torso_, 0, 50);
	addIntOption("Legs", &Legs_, 0, 50);
	addIntOption("Hands", &Hands_, 0, 50);
	addIntOption("Watches", &Watches_, 0, 50);
	addIntOption("Special1", &Special1_, 0, 50);
	addIntOption("Special2", &Special2_, 0, 50);
	addIntOption("Special3", &Special3_, 0, 50);
	addIntOption("Texture", &Texture_, 0, 50);
	addIntOption("Torso2", &Torso2_, 0, 50);
	addIntOption("Hats", &Mask_, 0, 55);

	if (getOption() == 1)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 0, Face_, 0, 1);
	}
	if (getOption() == 2)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 1, Glasses_, 0, 1);
	}
	if (getOption() == 3)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 2, Ears_, 0, 1);
	}
	if (getOption() == 4)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 3, Torso_, 0, 1);
	}
	if (getOption() == 5)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 4, Legs_, 0, 1);
	}
	if (getOption() == 6)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 5, Hands_, 0, 1);
	}
	if (getOption() == 7)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 6, Watches_, 0, 1);
	}
	if (getOption() == 8)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 7, Special1_, 0, 1);
	}
	if (getOption() == 9)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 8, Special2_, 0, 1);
	}
	if (getOption() == 10)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 9, Special3_, 0, 1);
	}
	if (getOption() == 11)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 10, Texture_, 0, 1);
	}
	if (getOption() == 12)
	{
		PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 11, Torso2_, 0, 1);
	}
	if (getOption() == 13)
	{
		PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 12, Mask_, 0, 1);
	}
	normalMenuActions();
}

void addModelOption(char* option, char* model, char *notification)
{
	addOption(option);
	if (currentOption == optionCount && optionPress)
	{
		ModelString = model;
		LoadingPed = true;
		isMainCharacter = true;
		drawNotification(notification);
	}
}

namespace AllModels
{
	void All()
	{
		addTitle("Lista De Skins");
		addModelOption("a_f_m_beach_01", "a_f_m_beach_01", "Alterado Para: a_f_m_beach_01");
		addModelOption("a_f_m_bevhills_01", "a_f_m_bevhills_01", "Alterado Para: a_f_m_bevhills_01");
		addModelOption("a_f_m_bevhills_02", "a_f_m_bevhills_02", "Alterado Para: a_f_m_bevhills_02");
		addModelOption("a_f_m_bodybuild_01", "a_f_m_bodybuild_01", "Alterado Para: a_f_m_bodybuild_01");
		addModelOption("a_f_m_business_02", "a_f_m_business_02", "Alterado Para: a_f_m_business_02");
		addModelOption("a_f_m_downtown_01", "a_f_m_downtown_01", "Alterado Para: a_f_m_downtown_01");
		addModelOption("a_f_m_eastsa_01", "a_f_m_eastsa_01", "Alterado Para: a_f_m_eastsa_01");
		addModelOption("a_f_m_eastsa_02", "a_f_m_eastsa_02", "Alterado Para: a_f_m_eastsa_02");
		addModelOption("a_f_m_fatbla_01", "a_f_m_fatbla_01", "Alterado Para: a_f_m_fatbla_01");
		addModelOption("a_f_m_fatcult_01", "a_f_m_fatcult_01", "Alterado Para: a_f_m_fatcult_01");
		addModelOption("a_f_m_fatwhite_01", "a_f_m_fatwhite_01", "Alterado Para: a_f_m_fatwhite_01");
		addModelOption("a_f_m_ktown_01", "a_f_m_ktown_01", "Alterado Para: a_f_m_ktown_01");
		addModelOption("a_f_m_ktown_02", "a_f_m_ktown_02", "Alterado Para: a_f_m_ktown_02");
		addModelOption("a_f_m_prolhost_01", "a_f_m_prolhost_01", "Alterado Para: a_f_m_prolhost_01");
		addModelOption("a_f_m_salton_01", "a_f_m_salton_01", "Alterado Para: a_f_m_salton_01");
		addModelOption("a_f_m_skidrow_01", "a_f_m_skidrow_01", "Alterado Para: a_f_m_skidrow_01");
		addModelOption("a_f_m_soucent_01", "a_f_m_soucent_01", "Alterado Para: a_f_m_soucent_01");
		addModelOption("a_f_m_soucent_02", "a_f_m_soucent_02", "Alterado Para: a_f_m_soucent_02");
		addModelOption("a_f_m_soucentmc_01", "a_f_m_soucentmc_01", "Alterado Para: a_f_m_soucentmc_01");
		addModelOption("a_f_m_tourist_01", "a_f_m_tourist_01", "Alterado Para: a_f_m_tourist_01");
		addModelOption("a_f_m_tramp_01", "a_f_m_tramp_01", "Alterado Para: a_f_m_tramp_01");
		addModelOption("a_f_m_trampbeac_01", "a_f_m_trampbeac_01", "Alterado Para: a_f_m_trampbeac_01");
		addModelOption("a_f_o_genstreet_01", "a_f_o_genstreet_01", "Alterado Para: a_f_o_genstreet_01");
		addModelOption("a_f_o_indian_01", "a_f_o_indian_01", "Alterado Para: a_f_o_indian_01");
		addModelOption("a_f_o_ktown_01", "a_f_o_ktown_01", "Alterado Para: a_f_o_ktown_01");
		addModelOption("a_f_o_salton_01", "a_f_o_salton_01", "Alterado Para: a_f_o_salton_01");
		addModelOption("a_f_o_soucent_01", "a_f_o_soucent_01", "Alterado Para: a_f_o_soucent_01");
		addModelOption("a_f_o_soucent_02", "a_f_o_soucent_02", "Alterado Para: a_f_o_soucent_02");
		addModelOption("a_f_y_beach_01", "a_f_y_beach_01", "Alterado Para: a_f_y_beach_01");
		addModelOption("a_f_y_bevhills_01", "a_f_y_bevhills_01", "Alterado Para: a_f_y_bevhills_01");
		addModelOption("a_f_y_bevhills_02", "a_f_y_bevhills_02", "Alterado Para: a_f_y_bevhills_02");
		addModelOption("a_f_y_bevhills_03", "a_f_y_bevhills_03", "Alterado Para: a_f_y_bevhills_03");
		addModelOption("a_f_y_bevhills_04", "a_f_y_bevhills_04", "Alterado Para: a_f_y_bevhills_04");
		addModelOption("a_f_y_business_01", "a_f_y_business_01", "Alterado Para: a_f_y_business_01");
		addModelOption("a_f_y_business_02", "a_f_y_business_02", "Alterado Para: a_f_y_business_02");
		addModelOption("a_f_y_business_03", "a_f_y_business_03", "Alterado Para: a_f_y_business_03");
		addModelOption("a_f_y_business_04", "a_f_y_business_04", "Alterado Para: a_f_y_business_04");
		addModelOption("a_f_y_eastsa_01", "a_f_y_eastsa_01", "Alterado Para: a_f_y_eastsa_01");
		addModelOption("a_f_y_eastsa_02", "a_f_y_eastsa_02", "Alterado Para: a_f_y_eastsa_02");
		addModelOption("a_f_y_eastsa_03", "a_f_y_eastsa_03", "Alterado Para: a_f_y_eastsa_03");
		addModelOption("a_f_y_epsilon_01", "a_f_y_epsilon_01", "Alterado Para: a_f_y_epsilon_01");
		addModelOption("a_f_y_fitness_01", "a_f_y_fitness_01", "Alterado Para: a_f_y_fitness_01");
		addModelOption("a_f_y_fitness_02", "a_f_y_fitness_02", "Alterado Para: a_f_y_fitness_02");
		addModelOption("a_f_y_genhot_01", "a_f_y_genhot_01", "Alterado Para: a_f_y_genhot_01");
		addModelOption("a_f_y_golfer_01", "a_f_y_golfer_01", "Alterado Para: a_f_y_golfer_01");
		addModelOption("a_f_y_hiker_01", "a_f_y_hiker_01", "Alterado Para: a_f_y_hiker_01");
		addModelOption("a_f_y_hippie_01", "a_f_y_hippie_01", "Alterado Para: a_f_y_hippie_01");
		addModelOption("a_f_y_hipster_01", "a_f_y_hipster_01", "Alterado Para: a_f_y_hipster_01");
		addModelOption("a_f_y_hipster_02", "a_f_y_hipster_02", "Alterado Para: a_f_y_hipster_02");
		addModelOption("a_f_y_hipster_03", "a_f_y_hipster_03", "Alterado Para: a_f_y_hipster_03");
		addModelOption("a_f_y_hipster_04", "a_f_y_hipster_04", "Alterado Para: a_f_y_hipster_04");
		addModelOption("a_f_y_indian_01", "a_f_y_indian_01", "Alterado Para: a_f_y_indian_01");
		addModelOption("a_f_y_juggalo_01", "a_f_y_juggalo_01", "Alterado Para: a_f_y_juggalo_01");
		addModelOption("a_f_y_runner_01", "a_f_y_runner_01", "Alterado Para: a_f_y_runner_01");
		addModelOption("a_f_y_rurmeth_01", "a_f_y_rurmeth_01", "Alterado Para: a_f_y_rurmeth_01");
		addModelOption("a_f_y_scdressy_01", "a_f_y_scdressy_01", "Alterado Para: a_f_y_scdressy_01");
		addModelOption("a_f_y_skater_01", "a_f_y_skater_01", "Alterado Para: a_f_y_skater_01");
		addModelOption("a_f_y_soucent_01", "a_f_y_soucent_01", "Alterado Para: a_f_y_soucent_01");
		addModelOption("a_f_y_soucent_02", "a_f_y_soucent_02", "Alterado Para: a_f_y_soucent_02");
		addModelOption("a_f_y_soucent_03", "a_f_y_soucent_03", "Alterado Para: a_f_y_soucent_03");
		addModelOption("a_f_y_tennis_01", "a_f_y_tennis_01", "Alterado Para: a_f_y_tennis_01");
		addModelOption("a_f_y_topless_01", "a_f_y_topless_01", "Alterado Para: a_f_y_topless_01");
		addModelOption("a_f_y_tourist_01", "a_f_y_tourist_01", "Alterado Para: a_f_y_tourist_01");
		addModelOption("a_f_y_tourist_02", "a_f_y_tourist_02", "Alterado Para: a_f_y_tourist_02");
		addModelOption("a_f_y_vinewood_01", "a_f_y_vinewood_01", "Alterado Para: a_f_y_vinewood_01");
		addModelOption("a_f_y_vinewood_02", "a_f_y_vinewood_02", "Alterado Para: a_f_y_vinewood_02");
		addModelOption("a_f_y_vinewood_03", "a_f_y_vinewood_03", "Alterado Para: a_f_y_vinewood_03");
		addModelOption("a_f_y_vinewood_04", "a_f_y_vinewood_04", "Alterado Para: a_f_y_vinewood_04");
		addModelOption("a_f_y_yoga_01", "a_f_y_yoga_01", "Alterado Para: a_f_y_yoga_01");
		addModelOption("a_m_m_acult_01", "a_m_m_acult_01", "Alterado Para: a_m_m_acult_01");
		addModelOption("a_m_m_afriamer_01", "a_m_m_afriamer_01", "Alterado Para: a_m_m_afriamer_01");
		addModelOption("a_m_m_beach_01", "a_m_m_beach_01", "Alterado Para: a_m_m_beach_01");
		addModelOption("a_m_m_beach_02", "a_m_m_beach_02", "Alterado Para: a_m_m_beach_02");
		addModelOption("a_m_m_bevhills_01", "a_m_m_bevhills_01", "Alterado Para: a_m_m_bevhills_01");
		addModelOption("a_m_m_bevhills_02", "a_m_m_bevhills_02", "Alterado Para: a_m_m_bevhills_02");
		addModelOption("a_m_m_business_01", "a_m_m_business_01", "Alterado Para: a_m_m_business_01");
		addModelOption("a_m_m_eastsa_01", "a_m_m_eastsa_01", "Alterado Para: a_m_m_eastsa_01");
		addModelOption("a_m_m_eastsa_02", "a_m_m_eastsa_02", "Alterado Para: a_m_m_eastsa_02");
		addModelOption("a_m_m_farmer_01", "a_m_m_farmer_01", "Alterado Para: a_m_m_farmer_01");
		addModelOption("a_m_m_fatlatin_01", "a_m_m_fatlatin_01", "Alterado Para: a_m_m_fatlatin_01");
		addModelOption("a_m_m_genfat_01", "a_m_m_genfat_01", "Alterado Para: a_m_m_genfat_01");
		addModelOption("a_m_m_genfat_02", "a_m_m_genfat_02", "Alterado Para: a_m_m_genfat_02");
		addModelOption("a_m_m_golfer_01", "a_m_m_golfer_01", "Alterado Para: a_m_m_golfer_01");
		addModelOption("a_m_m_hasjew_01", "a_m_m_hasjew_01", "Alterado Para: a_m_m_hasjew_01");
		addModelOption("a_m_m_hillbilly_01", "a_m_m_hillbilly_01", "Alterado Para: a_m_m_hillbilly_01");
		addModelOption("a_m_m_hillbilly_02", "a_m_m_hillbilly_02", "Alterado Para: a_m_m_hillbilly_02");
		addModelOption("a_m_m_indian_01", "a_m_m_indian_01", "Alterado Para: a_m_m_indian_01");
		addModelOption("a_m_m_ktown_01", "a_m_m_ktown_01", "Alterado Para: a_m_m_ktown_01");
		addModelOption("a_m_m_malibu_01", "a_m_m_malibu_01", "Alterado Para: a_m_m_malibu_01");
		addModelOption("a_m_m_mexcntry_01", "a_m_m_mexcntry_01", "Alterado Para: a_m_m_mexcntry_01");
		addModelOption("a_m_m_mexlabor_01", "a_m_m_mexlabor_01", "Alterado Para: a_m_m_mexlabor_01");
		addModelOption("a_m_m_og_boss_01", "a_m_m_og_boss_01", "Alterado Para: a_m_m_og_boss_01");
		addModelOption("a_m_m_paparazzi_01", "a_m_m_paparazzi_01", "Alterado Para: a_m_m_paparazzi_01");
		addModelOption("a_m_m_polynesian_01", "a_m_m_polynesian_01", "Alterado Para: a_m_m_polynesian_01");
		addModelOption("a_m_m_prolhost_01", "a_m_m_prolhost_01", "Alterado Para: a_m_m_prolhost_01");
		addModelOption("a_m_m_rurmeth_01", "a_m_m_rurmeth_01", "Alterado Para: a_m_m_rurmeth_01");
		addModelOption("a_m_m_salton_01", "a_m_m_salton_01", "Alterado Para: a_m_m_salton_01");
		addModelOption("a_m_m_salton_02", "a_m_m_salton_02", "Alterado Para: a_m_m_salton_02");
		addModelOption("a_m_m_salton_03", "a_m_m_salton_03", "Alterado Para: a_m_m_salton_03");
		addModelOption("a_m_m_salton_04", "a_m_m_salton_04", "Alterado Para: a_m_m_salton_04");
		addModelOption("a_m_m_skater_01", "a_m_m_skater_01", "Alterado Para: a_m_m_skater_01");
		addModelOption("a_m_m_skidrow_01", "a_m_m_skidrow_01", "Alterado Para: a_m_m_skidrow_01");
		addModelOption("a_m_m_socenlat_01", "a_m_m_socenlat_01", "Alterado Para: a_m_m_socenlat_01");
		addModelOption("a_m_m_soucent_01", "a_m_m_soucent_01", "Alterado Para: a_m_m_soucent_01");
		addModelOption("a_m_m_soucent_02", "a_m_m_soucent_02", "Alterado Para: a_m_m_soucent_02");
		addModelOption("a_m_m_soucent_03", "a_m_m_soucent_03", "Alterado Para: a_m_m_soucent_03");
		addModelOption("a_m_m_soucent_04", "a_m_m_soucent_04", "Alterado Para: a_m_m_soucent_04");
		addModelOption("a_m_m_stlat_02", "a_m_m_stlat_02", "Alterado Para: a_m_m_stlat_02");
		addModelOption("a_m_m_tennis_01", "a_m_m_tennis_01", "Alterado Para: a_m_m_tennis_01");
		addModelOption("a_m_m_tourist_01", "a_m_m_tourist_01", "Alterado Para: a_m_m_tourist_01");
		addModelOption("a_m_m_tramp_01", "a_m_m_tramp_01", "Alterado Para: a_m_m_tramp_01");
		addModelOption("a_m_m_trampbeac_01", "a_m_m_trampbeac_01", "Alterado Para: a_m_m_trampbeac_01");
		addModelOption("a_m_m_tranvest_01", "a_m_m_tranvest_01", "Alterado Para: a_m_m_tranvest_01");
		addModelOption("a_m_m_tranvest_02", "a_m_m_tranvest_02", "Alterado Para: a_m_m_tranvest_02");
		addModelOption("a_m_o_acult_01", "a_m_o_acult_01", "Alterado Para: a_m_o_acult_01");
		addModelOption("a_m_o_acult_02", "a_m_o_acult_02", "Alterado Para: a_m_o_acult_02");
		addModelOption("a_m_o_beach_01", "a_m_o_beach_01", "Alterado Para: a_m_o_beach_01");
		addModelOption("a_m_o_genstreet_01", "a_m_o_genstreet_01", "Alterado Para: a_m_o_genstreet_01");
		addModelOption("a_m_o_ktown_01", "a_m_o_ktown_01", "Alterado Para: a_m_o_ktown_01");
		addModelOption("a_m_o_salton_01", "a_m_o_salton_01", "Alterado Para: a_m_o_salton_01");
		addModelOption("a_m_o_soucent_01", "a_m_o_soucent_01", "Alterado Para: a_m_o_soucent_01");
		addModelOption("a_m_o_soucent_02", "a_m_o_soucent_02", "Alterado Para: a_m_o_soucent_02");
		addModelOption("a_m_o_soucent_03", "a_m_o_soucent_03", "Alterado Para: a_m_o_soucent_03");
		addModelOption("a_m_o_tramp_01", "a_m_o_tramp_01", "Alterado Para: a_m_o_tramp_01");
		addModelOption("a_m_y_acult_01", "a_m_y_acult_01", "Alterado Para: a_m_y_acult_01");
		addModelOption("a_m_y_acult_02", "a_m_y_acult_02", "Alterado Para: a_m_y_acult_02");
		addModelOption("a_m_y_beach_01", "a_m_y_beach_01", "Alterado Para: a_m_y_beach_01");
		addModelOption("a_m_y_beach_02", "a_m_y_beach_02", "Alterado Para: a_m_y_beach_02");
		addModelOption("a_m_y_beach_03", "a_m_y_beach_03", "Alterado Para: a_m_y_beach_03");
		addModelOption("a_m_y_beachvesp_01", "a_m_y_beachvesp_01", "Alterado Para: a_m_y_beachvesp_01");
		addModelOption("a_m_y_beachvesp_02", "a_m_y_beachvesp_02", "Alterado Para: a_m_y_beachvesp_02");
		addModelOption("a_m_y_bevhills_01", "a_m_y_bevhills_01", "Alterado Para: a_m_y_bevhills_01");
		addModelOption("a_m_y_bevhills_02", "a_m_y_bevhills_02", "Alterado Para: a_m_y_bevhills_02");
		addModelOption("a_m_y_breakdance_01", "a_m_y_breakdance_01", "Alterado Para: a_m_y_breakdance_01");
		addModelOption("a_m_y_busicas_01", "a_m_y_busicas_01", "Alterado Para: a_m_y_busicas_01");
		addModelOption("a_m_y_business_01", "a_m_y_business_01", "Alterado Para: a_m_y_business_01");
		addModelOption("a_m_y_business_02", "a_m_y_business_02", "Alterado Para: a_m_y_business_02");
		addModelOption("a_m_y_business_03", "a_m_y_business_03", "Alterado Para: a_m_y_business_03");
		addModelOption("a_m_y_cyclist_01", "a_m_y_cyclist_01", "Alterado Para: a_m_y_cyclist_01");
		addModelOption("a_m_y_dhill_01", "a_m_y_dhill_01", "Alterado Para: a_m_y_dhill_01");
		addModelOption("a_m_y_downtown_01", "a_m_y_downtown_01", "Alterado Para: a_m_y_downtown_01");
		addModelOption("a_m_y_eastsa_01", "a_m_y_eastsa_01", "Alterado Para: a_m_y_eastsa_01");
		addModelOption("a_m_y_eastsa_02", "a_m_y_eastsa_02", "Alterado Para: a_m_y_eastsa_02");
		addModelOption("a_m_y_epsilon_01", "a_m_y_epsilon_01", "Alterado Para: a_m_y_epsilon_01");
		addModelOption("a_m_y_epsilon_02", "a_m_y_epsilon_02", "Alterado Para: a_m_y_epsilon_02");
		addModelOption("a_m_y_gay_01", "a_m_y_gay_01", "Alterado Para: a_m_y_gay_01");
		addModelOption("a_m_y_gay_02", "a_m_y_gay_02", "Alterado Para: a_m_y_gay_02");
		addModelOption("a_m_y_genstreet_01", "a_m_y_genstreet_01", "Alterado Para: a_m_y_genstreet_01");
		addModelOption("a_m_y_genstreet_02", "a_m_y_genstreet_02", "Alterado Para: a_m_y_genstreet_02");
		addModelOption("a_m_y_golfer_01", "a_m_y_golfer_01", "Alterado Para: a_m_y_golfer_01");
		addModelOption("a_m_y_hasjew_01", "a_m_y_hasjew_01", "Alterado Para: a_m_y_hasjew_01");
		addModelOption("a_m_y_hiker_01", "a_m_y_hiker_01", "Alterado Para: a_m_y_hiker_01");
		addModelOption("a_m_y_hippy_01", "a_m_y_hippy_01", "Alterado Para: a_m_y_hippy_01");
		addModelOption("a_m_y_hipster_01", "a_m_y_hipster_01", "Alterado Para: a_m_y_hipster_01");
		addModelOption("a_m_y_hipster_02", "a_m_y_hipster_02", "Alterado Para: a_m_y_hipster_02");
		addModelOption("a_m_y_hipster_03", "a_m_y_hipster_03", "Alterado Para: a_m_y_hipster_03");
		addModelOption("a_m_y_indian_01", "a_m_y_indian_01", "Alterado Para: a_m_y_indian_01");
		addModelOption("a_m_y_jetski_01", "a_m_y_jetski_01", "Alterado Para: a_m_y_jetski_01");
		addModelOption("a_m_y_juggalo_01", "a_m_y_juggalo_01", "Alterado Para: a_m_y_juggalo_01");
		addModelOption("a_m_y_ktown_01", "a_m_y_ktown_01", "Alterado Para: a_m_y_ktown_01");
		addModelOption("a_m_y_ktown_02", "a_m_y_ktown_02", "Alterado Para: a_m_y_ktown_02");
		addModelOption("a_m_y_latino_01", "a_m_y_latino_01", "Alterado Para: a_m_y_latino_01");
		addModelOption("a_m_y_methhead_01", "a_m_y_methhead_01", "Alterado Para: a_m_y_methhead_01");
		addModelOption("a_m_y_mexthug_01", "a_m_y_mexthug_01", "Alterado Para: a_m_y_mexthug_01");
		addModelOption("a_m_y_motox_01", "a_m_y_motox_01", "Alterado Para: a_m_y_motox_01");
		addModelOption("a_m_y_motox_02", "a_m_y_motox_02", "Alterado Para: a_m_y_motox_02");
		addModelOption("a_m_y_musclbeac_01", "a_m_y_musclbeac_01", "Alterado Para: a_m_y_musclbeac_01");
		addModelOption("a_m_y_musclbeac_02", "a_m_y_musclbeac_02", "Alterado Para: a_m_y_musclbeac_02");
		addModelOption("a_m_y_polynesian_01", "a_m_y_polynesian_01", "Alterado Para: a_m_y_polynesian_01");
		addModelOption("a_m_y_roadcyc_01", "a_m_y_roadcyc_01", "Alterado Para: a_m_y_roadcyc_01");
		addModelOption("a_m_y_runner_01", "a_m_y_runner_01", "Alterado Para: a_m_y_runner_01");
		addModelOption("a_m_y_runner_02", "a_m_y_runner_02", "Alterado Para: a_m_y_runner_02");
		addModelOption("a_m_y_salton_01", "a_m_y_salton_01", "Alterado Para: a_m_y_salton_01");
		addModelOption("a_m_y_skater_01", "a_m_y_skater_01", "Alterado Para: a_m_y_skater_01");
		addModelOption("a_m_y_skater_02", "a_m_y_skater_02", "Alterado Para: a_m_y_skater_02");
		addModelOption("a_m_y_soucent_01", "a_m_y_soucent_01", "Alterado Para: a_m_y_soucent_01");
		addModelOption("a_m_y_soucent_02", "a_m_y_soucent_02", "Alterado Para: a_m_y_soucent_02");
		addModelOption("a_m_y_soucent_03", "a_m_y_soucent_03", "Alterado Para: a_m_y_soucent_03");
		addModelOption("a_m_y_soucent_04", "a_m_y_soucent_04", "Alterado Para: a_m_y_soucent_04");
		addModelOption("a_m_y_stbla_01", "a_m_y_stbla_01", "Alterado Para: a_m_y_stbla_01");
		addModelOption("a_m_y_stbla_02", "a_m_y_stbla_02", "Alterado Para: a_m_y_stbla_02");
		addModelOption("a_m_y_stlat_01", "a_m_y_stlat_01", "Alterado Para: a_m_y_stlat_01");
		addModelOption("a_m_y_stwhi_01", "a_m_y_stwhi_01", "Alterado Para: a_m_y_stwhi_01");
		addModelOption("a_m_y_stwhi_02", "a_m_y_stwhi_02", "Alterado Para: a_m_y_stwhi_02");
		addModelOption("a_m_y_sunbathe_01", "a_m_y_sunbathe_01", "Alterado Para: a_m_y_sunbathe_01");
		addModelOption("a_m_y_surfer_01", "a_m_y_surfer_01", "Alterado Para: a_m_y_surfer_01");
		addModelOption("a_m_y_vindouche_01", "a_m_y_vindouche_01", "Alterado Para: a_m_y_vindouche_01");
		addModelOption("a_m_y_vinewood_01", "a_m_y_vinewood_01", "Alterado Para: a_m_y_vinewood_01");
		addModelOption("a_m_y_vinewood_02", "a_m_y_vinewood_02", "Alterado Para: a_m_y_vinewood_02");
		addModelOption("a_m_y_vinewood_03", "a_m_y_vinewood_03", "Alterado Para: a_m_y_vinewood_03");
		addModelOption("a_m_y_vinewood_04", "a_m_y_vinewood_04", "Alterado Para: a_m_y_vinewood_04");
		addModelOption("a_m_y_yoga_01", "a_m_y_yoga_01", "Alterado Para: a_m_y_yoga_01");
		addModelOption("csb_abigail", "csb_abigail", "Alterado Para: csb_abigail");
		addModelOption("csb_anita", "csb_anita", "Alterado Para: csb_anita");
		addModelOption("csb_anton", "csb_anton", "Alterado Para: csb_anton");
		addModelOption("csb_ballasog", "csb_ballasog", "Alterado Para: csb_ballasog");
		addModelOption("csb_bride", "csb_bride", "Alterado Para: csb_bride");
		addModelOption("csb_burgerdrug", "csb_burgerdrug", "Alterado Para: csb_burgerdrug");
		addModelOption("csb_car3guy1", "csb_car3guy1", "Alterado Para: csb_car3guy1");
		addModelOption("csb_car3guy2", "csb_car3guy2", "Alterado Para: csb_car3guy2");
		addModelOption("csb_chef", "csb_chef", "Alterado Para: csb_chef");
		addModelOption("csb_chin_goon", "csb_chin_goon", "Alterado Para: csb_chin_goon");
		addModelOption("csb_cletus", "csb_cletus", "Alterado Para: csb_cletus");
		addModelOption("csb_cop", "csb_cop", "Alterado Para: csb_cop");
		addModelOption("csb_customer", "csb_customer", "Alterado Para: csb_customer");
		addModelOption("csb_denise_friend", "csb_denise_friend", "Alterado Para: csb_denise_friend");
		addModelOption("csb_fos_rep", "csb_fos_rep", "Alterado Para: csb_fos_rep");
		addModelOption("csb_g", "csb_g", "Alterado Para: csb_g");
		addModelOption("csb_groom", "csb_groom", "Alterado Para: csb_groom");
		addModelOption("csb_grove_str_dlr", "csb_grove_str_dlr", "Alterado Para: csb_grove_str_dlr");
		addModelOption("csb_hao", "csb_hao", "Alterado Para: csb_hao");
		addModelOption("csb_hugh", "csb_hugh", "Alterado Para: csb_hugh");
		addModelOption("csb_imran", "csb_imran", "Alterado Para: csb_imran");
		addModelOption("csb_janitor", "csb_janitor", "Alterado Para: csb_janitor");
		addModelOption("csb_maude", "csb_maude", "Alterado Para: csb_maude");
		addModelOption("csb_mweather", "csb_mweather", "Alterado Para: csb_mweather");
		addModelOption("csb_ortega", "csb_ortega", "Alterado Para: csb_ortega");
		addModelOption("csb_oscar", "csb_oscar", "Alterado Para: csb_oscar");
		addModelOption("csb_porndudes", "csb_porndudes", "Alterado Para: csb_porndudes");
		addModelOption("csb_prologuedriver", "csb_prologuedriver", "Alterado Para: csb_prologuedriver");
		addModelOption("csb_prolsec", "csb_prolsec", "Alterado Para: csb_prolsec");
		addModelOption("csb_ramp_gang", "csb_ramp_gang", "Alterado Para: csb_ramp_gang");
		addModelOption("csb_ramp_hic", "csb_ramp_hic", "Alterado Para: csb_ramp_hic");
		addModelOption("csb_ramp_hipster", "csb_ramp_hipster", "Alterado Para: csb_ramp_hipster");
		addModelOption("csb_ramp_marine", "csb_ramp_marine", "Alterado Para: csb_ramp_marine");
		addModelOption("csb_ramp_mex", "csb_ramp_mex", "Alterado Para: csb_ramp_mex");
		addModelOption("csb_reporter", "csb_reporter", "Alterado Para: csb_reporter");
		addModelOption("csb_roccopelosi", "csb_roccopelosi", "Alterado Para: csb_roccopelosi");
		addModelOption("csb_screen_writer", "csb_screen_writer", "Alterado Para: csb_screen_writer");
		addModelOption("csb_stripper_01", "csb_stripper_01", "Alterado Para: csb_stripper_01");
		addModelOption("csb_stripper_02", "csb_stripper_02", "Alterado Para: csb_stripper_02");
		addModelOption("csb_tonya", "csb_tonya", "Alterado Para: csb_tonya");
		addModelOption("csb_trafficwarden", "csb_trafficwarden", "Alterado Para: csb_trafficwarden");
		addModelOption("g_f_y_ballas_01", "g_f_y_ballas_01", "Alterado Para: g_f_y_ballas_01");
		addModelOption("g_f_y_families_01", "g_f_y_families_01", "Alterado Para: g_f_y_families_01");
		addModelOption("g_f_y_lost_01", "g_f_y_lost_01", "Alterado Para: g_f_y_lost_01");
		addModelOption("g_f_y_vagos_01", "g_f_y_vagos_01", "Alterado Para: g_f_y_vagos_01");
		addModelOption("g_m_m_armboss_01", "g_m_m_armboss_01", "Alterado Para: g_m_m_armboss_01");
		addModelOption("g_m_m_armgoon_01", "g_m_m_armgoon_01", "Alterado Para: g_m_m_armgoon_01");
		addModelOption("g_m_m_armlieut_01", "g_m_m_armlieut_01", "Alterado Para: g_m_m_armlieut_01");
		addModelOption("g_m_m_chemwork_01", "g_m_m_chemwork_01", "Alterado Para: g_m_m_chemwork_01");
		addModelOption("g_m_m_chiboss_01", "g_m_m_chiboss_01", "Alterado Para: g_m_m_chiboss_01");
		addModelOption("g_m_m_chicold_01", "g_m_m_chicold_01", "Alterado Para: g_m_m_chicold_01");
		addModelOption("g_m_m_chigoon_01", "g_m_m_chigoon_01", "Alterado Para: g_m_m_chigoon_01");
		addModelOption("g_m_m_chigoon_02", "g_m_m_chigoon_02", "Alterado Para: g_m_m_chigoon_02");
		addModelOption("g_m_m_korboss_01", "g_m_m_korboss_01", "Alterado Para: g_m_m_korboss_01");
		addModelOption("g_m_m_mexboss_01", "g_m_m_mexboss_01", "Alterado Para: g_m_m_mexboss_01");
		addModelOption("g_m_m_mexboss_02", "g_m_m_mexboss_02", "Alterado Para: g_m_m_mexboss_02");
		addModelOption("g_m_y_armgoon_02", "g_m_y_armgoon_02", "Alterado Para: g_m_y_armgoon_02");
		addModelOption("g_m_y_azteca_01", "g_m_y_azteca_01", "Alterado Para: g_m_y_azteca_01");
		addModelOption("g_m_y_ballaeast_01", "g_m_y_ballaeast_01", "Alterado Para: g_m_y_ballaeast_01");
		addModelOption("g_m_y_ballaorig_01", "g_m_y_ballaorig_01", "Alterado Para: g_m_y_ballaorig_01");
		addModelOption("g_m_y_ballasout_01", "g_m_y_ballasout_01", "Alterado Para: g_m_y_ballasout_01");
		addModelOption("g_m_y_famca_01", "g_m_y_famca_01", "Alterado Para: g_m_y_famca_01");
		addModelOption("g_m_y_famdnf_01", "g_m_y_famdnf_01", "Alterado Para: g_m_y_famdnf_01");
		addModelOption("g_m_y_famfor_01", "g_m_y_famfor_01", "Alterado Para: g_m_y_famfor_01");
		addModelOption("g_m_y_korean_01", "g_m_y_korean_01", "Alterado Para: g_m_y_korean_01");
		addModelOption("g_m_y_korean_02", "g_m_y_korean_02", "Alterado Para: g_m_y_korean_02");
		addModelOption("g_m_y_korlieut_01", "g_m_y_korlieut_01", "Alterado Para: g_m_y_korlieut_01");
		addModelOption("g_m_y_lost_01", "g_m_y_lost_01", "Alterado Para: g_m_y_lost_01");
		addModelOption("g_m_y_lost_02", "g_m_y_lost_02", "Alterado Para: g_m_y_lost_02");
		addModelOption("g_m_y_lost_03", "g_m_y_lost_03", "Alterado Para: g_m_y_lost_03");
		addModelOption("g_m_y_mexgang_01", "g_m_y_mexgang_01", "Alterado Para: g_m_y_mexgang_01");
		addModelOption("g_m_y_mexgoon_01", "g_m_y_mexgoon_01", "Alterado Para: g_m_y_mexgoon_01");
		addModelOption("g_m_y_mexgoon_02", "g_m_y_mexgoon_02", "Alterado Para: g_m_y_mexgoon_02");
		addModelOption("g_m_y_mexgoon_03", "g_m_y_mexgoon_03", "Alterado Para: g_m_y_mexgoon_03");
		addModelOption("g_m_y_pologoon_01", "g_m_y_pologoon_01", "Alterado Para: g_m_y_pologoon_01");
		addModelOption("g_m_y_pologoon_02", "g_m_y_pologoon_02", "Alterado Para: g_m_y_pologoon_02");
		addModelOption("g_m_y_salvaboss_01", "g_m_y_salvaboss_01", "Alterado Para: g_m_y_salvaboss_01");
		addModelOption("g_m_y_salvagoon_01", "g_m_y_salvagoon_01", "Alterado Para: g_m_y_salvagoon_01");
		addModelOption("g_m_y_salvagoon_02", "g_m_y_salvagoon_02", "Alterado Para: g_m_y_salvagoon_02");
		addModelOption("g_m_y_salvagoon_03", "g_m_y_salvagoon_03", "Alterado Para: g_m_y_salvagoon_03");
		addModelOption("g_m_y_strpunk_01", "g_m_y_strpunk_01", "Alterado Para: g_m_y_strpunk_01");
		addModelOption("g_m_y_strpunk_02", "g_m_y_strpunk_02", "Alterado Para: g_m_y_strpunk_02");
		addModelOption("hc_driver", "hc_driver", "Alterado Para: hc_driver");
		addModelOption("hc_gunman", "hc_gunman", "Alterado Para: hc_gunman");
		addModelOption("hc_hacker", "hc_hacker", "Alterado Para: hc_hacker");
		addModelOption("ig_abigail", "ig_abigail", "Alterado Para: ig_abigail");
		addModelOption("ig_amandatownley", "ig_amandatownley", "Alterado Para: ig_amandatownley");
		addModelOption("ig_andreas", "ig_andreas", "Alterado Para: ig_andreas");
		addModelOption("ig_ashley", "ig_ashley", "Alterado Para: ig_ashley");
		addModelOption("ig_ballasog", "ig_ballasog", "Alterado Para: ig_ballasog");
		addModelOption("ig_bankman", "ig_bankman", "Alterado Para: ig_bankman");
		addModelOption("ig_barry", "ig_barry", "Alterado Para: ig_barry");
		addModelOption("ig_bestmen", "ig_bestmen", "Alterado Para: ig_bestmen");
		addModelOption("ig_beverly", "ig_beverly", "Alterado Para: ig_beverly");
		addModelOption("ig_brad", "ig_brad", "Alterado Para: ig_brad");
		addModelOption("ig_bride", "ig_bride", "Alterado Para: ig_bride");
		addModelOption("ig_car3guy1", "ig_car3guy1", "Alterado Para: ig_car3guy1");
		addModelOption("ig_car3guy2", "ig_car3guy2", "Alterado Para: ig_car3guy2");
		addModelOption("ig_casey", "ig_casey", "Alterado Para: ig_casey");
		addModelOption("ig_chef", "ig_chef", "Alterado Para: ig_chef");
		addModelOption("ig_chengsr", "ig_chengsr", "Alterado Para: ig_chengsr");
		addModelOption("ig_chrisformage", "ig_chrisformage", "Alterado Para: ig_chrisformage");
		addModelOption("ig_clay", "ig_clay", "Alterado Para: ig_clay");
		addModelOption("ig_claypain", "ig_claypain", "Alterado Para: ig_claypain");
		addModelOption("ig_cletus", "ig_cletus", "Alterado Para: ig_cletus");
		addModelOption("ig_dale", "ig_dale", "Alterado Para: ig_dale");
		addModelOption("ig_davenorton", "ig_davenorton", "Alterado Para: ig_davenorton");
		addModelOption("ig_denise", "ig_denise", "Alterado Para: ig_denise");
		addModelOption("ig_devin", "ig_devin", "Alterado Para: ig_devin");
		addModelOption("ig_dom", "ig_dom", "Alterado Para: ig_dom");
		addModelOption("ig_dreyfuss", "ig_dreyfuss", "Alterado Para: ig_dreyfuss");
		addModelOption("ig_drfriedlander", "ig_drfriedlander", "Alterado Para: ig_drfriedlander");
		addModelOption("ig_fabien", "ig_fabien", "Alterado Para: ig_fabien");
		addModelOption("ig_fbisuit_01", "ig_fbisuit_01", "Alterado Para: ig_fbisuit_01");
		addModelOption("ig_floyd", "ig_floyd", "Alterado Para: ig_floyd");
		addModelOption("ig_groom", "ig_groom", "Alterado Para: ig_groom");
		addModelOption("ig_hao", "ig_hao", "Alterado Para: ig_hao");
		addModelOption("ig_hunter", "ig_hunter", "Alterado Para: ig_hunter");
		addModelOption("ig_janet", "ig_janet", "Alterado Para: ig_janet");
		addModelOption("ig_jay_norris", "ig_jay_norris", "Alterado Para: ig_jay_norris");
		addModelOption("ig_jewelass", "ig_jewelass", "Alterado Para: ig_jewelass");
		addModelOption("ig_jimmyboston", "ig_jimmyboston", "Alterado Para: ig_jimmyboston");
		addModelOption("ig_jimmydisanto", "ig_jimmydisanto", "Alterado Para: ig_jimmydisanto");
		addModelOption("ig_joeminuteman", "ig_joeminuteman", "Alterado Para: ig_joeminuteman");
		addModelOption("ig_johnnyklebitz", "ig_johnnyklebitz", "Alterado Para: ig_johnnyklebitz");
		addModelOption("ig_josef", "ig_josef", "Alterado Para: ig_josef");
		addModelOption("ig_josh", "ig_josh", "Alterado Para: ig_josh");
		addModelOption("ig_kerrymcintosh", "ig_kerrymcintosh", "Alterado Para: ig_kerrymcintosh");
		addModelOption("ig_lamardavis", "ig_lamardavis", "Alterado Para: ig_lamardavis");
		addModelOption("ig_lazlow", "ig_lazlow", "Alterado Para: ig_lazlow");
		addModelOption("ig_lestercrest", "ig_lestercrest", "Alterado Para: ig_lestercrest");
		addModelOption("ig_lifeinvad_01", "ig_lifeinvad_01", "Alterado Para: ig_lifeinvad_01");
		addModelOption("ig_lifeinvad_02", "ig_lifeinvad_02", "Alterado Para: ig_lifeinvad_02");
		addModelOption("ig_magenta", "ig_magenta", "Alterado Para: ig_magenta");
		addModelOption("ig_manuel", "ig_manuel", "Alterado Para: ig_manuel");
		addModelOption("ig_marnie", "ig_marnie", "Alterado Para: ig_marnie");
		addModelOption("ig_maryann", "ig_maryann", "Alterado Para: ig_maryann");
		addModelOption("ig_maude", "ig_maude", "Alterado Para: ig_maude");
		addModelOption("ig_michelle", "ig_michelle", "Alterado Para: ig_michelle");
		addModelOption("ig_milton", "ig_milton", "Alterado Para: ig_milton");
		addModelOption("ig_molly", "ig_molly", "Alterado Para: ig_molly");
		addModelOption("ig_mrk", "ig_mrk", "Alterado Para: ig_mrk");
		addModelOption("ig_mrs_thornhill", "ig_mrs_thornhill", "Alterado Para: ig_mrs_thornhill");
		addModelOption("ig_mrsphillips", "ig_mrsphillips", "Alterado Para: ig_mrsphillips");
		addModelOption("ig_natalia", "ig_natalia", "Alterado Para: ig_natalia");
		addModelOption("ig_nervousron", "ig_nervousron", "Alterado Para: ig_nervousron");
		addModelOption("ig_nigel", "ig_nigel", "Alterado Para: ig_nigel");
		addModelOption("ig_old_man1a", "ig_old_man1a", "Alterado Para: ig_old_man1a");
		addModelOption("ig_old_man2", "ig_old_man2", "Alterado Para: ig_old_man2");
		addModelOption("ig_omega", "ig_omega", "Alterado Para: ig_omega");
		addModelOption("ig_oneil", "ig_oneil", "Alterado Para: ig_oneil");
		addModelOption("ig_orleans", "ig_orleans", "Alterado Para: ig_orleans");
		addModelOption("ig_ortega", "ig_ortega", "Alterado Para: ig_ortega");
		addModelOption("ig_paper", "ig_paper", "Alterado Para: ig_paper");
		addModelOption("ig_patricia", "ig_patricia", "Alterado Para: ig_patricia");
		addModelOption("ig_priest", "ig_priest", "Alterado Para: ig_priest");
		addModelOption("ig_prolsec_02", "ig_prolsec_02", "Alterado Para: ig_prolsec_02");
		addModelOption("ig_ramp_gang", "ig_ramp_gang", "Alterado Para: ig_ramp_gang");
		addModelOption("ig_ramp_hic", "ig_ramp_hic", "Alterado Para: ig_ramp_hic");
		addModelOption("ig_ramp_hipster", "ig_ramp_hipster", "Alterado Para: ig_ramp_hipster");
		addModelOption("ig_ramp_mex", "ig_ramp_mex", "Alterado Para: ig_ramp_mex");
		addModelOption("ig_roccopelosi", "ig_roccopelosi", "Alterado Para: ig_roccopelosi");
		addModelOption("ig_russiandrunk", "ig_russiandrunk", "Alterado Para: ig_russiandrunk");
		addModelOption("ig_screen_writer", "ig_screen_writer", "Alterado Para: ig_screen_writer");
		addModelOption("ig_siemonyetarian", "ig_siemonyetarian", "Alterado Para: ig_siemonyetarian");
		addModelOption("ig_solomon", "ig_solomon", "Alterado Para: ig_solomon");
		addModelOption("ig_stevehains", "ig_stevehains", "Alterado Para: ig_stevehains");
		addModelOption("ig_stretch", "ig_stretch", "Alterado Para: ig_stretch");
		addModelOption("ig_talina", "ig_talina", "Alterado Para: ig_talina");
		addModelOption("ig_tanisha", "ig_tanisha", "Alterado Para: ig_tanisha");
		addModelOption("ig_taocheng", "ig_taocheng", "Alterado Para: ig_taocheng");
		addModelOption("ig_taostranslator", "ig_taostranslator", "Alterado Para: ig_taostranslator");
		addModelOption("ig_tenniscoach", "ig_tenniscoach", "Alterado Para: ig_tenniscoach");
		addModelOption("ig_terry", "ig_terry", "Alterado Para: ig_terry");
		addModelOption("ig_tomepsilon", "ig_tomepsilon", "Alterado Para: ig_tomepsilon");
		addModelOption("ig_tonya", "ig_tonya", "Alterado Para: ig_tonya");
		addModelOption("ig_tracydisanto", "ig_tracydisanto", "Alterado Para: ig_tracydisanto");
		addModelOption("ig_trafficwarden", "ig_trafficwarden", "Alterado Para: ig_trafficwarden");
		addModelOption("ig_tylerdix", "ig_tylerdix", "Alterado Para: ig_tylerdix");
		addModelOption("ig_wade", "ig_wade", "Alterado Para: ig_wade");
		addModelOption("ig_zimbor", "ig_zimbor", "Alterado Para: ig_zimbor");
		addModelOption("mp_f_deadhooker", "mp_f_deadhooker", "Alterado Para: mp_f_deadhooker");
		addModelOption("mp_f_freemode_01", "mp_f_freemode_01", "Alterado Para: mp_f_freemode_01");
		addModelOption("mp_f_misty_01", "mp_f_misty_01", "Alterado Para: mp_f_misty_01");
		addModelOption("mp_f_stripperlite", "mp_f_stripperlite", "Alterado Para: mp_f_stripperlite");
		addModelOption("mp_g_m_pros_01", "mp_g_m_pros_01", "Alterado Para: mp_g_m_pros_01");
		addModelOption("mp_headtargets", "mp_headtargets", "Alterado Para: mp_headtargets");
		addModelOption("mp_m_claude_01", "mp_m_claude_01", "Alterado Para: mp_m_claude_01");
		addModelOption("mp_m_exarmy_01", "mp_m_exarmy_01", "Alterado Para: mp_m_exarmy_01");
		addModelOption("mp_m_famdd_01", "mp_m_famdd_01", "Alterado Para: mp_m_famdd_01");
		addModelOption("mp_m_fibsec_01", "mp_m_fibsec_01", "Alterado Para: mp_m_fibsec_01");
		addModelOption("mp_m_freemode_01", "mp_m_freemode_01", "Alterado Para: mp_m_freemode_01");
		addModelOption("mp_m_marston_01", "mp_m_marston_01", "Alterado Para: mp_m_marston_01");
		addModelOption("mp_m_niko_01", "mp_m_niko_01", "Alterado Para: mp_m_niko_01");
		addModelOption("mp_m_shopkeep_01", "mp_m_shopkeep_01", "Alterado Para: mp_m_shopkeep_01");
		addModelOption("mp_s_m_armoured_01", "mp_s_m_armoured_01", "Alterado Para: mp_s_m_armoured_01");
		addModelOption("player_one", "player_one", "Alterado Para: player_one");
		addModelOption("player_two", "player_two", "Alterado Para: player_two");
		addModelOption("player_zero", "player_zero", "Alterado Para: player_zero");
		addModelOption("s_f_y_airhostess_01", "s_f_y_airhostess_01", "Alterado Para: s_f_y_airhostess_01");
		addModelOption("s_f_y_bartender_01", "s_f_y_bartender_01", "Alterado Para: s_f_y_bartender_01");
		addModelOption("s_f_y_baywatch_01", "s_f_y_baywatch_01", "Alterado Para: s_f_y_baywatch_01");
		addModelOption("s_f_y_cop_01", "s_f_y_cop_01", "Alterado Para: s_f_y_cop_01");
		addModelOption("s_f_y_factory_01", "s_f_y_factory_01", "Alterado Para: s_f_y_factory_01");
		addModelOption("s_f_y_hooker_01", "s_f_y_hooker_01", "Alterado Para: s_f_y_hooker_01");
		addModelOption("s_f_y_hooker_02", "s_f_y_hooker_02", "Alterado Para: s_f_y_hooker_02");
		addModelOption("s_f_y_hooker_03", "s_f_y_hooker_03", "Alterado Para: s_f_y_hooker_03");
		addModelOption("s_f_y_migrant_01", "s_f_y_migrant_01", "Alterado Para: s_f_y_migrant_01");
		addModelOption("s_f_y_movprem_01", "s_f_y_movprem_01", "Alterado Para: s_f_y_movprem_01");
		addModelOption("s_f_y_ranger_01", "s_f_y_ranger_01", "Alterado Para: s_f_y_ranger_01");
		addModelOption("s_f_y_scrubs_01", "s_f_y_scrubs_01", "Alterado Para: s_f_y_scrubs_01");
		addModelOption("s_f_y_sheriff_01", "s_f_y_sheriff_01", "Alterado Para: s_f_y_sheriff_01");
		addModelOption("s_f_y_shop_low", "s_f_y_shop_low", "Alterado Para: s_f_y_shop_low");
		addModelOption("s_f_y_shop_mid", "s_f_y_shop_mid", "Alterado Para: s_f_y_shop_mid");
		addModelOption("s_f_y_stripper_01", "s_f_y_stripper_01", "Alterado Para: s_f_y_stripper_01");
		addModelOption("s_f_y_stripper_02", "s_f_y_stripper_02", "Alterado Para: s_f_y_stripper_02");
		addModelOption("s_f_y_stripperlite", "s_f_y_stripperlite", "Alterado Para: s_f_y_stripperlite");
		addModelOption("s_f_y_sweatshop_01", "s_f_y_sweatshop_01", "Alterado Para: s_f_y_sweatshop_01");
		addModelOption("s_m_m_ammucountry", "s_m_m_ammucountry", "Alterado Para: s_m_m_ammucountry");
		addModelOption("s_m_m_armoured_01", "s_m_m_armoured_01", "Alterado Para: s_m_m_armoured_01");
		addModelOption("s_m_m_armoured_02", "s_m_m_armoured_02", "Alterado Para: s_m_m_armoured_02");
		addModelOption("s_m_m_autoshop_01", "s_m_m_autoshop_01", "Alterado Para: s_m_m_autoshop_01");
		addModelOption("s_m_m_autoshop_02", "s_m_m_autoshop_02", "Alterado Para: s_m_m_autoshop_02");
		addModelOption("s_m_m_bouncer_01", "s_m_m_bouncer_01", "Alterado Para: s_m_m_bouncer_01");
		addModelOption("s_m_m_chemsec_01", "s_m_m_chemsec_01", "Alterado Para: s_m_m_chemsec_01");
		addModelOption("s_m_m_ciasec_01", "s_m_m_ciasec_01", "Alterado Para: s_m_m_ciasec_01");
		addModelOption("s_m_m_cntrybar_01", "s_m_m_cntrybar_01", "Alterado Para: s_m_m_cntrybar_01");
		addModelOption("s_m_m_dockwork_01", "s_m_m_dockwork_01", "Alterado Para: s_m_m_dockwork_01");
		addModelOption("s_m_m_doctor_01", "s_m_m_doctor_01", "Alterado Para: s_m_m_doctor_01");
		addModelOption("s_m_m_fiboffice_01", "s_m_m_fiboffice_01", "Alterado Para: s_m_m_fiboffice_01");
		addModelOption("s_m_m_fiboffice_02", "s_m_m_fiboffice_02", "Alterado Para: s_m_m_fiboffice_02");
		addModelOption("s_m_m_janitor", "s_m_m_janitor", "Alterado Para: s_m_m_janitor");
		addModelOption("s_m_m_lathandy_01", "s_m_m_lathandy_01", "Alterado Para: s_m_m_lathandy_01");
		addModelOption("s_m_m_lifeinvad_01", "s_m_m_lifeinvad_01", "Alterado Para: s_m_m_lifeinvad_01");
		addModelOption("s_m_m_linecook", "s_m_m_linecook", "Alterado Para: s_m_m_linecook");
		addModelOption("s_m_m_lsmetro_01", "s_m_m_lsmetro_01", "Alterado Para: s_m_m_lsmetro_01");
		addModelOption("s_m_m_mariachi_01", "s_m_m_mariachi_01", "Alterado Para: s_m_m_mariachi_01");
		addModelOption("s_m_m_marine_01", "s_m_m_marine_01", "Alterado Para: s_m_m_marine_01");
		addModelOption("s_m_m_marine_02", "s_m_m_marine_02", "Alterado Para: s_m_m_marine_02");
		addModelOption("s_m_m_migrant_01", "s_m_m_migrant_01", "Alterado Para: s_m_m_migrant_01");
		addModelOption("s_m_m_movalien_01", "s_m_m_movalien_01", "Alterado Para: s_m_m_movalien_01");
		addModelOption("s_m_m_movprem_01", "s_m_m_movprem_01", "Alterado Para: s_m_m_movprem_01");
		addModelOption("s_m_m_movspace_01", "s_m_m_movspace_01", "Alterado Para: s_m_m_movspace_01");
		addModelOption("s_m_m_paramedic_01", "s_m_m_paramedic_01", "Alterado Para: s_m_m_paramedic_01");
		addModelOption("s_m_m_pilot_01", "s_m_m_pilot_01", "Alterado Para: s_m_m_pilot_01");
		addModelOption("s_m_m_pilot_02", "s_m_m_pilot_02", "Alterado Para: s_m_m_pilot_02");
		addModelOption("s_m_m_postal_01", "s_m_m_postal_01", "Alterado Para: s_m_m_postal_01");
		addModelOption("s_m_m_postal_02", "s_m_m_postal_02", "Alterado Para: s_m_m_postal_02");
		addModelOption("s_m_m_prisguard_01", "s_m_m_prisguard_01", "Alterado Para: s_m_m_prisguard_01");
		addModelOption("s_m_m_scientist_01", "s_m_m_scientist_01", "Alterado Para: s_m_m_scientist_01");
		addModelOption("s_m_m_security_01", "s_m_m_security_01", "Alterado Para: s_m_m_security_01");
		addModelOption("s_m_m_snowcop_01", "s_m_m_snowcop_01", "Alterado Para: s_m_m_snowcop_01");
		addModelOption("s_m_m_strperf_01", "s_m_m_strperf_01", "Alterado Para: s_m_m_strperf_01");
		addModelOption("s_m_m_strpreach_01", "s_m_m_strpreach_01", "Alterado Para: s_m_m_strpreach_01");
		addModelOption("s_m_m_strvend_01", "s_m_m_strvend_01", "Alterado Para: s_m_m_strvend_01");
		addModelOption("s_m_m_trucker_01", "s_m_m_trucker_01", "Alterado Para: s_m_m_trucker_01");
		addModelOption("s_m_m_ups_01", "s_m_m_ups_01", "Alterado Para: s_m_m_ups_01");
		addModelOption("s_m_m_ups_02", "s_m_m_ups_02", "Alterado Para: s_m_m_ups_02");
		addModelOption("s_m_o_busker_01", "s_m_o_busker_01", "Alterado Para: s_m_o_busker_01");
		addModelOption("s_m_y_airworker", "s_m_y_airworker", "Alterado Para: s_m_y_airworker");
		addModelOption("s_m_y_ammucity_01", "s_m_y_ammucity_01", "Alterado Para: s_m_y_ammucity_01");
		addModelOption("s_m_y_armymech_01", "s_m_y_armymech_01", "Alterado Para: s_m_y_armymech_01");
		addModelOption("s_m_y_autopsy_01", "s_m_y_autopsy_01", "Alterado Para: s_m_y_autopsy_01");
		addModelOption("s_m_y_barman_01", "s_m_y_barman_01", "Alterado Para: s_m_y_barman_01");
		addModelOption("s_m_y_baywatch_01", "s_m_y_baywatch_01", "Alterado Para: s_m_y_baywatch_01");
		addModelOption("s_m_y_blackops_01", "s_m_y_blackops_01", "Alterado Para: s_m_y_blackops_01");
		addModelOption("s_m_y_blackops_02", "s_m_y_blackops_02", "Alterado Para: s_m_y_blackops_02");
		addModelOption("s_m_y_busboy_01", "s_m_y_busboy_01", "Alterado Para: s_m_y_busboy_01");
		addModelOption("s_m_y_chef_01", "s_m_y_chef_01", "Alterado Para: s_m_y_chef_01");
		addModelOption("s_m_y_clown_01", "s_m_y_clown_01", "Alterado Para: s_m_y_clown_01");
		addModelOption("s_m_y_construct_01", "s_m_y_construct_01", "Alterado Para: s_m_y_construct_01");
		addModelOption("s_m_y_construct_02", "s_m_y_construct_02", "Alterado Para: s_m_y_construct_02");
		addModelOption("s_m_y_cop_01", "s_m_y_cop_01", "Alterado Para: s_m_y_cop_01");
		addModelOption("s_m_y_dealer_01", "s_m_y_dealer_01", "Alterado Para: s_m_y_dealer_01");
		addModelOption("s_m_y_devinsec_01", "s_m_y_devinsec_01", "Alterado Para: s_m_y_devinsec_01");
		addModelOption("s_m_y_dockwork_01", "s_m_y_dockwork_01", "Alterado Para: s_m_y_dockwork_01");
		addModelOption("s_m_y_doorman_01", "s_m_y_doorman_01", "Alterado Para: s_m_y_doorman_01");
		addModelOption("s_m_y_dwservice_01", "s_m_y_dwservice_01", "Alterado Para: s_m_y_dwservice_01");
		addModelOption("s_m_y_dwservice_02", "s_m_y_dwservice_02", "Alterado Para: s_m_y_dwservice_02");
		addModelOption("s_m_y_fireman_01", "s_m_y_fireman_01", "Alterado Para: s_m_y_fireman_01");
		addModelOption("s_m_y_garbage", "s_m_y_garbage", "Alterado Para: s_m_y_garbage");
		addModelOption("s_m_y_grip_01", "s_m_y_grip_01", "Alterado Para: s_m_y_grip_01");
		addModelOption("s_m_y_hwaycop_01", "s_m_y_hwaycop_01", "Alterado Para: s_m_y_hwaycop_01");
		addModelOption("s_m_y_marine_01", "s_m_y_marine_01", "Alterado Para: s_m_y_marine_01");
		addModelOption("s_m_y_marine_02", "s_m_y_marine_02", "Alterado Para: s_m_y_marine_02");
		addModelOption("s_m_y_marine_03", "s_m_y_marine_03", "Alterado Para: s_m_y_marine_03");
		addModelOption("s_m_y_mime", "s_m_y_mime", "Alterado Para: s_m_y_mime");
		addModelOption("s_m_y_pestcont_01", "s_m_y_pestcont_01", "Alterado Para: s_m_y_pestcont_01");
		addModelOption("s_m_y_pilot_01", "s_m_y_pilot_01", "Alterado Para: s_m_y_pilot_01");
		addModelOption("s_m_y_prismuscl_01", "s_m_y_prismuscl_01", "Alterado Para: s_m_y_prismuscl_01");
		addModelOption("s_m_y_prisoner_01", "s_m_y_prisoner_01", "Alterado Para: s_m_y_prisoner_01");
		addModelOption("s_m_y_ranger_01", "s_m_y_ranger_01", "Alterado Para: s_m_y_ranger_01");
		addModelOption("s_m_y_robber_01", "s_m_y_robber_01", "Alterado Para: s_m_y_robber_01");
		addModelOption("s_m_y_sheriff_01", "s_m_y_sheriff_01", "Alterado Para: s_m_y_sheriff_01");
		addModelOption("s_m_y_shop_mask", "s_m_y_shop_mask", "Alterado Para: s_m_y_shop_mask");
		addModelOption("s_m_y_strvend_01", "s_m_y_strvend_01", "Alterado Para: s_m_y_strvend_01");
		addModelOption("s_m_y_swat_01", "s_m_y_swat_01", "Alterado Para: s_m_y_swat_01");
		addModelOption("s_m_y_uscg_01", "s_m_y_uscg_01", "Alterado Para: s_m_y_uscg_01");
		addModelOption("s_m_y_valet_01", "s_m_y_valet_01", "Alterado Para: s_m_y_valet_01");
		addModelOption("s_m_y_waiter_01", "s_m_y_waiter_01", "Alterado Para: s_m_y_waiter_01");
		addModelOption("s_m_y_winclean_01", "s_m_y_winclean_01", "Alterado Para: s_m_y_winclean_01");
		addModelOption("s_m_y_xmech_01", "s_m_y_xmech_01", "Alterado Para: s_m_y_xmech_01");
		addModelOption("s_m_y_xmech_02", "s_m_y_xmech_02", "Alterado Para: s_m_y_xmech_02");
		addModelOption("u_f_m_corpse_01", "u_f_m_corpse_01", "Alterado Para: u_f_m_corpse_01");
		addModelOption("u_f_m_miranda", "u_f_m_miranda", "Alterado Para: u_f_m_miranda");
		addModelOption("u_f_m_promourn_01", "u_f_m_promourn_01", "Alterado Para: u_f_m_promourn_01");
		addModelOption("u_f_y_bikerchic", "u_f_y_bikerchic", "Alterado Para: u_f_y_bikerchic");
		addModelOption("u_f_y_comjane", "u_f_y_comjane", "Alterado Para: u_f_y_comjane");
		addModelOption("u_f_y_corpse_01", "u_f_y_corpse_01", "Alterado Para: u_f_y_corpse_01");
		addModelOption("u_f_y_corpse_02", "u_f_y_corpse_02", "Alterado Para: u_f_y_corpse_02");
		addModelOption("u_f_y_hotposh_01", "u_f_y_hotposh_01", "Alterado Para: u_f_y_hotposh_01");
		addModelOption("u_f_y_jewelass_01", "u_f_y_jewelass_01", "Alterado Para: u_f_y_jewelass_01");
		addModelOption("u_f_y_mistress", "u_f_y_mistress", "Alterado Para: u_f_y_mistress");
		addModelOption("u_f_y_poppymich", "u_f_y_poppymich", "Alterado Para: u_f_y_poppymich");
		addModelOption("u_f_y_princess", "u_f_y_princess", "Alterado Para: u_f_y_princess");
		addModelOption("u_f_y_spyactress", "u_f_y_spyactress", "Alterado Para: u_f_y_spyactress");
		addModelOption("u_m_m_aldinapoli", "u_m_m_aldinapoli", "Alterado Para: u_m_m_aldinapoli");
		addModelOption("u_m_m_bankman", "u_m_m_bankman", "Alterado Para: u_m_m_bankman");
		addModelOption("u_m_m_bikehire_01", "u_m_m_bikehire_01", "Alterado Para: u_m_m_bikehire_01");
		addModelOption("u_m_m_fibarchitect", "u_m_m_fibarchitect", "Alterado Para: u_m_m_fibarchitect");
		addModelOption("u_m_m_filmdirector", "u_m_m_filmdirector", "Alterado Para: u_m_m_filmdirector");
		addModelOption("u_m_m_glenstank_01", "u_m_m_glenstank_01", "Alterado Para: u_m_m_glenstank_01");
		addModelOption("u_m_m_griff_01", "u_m_m_griff_01", "Alterado Para: u_m_m_griff_01");
		addModelOption("u_m_m_jesus_01", "u_m_m_jesus_01", "Alterado Para: u_m_m_jesus_01");
		addModelOption("u_m_m_jewelsec_01", "u_m_m_jewelsec_01", "Alterado Para: u_m_m_jewelsec_01");
		addModelOption("u_m_m_jewelthief", "u_m_m_jewelthief", "Alterado Para: u_m_m_jewelthief");
		addModelOption("u_m_m_markfost", "u_m_m_markfost", "Alterado Para: u_m_m_markfost");
		addModelOption("u_m_m_partytarget", "u_m_m_partytarget", "Alterado Para: u_m_m_partytarget");
		addModelOption("u_m_m_prolsec_01", "u_m_m_prolsec_01", "Alterado Para: u_m_m_prolsec_01");
		addModelOption("u_m_m_promourn_01", "u_m_m_promourn_01", "Alterado Para: u_m_m_promourn_01");
		addModelOption("u_m_m_rivalpap", "u_m_m_rivalpap", "Alterado Para: u_m_m_rivalpap");
		addModelOption("u_m_m_spyactor", "u_m_m_spyactor", "Alterado Para: u_m_m_spyactor");
		addModelOption("u_m_m_willyfist", "u_m_m_willyfist", "Alterado Para: u_m_m_willyfist");
		addModelOption("u_m_o_finguru_01", "u_m_o_finguru_01", "Alterado Para: u_m_o_finguru_01");
		addModelOption("u_m_o_taphillbilly", "u_m_o_taphillbilly", "Alterado Para: u_m_o_taphillbilly");
		addModelOption("u_m_o_tramp_01", "u_m_o_tramp_01", "Alterado Para: u_m_o_tramp_01");
		addModelOption("u_m_y_abner", "u_m_y_abner", "Alterado Para: u_m_y_abner");
		addModelOption("u_m_y_antonb", "u_m_y_antonb", "Alterado Para: u_m_y_antonb");
		addModelOption("u_m_y_babyd", "u_m_y_babyd", "Alterado Para: u_m_y_babyd");
		addModelOption("u_m_y_baygor", "u_m_y_baygor", "Alterado Para: u_m_y_baygor");
		addModelOption("u_m_y_burgerdrug_01", "u_m_y_burgerdrug_01", "Alterado Para: u_m_y_burgerdrug_01");
		addModelOption("u_m_y_chip", "u_m_y_chip", "Alterado Para: u_m_y_chip");
		addModelOption("u_m_y_cyclist_01", "u_m_y_cyclist_01", "Alterado Para: u_m_y_cyclist_01");
		addModelOption("u_m_y_fibmugger_01", "u_m_y_fibmugger_01", "Alterado Para: u_m_y_fibmugger_01");
		addModelOption("u_m_y_guido_01", "u_m_y_guido_01", "Alterado Para: u_m_y_guido_01");
		addModelOption("u_m_y_gunvend_01", "u_m_y_gunvend_01", "Alterado Para: u_m_y_gunvend_01");
		addModelOption("u_m_y_hippie_01", "u_m_y_hippie_01", "Alterado Para: u_m_y_hippie_01");
		addModelOption("u_m_y_imporage", "u_m_y_imporage", "Alterado Para: u_m_y_imporage");
		addModelOption("u_m_y_justin", "u_m_y_justin", "Alterado Para: u_m_y_justin");
		addModelOption("u_m_y_mani", "u_m_y_mani", "Alterado Para: u_m_y_mani");
		addModelOption("u_m_y_militarybum", "u_m_y_militarybum", "Alterado Para: u_m_y_militarybum");
		addModelOption("u_m_y_paparazzi", "u_m_y_paparazzi", "Alterado Para: u_m_y_paparazzi");
		addModelOption("u_m_y_party_01", "u_m_y_party_01", "Alterado Para: u_m_y_party_01");
		addModelOption("u_m_y_pogo_01", "u_m_y_pogo_01", "Alterado Para: u_m_y_pogo_01");
		addModelOption("u_m_y_prisoner_01", "u_m_y_prisoner_01", "Alterado Para: u_m_y_prisoner_01");
		addModelOption("u_m_y_proldriver_01", "u_m_y_proldriver_01", "Alterado Para: u_m_y_proldriver_01");
		addModelOption("u_m_y_rsranger_01", "u_m_y_rsranger_01", "Alterado Para: u_m_y_rsranger_01");
		addModelOption("u_m_y_sbike", "u_m_y_sbike", "Alterado Para: u_m_y_sbike");
		addModelOption("u_m_y_staggrm_01", "u_m_y_staggrm_01", "Alterado Para: u_m_y_staggrm_01");
		addModelOption("u_m_y_tattoo_01", "u_m_y_tattoo_01", "Alterado Para: u_m_y_tattoo_01");
		addModelOption("u_m_y_zombie_01", "u_m_y_zombie_01", "Alterado Para: u_m_y_zombie_01");
		normalMenuActions();
	}
}

void ModelsOutfits() // MODELS  // MENU MODELS //  PERSONALIZACAO
{
	addTitle("Personalizacao");
	addSubmenuOption("Acessorios ~r~>", 70);
	addSubmenuOption("Trajes ~r~>", 71);
	addSubmenuOption("Animais ~r~>", 72);
	addOption("Todos Modelos ~r~>");
	addOption("~b~Procurar Por Nome ~r~>");
	addOption("~o~Personagem Padrao MP");
	addOption("Medico");
	addOption("Paramedico");
	addOption("Salva Vidas");
	addOption("Bombeiros");
	addOption("Cientista");
	addOption("PM Masculino");
	addOption("PM Feminino");
	addOption("Sheriff Masculino");
	addOption("Sheriff Feminino");
	addOption("Florestal Masculino");
	addOption("Florestal Feminino");
	addOption("PM Motociclista");
	addOption("Policial Neve");
	addOption("SWAT");
	addOption("FBI");
	addOption("CIA Masculino");
	addOption("CIA Feminino");
	addOption("Exercito 1");
	addOption("Exercito 2");
	addOption("Exercito 3");
	addOption("Coronel Marinha");
	addOption("Marinha 1");
	addOption("Marinha 2");
	addOption("Marinha 3");
	addOption("Marinha 4");

	if (getOption() == 4)
	{
		changeSubmenu(73);
	}
	if (getOption() == 5)
	{
		KeyboardIndex = 1; // SKIN
		GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "Coloque O Nome Abaixo:", "", "", "", "", "", 20);
		g_bKeyBoardDisplayed = true;
	}
	if (getOption() == 6)
	{
		ModelString = "mp_m_freemode_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Personagem Padrao MP");
		isMainCharacter = true;
	}
	if (getOption() == 7)
	{
		ModelString = "s_m_m_doctor_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Medico");
		isMainCharacter = true;
	}
	if (getOption() == 8)
	{
		ModelString = "s_m_m_paramedic_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Paramedico");
		isMainCharacter = true;
	}
	if (getOption() == 9)
	{
		ModelString = "s_m_y_uscg_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Salva Vidas");
		isMainCharacter = true;
	}
	if (getOption() == 10)
	{
		ModelString = "s_m_y_fireman_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Bombeiro");
		isMainCharacter = true;
	}
	if (getOption() == 11)
	{
		ModelString = "s_m_m_scientist_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Cientista");
		isMainCharacter = true;
	}
	if (getOption() == 12)
	{
		ModelString = "s_m_y_cop_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~COP Masculino");
		isMainCharacter = true;
	}
	if (getOption() == 13)
	{
		ModelString = "s_f_y_cop_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~COP Feminino");
		isMainCharacter = true;
	}
	if (getOption() == 14)
	{
		ModelString = "s_m_y_sheriff_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Sheriff Masculino");
		isMainCharacter = true;
	}
	if (getOption() == 15)
	{
		ModelString = "s_f_y_sheriff_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Sheriff Feminino");
		isMainCharacter = true;
	}
	if (getOption() == 16)
	{
		ModelString = "s_m_y_ranger_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Florestal Masculino");
		isMainCharacter = true;
	}
	if (getOption() == 17)
	{
		ModelString = "s_f_y_ranger_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Florestal Feminino");
		isMainCharacter = true;
	}
	if (getOption() == 18)
	{
		ModelString = "s_m_y_hwaycop_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Policial Motociclista");
		isMainCharacter = true;
	}
	if (getOption() == 19)
	{
		ModelString = "s_m_m_snowcop_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Policial Neve");
		isMainCharacter = true;
	}
	else if (getOption() == 20)
	{
		ModelString = "s_m_y_swat_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~SWAT");
		isMainCharacter = false;
	}
	else if (getOption() == 21)
	{
		ModelString = "s_m_m_fibsec_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~FBI");
		isMainCharacter = false;
	}
	else if (getOption() == 22)
	{
		ModelString = "s_m_m_ciasec_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~CIA Masculina");
		isMainCharacter = false;
	}
	else if (getOption() == 23)
	{
		ModelString = "ig_michelle";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~CIA Feminino");
		isMainCharacter = false;
	}
	else if (getOption() == 24)
	{
		ModelString = "s_m_y_blackops_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Exercito 1");
		isMainCharacter = true;
	}
	else if (getOption() == 25)
	{
		ModelString = "s_m_y_blackops_02";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Exercito 2");
		isMainCharacter = true;
	}
	else if (getOption() == 26)
	{
		ModelString = "s_m_y_blackops_03";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Exercito 3");
		isMainCharacter = true;
	}
	else if (getOption() == 27)
	{
		ModelString = "s_m_m_marine_02";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Coronel Marinha");
		isMainCharacter = false;
	}
	else if (getOption() == 28)
	{
		ModelString = "s_m_y_marine_02";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Marinha 1");
		isMainCharacter = false;
	}
	else if (getOption() == 29)
	{
		ModelString = "s_m_y_marine_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Marinha 2");
		isMainCharacter = false;
	}
	else if (getOption() == 30)
	{
		ModelString = "s_m_m_marine_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Marinha 3");
		isMainCharacter = false;
	}
	else if (getOption() == 31)
	{
		ModelString = "s_m_y_marine_03";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Marinha 4");
		isMainCharacter = false;
	}
	normalMenuActions();
}

void Outfits()
{
	addTitle("Estilos");
	addOption("Policial");
	addOption("Ghost Gamer");
	addOption("Pinguim");
	addOption("Splinter Cell");
	addOption("Piloto");
	addOption("Soldado Noturno");
	addOption("Soldado Noturno Pesado");
	addOption("Malboro Ballas");
	addOption("Elfo");
	addOption("Vida Loka");
	addOption("Noel");
	addOption("Homem Neve");
	addOption("SWAT");

	if (getOption() == 1)
	{
		ResetAppearance();
		changeAppearance("HATS", 47, 0);
		changeAppearance("TORSO", 0, 0);
		changeAppearance("GLASSES", 6, 1);
		changeAppearance("LEGS", 35, 0);
		changeAppearance("SHOES", 25, 0);
		changeAppearance("SPECIAL1", 0, 0);
		changeAppearance("SPECIAL2", 58, 0);
		changeAppearance("TORSO2", 55, 0);
		drawNotification("Estilo: ~b~Policial");
	}
	else if (getOption() == 2)
	{
		ResetAppearance();
		changeAppearance("HATS", 28, 0);
		changeAppearance("TORSO", 17, 0);
		changeAppearance("TORSO2", 50, 0);
		changeAppearance("LEGS", 31, 0);
		changeAppearance("WATCHES", 24, 0);
		changeAppearance("SHOES", 24, 0);
		changeAppearance("MASK", 29, 0);
		drawNotification("Estilo: ~b~Ghost Gamer");
	}
	else if (getOption() == 3)
	{
		ResetAppearance();
		changeAppearance("TORSO", 0, 0);
		changeAppearance("MASK", 31, 0);
		changeAppearance("HATS", 0, 0);
		changeAppearance("HAIR", 0, 0);
		changeAppearance("GLASSES", 0, 0);
		changeAppearance("LEGS", 32, 0);
		changeAppearance("SHOES", 17, 0);
		changeAppearance("SPECIAL1", 0, 0);
		changeAppearance("SPECIAL2", 57, 0);
		changeAppearance("TEXTURES", 0, 0);
		changeAppearance("TORSO2", 51, 0);
		changeAppearance("HANDS", 0, 0);
		drawNotification("Estilo: ~b~Pinguim");
	}
	else if (getOption() == 4)
	{
		ResetAppearance();
		changeAppearance("TORSO", 96, 0);
		changeAppearance("MASK", 57, 0);
		changeAppearance("HATS", 0, 0);
		changeAppearance("HAIR", 23, 0);
		changeAppearance("GLASSES", 0, 1);
		changeAppearance("LEGS", 31, 0);
		changeAppearance("SHOES", 25, 0);
		changeAppearance("SPECIAL1", 0, 0);
		changeAppearance("SPECIAL2", 58, 0);
		changeAppearance("TEXTURES", 3, 0);
		changeAppearance("TORSO2", 50, 0);
		changeAppearance("HANDS", 0, 0);
		drawNotification("Estilo: ~b~Splinter Cell");
	}
	else if (getOption() == 5)
	{
		ResetAppearance();
		changeAppearance("HATS", 20, 0);
		changeAppearance("GLASSES", 6, 0);
		changeAppearance("TORSO", 16, 0);
		changeAppearance("LEGS", 30, 0);
		changeAppearance("HANDS", 39, 4);
		changeAppearance("SHOES", 24, 0);
		changeAppearance("SPECIAL2", 15, 0);
		changeAppearance("TORSO2", 48, 0);
		drawNotification("Estilo: ~b~Piloto");
	}
	else if (getOption() == 6)
	{
		ResetAppearance();
		changeAppearance("TORSO", 96, 0);
		changeAppearance("HATS", 40, 0);
		changeAppearance("MASK", 54, 0);
		changeAppearance("GLASSES", 0, 1);
		changeAppearance("LEGS", 34, 0);
		changeAppearance("SHOES", 25, 0);
		changeAppearance("SPECIAL1", 0, 0);
		changeAppearance("SPECIAL2", 15, 0);
		changeAppearance("TORSO2", 53, 0);
		changeAppearance("HANDS", 51, 0);
		drawNotification("Estilo: ~b~Soldado Noturno");
	}
	else if (getOption() == 7)
	{
		ResetAppearance();
		changeAppearance("HATS", 40, 0);
		changeAppearance("MASK", 28, 0);
		changeAppearance("TORSO", 44, 0);
		changeAppearance("LEGS", 34, 0);
		changeAppearance("HANDS", 45, 0);
		changeAppearance("SHOES", 25, 0);
		changeAppearance("SPECIAL2", 56, 1);
		changeAppearance("TORSO2", 53, 0);
		drawNotification("Estilo: ~b~Soldado Noturno Pesado");
	}
	else if (getOption() == 8)
	{
		ResetAppearance();
		changeAppearance("HATS", 10, 7);
		changeAppearance("GLASSES", 17, 6);
		changeAppearance("MASK", 51, 6);
		changeAppearance("TORSO", 14, 0);
		changeAppearance("LEGS", 5, 9);
		changeAppearance("SHOES", 9, 5);
		changeAppearance("SPECIAL2", 23, 0);
		changeAppearance("TORSO2", 7, 9);
		drawNotification("Estilo: ~b~Malboro Ballas");
	}
	else if (getOption() == 9)
	{
		ResetAppearance();
		changeAppearance("MASK", 34, 0);
		changeAppearance("TORSO", 4, 0);
		changeAppearance("LEGS", 19, 1);
		changeAppearance("SHOES", 22, 1);
		changeAppearance("SPECIAL1", 18, 0);
		changeAppearance("SPECIAL2", 28, 8);
		changeAppearance("TORSO2", 19, 1);
		drawNotification("Estilo: ~b~Elfo");
	}
	else if (getOption() == 10)
	{
		ResetAppearance();
		changeAppearance("HATS", 46, 1);
		changeAppearance("GLASSES", 17, 6);
		changeAppearance("MASK", 51, 7);
		changeAppearance("TORSO", 22, 0);
		changeAppearance("LEGS", 7, 0);
		changeAppearance("HANDS", 44, 0);
		changeAppearance("SHOES", 12, 6);
		changeAppearance("SPECIAL2", 15, 0);
		changeAppearance("TORSO2", 14, 7);
		drawNotification("Estilo: ~b~Vida Loka");
	}
	else if (getOption() == 11)
	{
		ResetAppearance();
		changeAppearance("MASK", 8, 0);
		changeAppearance("TORSO", 12, 0);
		changeAppearance("LEGS", 19, 0);
		changeAppearance("SHOES", 4, 4);
		changeAppearance("SPECIAL1", 10, 0);
		changeAppearance("SPECIAL2", 21, 2);
		changeAppearance("TORSO2", 19, 0);
		drawNotification("Estilo: ~b~Noel");
	}

	else if (getOption() == 11)
	{
		ResetAppearance();
		changeAppearance("MASK", 10, 0);
		changeAppearance("TORSO", 12, 0);
		changeAppearance("LEGS", 20, 0);
		changeAppearance("SHOES", 18, 1);
		changeAppearance("SPECIAL1", 24, 2);
		changeAppearance("SPECIAL2", 22, 4);
		changeAppearance("TORSO2", 25, 7);
		drawNotification("Estilo: ~b~Homem Neve");
	}
	else if (getOption() == 13)
	{
		ResetAppearance();
		changeAppearance("TORSO", 17, 0);
		changeAppearance("MASK", 56, 1);
		changeAppearance("HATS", 40, 0);
		changeAppearance("HAIR", 0, 0);
		changeAppearance("TORSO", 19, 0);
		changeAppearance("GLASSES", 0, 1);
		changeAppearance("LEGS", 34, 0);
		changeAppearance("WATCHES", 24, 0);
		changeAppearance("SHOES", 24, 0);
		changeAppearance("SPECIAL", 0, 0);
		changeAppearance("SPECIAL2", 58, 0);
		changeAppearance("SPECIAL3", 4, 1);
		changeAppearance("TORSO2", 55, 0);
		changeAppearance("HANDS", 0, 0);
		drawNotification("Estilo: ~b~SWAT");
	}
	normalMenuActions();
}

bool isHostileAnimal = false;

void Animals()
{
	addTitle("Animais");
	addOption("Chop");
	addOption("Rhesus");
	addOption("Chimp");
	addOption("Mountain Lion");
	addOption("Pogo");
	addOption("Boar");
	addOption("Pig");
	addOption("Coyote");
	addOption("Husky");
	addOption("Retreiver");
	addOption("Rotweiler");
	addOption("Shepard");
	addOption("Killer Whale");
	addOption("Humpback Whale");
	addOption("Dolphin");
	addOption("Hammerhead Shark");
	addOption("Cat");
	addOption("Cow");
	addOption("Seagull");
	addOption("Fish");
	addOption("Pigeon");
	addOption("Rat");
	addOption("Deer");
	addOption("Chicken");

	if (getOption() == 1)
	{
		ModelString = "a_c_chop";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Chop");
		isMainCharacter = false;
		isHostileAnimal = true;
	}
	else if (getOption() == 2)
	{
		ModelString = "a_c_rhesus";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Tan Monkey");
		isMainCharacter = false;
	}
	else if (getOption() == 3)
	{
		ModelString = "a_c_chimp";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Chimp");
		isMainCharacter = false;
	}
	else if (getOption() == 4)
	{
		ModelString = "a_c_mtlion";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Mountain Lion");
		isMainCharacter = false;
		isHostileAnimal = true;
	}
	else if (getOption() == 5)
	{
		ModelString = "u_m_y_pogo_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Pogo");
		isMainCharacter = false;
	}
	else if (getOption() == 6)
	{
		ModelString = "a_c_boar";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Boar");
		isMainCharacter = false;
	}
	else if (getOption() == 7)
	{
		ModelString = "a_c_pig";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Pig");
		isMainCharacter = false;
	}
	else if (getOption() == 8)
	{
		ModelString = "a_c_coyote";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Coyote");
		isMainCharacter = false;
	}
	else if (getOption() == 9)
	{
		ModelString = "a_c_husky";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Husky");
		isMainCharacter = false;
	}
	else if (getOption() == 10)
	{
		ModelString = "a_c_retriever";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Retriever");
		isMainCharacter = false;
	}
	else if (getOption() == 11)
	{
		ModelString = "a_c_rottweiler";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Rottweiler");
		isMainCharacter = false;
	}
	else if (getOption() == 12)
	{
		ModelString = "a_c_shepherd";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Shepherd");
		isMainCharacter = false;
	}
	else if (getOption() == 13)
	{
		ModelString = "A_C_KillerWhale";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Killer Whale");
		isMainCharacter = false;
	}
	else if (getOption() == 14)
	{
		ModelString = "A_C_HumpBack";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Humback Whale");
		isMainCharacter = false;
	}
	else if (getOption() == 15)
	{
		ModelString = "A_C_Dolphin";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Dolphin");
		isMainCharacter = false;
	}
	else if (getOption() == 16)
	{
		ModelString = "A_C_SharkHammer";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Hammer Head Shark");
		isMainCharacter = false;
	}
	else if (getOption() == 17)
	{
		ModelString = "A_C_Cat_01";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Cat");
		isMainCharacter = false;
	}
	else if (getOption() == 18)
	{
		ModelString = "A_C_Cow";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Cow");
		isMainCharacter = false;
	}
	else if (getOption() == 19)
	{
		ModelString = "a_c_seagull";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Seagull");
		isMainCharacter = false;
	}
	else if (getOption() == 20)
	{
		ModelString = "a_c_fish";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Fish");
		isMainCharacter = false;
	}
	else if (getOption() == 21)
	{
		ModelString = "a_c_pigeon";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Pigeon");
		isMainCharacter = false;
	}
	else if (getOption() == 22)
	{
		ModelString = "a_c_rat";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Rat");
		isMainCharacter = false;
	}
	else if (getOption() == 23)
	{
		ModelString = "a_c_deer";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Deer");
		isMainCharacter = false;
	}
	else if (getOption() == 24)
	{
		ModelString = "a_c_chickenhawk";
		LoadingPed = true;
		drawNotification("Modelo Alterado Para: ~b~Chicken");
		isMainCharacter = false;
	}
	normalMenuActions();
}
#pragma endregion
// ************ FIM MODELS ************ //
// ************ INICIO WEATHER ************ //

void WeatherOptions()
{
	addTitle("Opcoes de Clima");
	addOption("Setar para Meio Dia");
	addOption("Setar para Meia Noite");
	addOption("Setar para Ensolarado");
	addOption("Setar para Sol Forte");
	addOption("Setar para Nublado");
	addOption("Setar para Poluido");
	addOption("Setar para Nebuloso");
	addOption("Setar para Tempestade");
	addOption("Setar para Escuro");
	addOption("Setar para Pouca Neve");
	addOption("Setar para Nevando");
	addOption("Setar para Nevasca");

	if (getOption() == 1)
	{
		NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(12, 0, 0);
		drawNotification("Tempo Setado Para: ~b~Meio Dia");
	}
	if (getOption() == 2)
	{
		NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(0, 0, 0);
		drawNotification("Tempo Setado Para: ~b~Meia Noite");
	}
	if (getOption() == 3)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("CLEAR");
		drawNotification("Tempo Mudado Para: ~b~Ensolarado");
	}
	if (getOption() == 4)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("EXTRASUNNY");
		drawNotification("Tempo Mudado Para: ~b~Sol Forte");
	}
	if (getOption() == 5)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("CLOUDS");
		drawNotification("Tempo Mudado Para: ~b~Nublado");
	}
	if (getOption() == 6)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("SMOG");
		drawNotification("Tempo Mudado Para: ~b~Poluido");
	}
	if (getOption() == 7)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("FOGGY");
		drawNotification("Tempo Mudado Para: ~b~Nebuloso");
	}
	if (getOption() == 8)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("THUNDER");
		drawNotification("Tempo Mudado Para: ~b~Tempestade");
	}
	if (getOption() == 9)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("OVERCAST");
		drawNotification("Tempo Mudado Para: ~b~Escuro");
	}
	if (getOption() == 10)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("SNOWLIGHT");
		drawNotification("Tempo Mudado Para: ~b~Pouca Neve");
	}
	if (getOption() == 11)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("SNOW");
		drawNotification("Tempo Mudado Para: ~b~Nevando");
	}
	if (getOption() == 12)
	{
		GAMEPLAY::SET_OVERRIDE_WEATHER("BLIZZARD");
		drawNotification("Tempo Mudado Para: ~b~Nevasca");
	}
	normalMenuActions();
}

// ************ FIM WEATHER ************ //
// ************ INICIO MISC ************ //

#pragma region Animation Stuff

bool LoadingAnim = false;
bool LoadingAnimForPed = false;
char* Anim;
char* AnimID;
int PedToDoAnim;

void setAnimation(char* anim, char* animid)
{
	Anim = anim;
	AnimID = animid;
	LoadingAnim = true;
}
bool doAnimation(char* anim, char* animid)
{
	int pPlayer = PLAYER::PLAYER_PED_ID();
	RequestNetworkControl(pPlayer);
	STREAMING::REQUEST_ANIM_DICT(anim);
	if (STREAMING::HAS_ANIM_DICT_LOADED((anim)))
	{
		AI::TASK_PLAY_ANIM(pPlayer, anim, animid, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
		return true;
	}
	return false;
}
bool doAnimationPed(int pPlayer, char* anim, char* animid)
{
	RequestNetworkControl(pPlayer);
	STREAMING::REQUEST_ANIM_DICT(anim);
	if (STREAMING::HAS_ANIM_DICT_LOADED((anim)))
	{
		AI::TASK_PLAY_ANIM(pPlayer, anim, animid, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
		return true;
	}
	return false;
}

void clearArea()
{
	Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
	GAMEPLAY::CLEAR_AREA(Pos.x, Pos.y, Pos.z, 250, true, true, true, true);
	GAMEPLAY::CLEAR_AREA_OF_COPS(Pos.x, Pos.y, Pos.z, 250, 0);
	GAMEPLAY::CLEAR_AREA_OF_OBJECTS(Pos.x, Pos.y, Pos.z, 250, 0);
	GAMEPLAY::CLEAR_AREA_OF_VEHICLES(Pos.x, Pos.y, Pos.z, 250, 1, 1, 0, 0, 1);
	GAMEPLAY::CLEAR_AREA_OF_PEDS(Pos.x, Pos.y, Pos.z, 250, 0);
	GAMEPLAY::CLEAR_AREA_OF_PROJECTILES(Pos.x, Pos.y, Pos.z, 250, 0);
}
bool nametagesp = false;
void NameTagESP()
{
	Player playerPed = PLAYER::PLAYER_PED_ID();
	for (int i = 0; i < 100; i++)
	{
		Player playerHandle = PLAYER::GET_PLAYER_PED(i);
		Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0);
		Vector3 playerCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
		char* Name = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(i));

		if (ENTITY::DOES_ENTITY_EXIST(playerHandle))
		{
			float x1;
			float y1;

			BOOL screenCoords = GRAPHICS::_WORLD3D_TO_SCREEN2D(handleCoords.x, handleCoords.y, handleCoords.z, &x1, &y1);

			std::string playerName = PLAYER::GET_PLAYER_NAME(PLAYER::INT_TO_PLAYERINDEX(i));

			std::string nameSetupRed = "~HUD_COLOUR_RED~" + playerName;
			std::string nameSetupGreen = "~HUD_COLOUR_GREEN~" + playerName;

			char* playerInfoRed = new char[nameSetupRed.length() + 1];
			char* playerInfoGreen = new char[nameSetupGreen.length() + 1];

			std::strcpy(playerInfoRed, nameSetupRed.c_str());
			std::strcpy(playerInfoGreen, nameSetupGreen.c_str());

			UI::SET_TEXT_FONT(7);
			UI::SET_TEXT_SCALE(0.0, 0.40);
			UI::SET_TEXT_COLOUR(0, 255, 0, 255);
			UI::SET_TEXT_CENTRE(0);
			UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
			UI::SET_TEXT_EDGE(0, 0, 0, 0, 0);
			UI::_SET_TEXT_ENTRY("STRING");
			if (ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(playerPed, playerHandle, 17))
			{
				UI::_ADD_TEXT_COMPONENT_STRING(playerInfoGreen);
			}
			else
			{
				UI::_ADD_TEXT_COMPONENT_STRING(playerInfoRed);
			}
			UI::_DRAW_TEXT(x1, y1);
			UI::SET_TEXT_OUTLINE();
			UI::SET_TEXT_DROPSHADOW(5, 0, 78, 255, 255);
		}
	}
}
#pragma endregion

char* WalkType;
bool changingWalkType;
void WalkTypes()
{
	addTitle("Jeitos de Andar");
	addOption("Padrao Masculino");
	addOption("Padrao Feminino");
	addOption("Bebado");
	addOption("Gordo");
	addOption("Rico");
	addOption("Andarilho");
	addOption("Correndo");
	addOption("Manco");

	if (getOption() == 1)
	{
		WalkType = "move_m@generic";
		changingWalkType = true;
	}
	if (getOption() == 2)
	{
		WalkType = "move_f@generic";
		changingWalkType = true;
	}
	if (getOption() == 3)
	{
		WalkType = "move_m@drunk@verydrunk";
		changingWalkType = true;
	}

	if (getOption() == 4)
	{
		WalkType = "move_m@fat@a";
		changingWalkType = true;
	}
	if (getOption() == 5)
	{
		WalkType = "move_m@business@a";
		changingWalkType = true;
	}
	if (getOption() == 6)
	{
		WalkType = "move_m@hiking";
		changingWalkType = true;
	}
	if (getOption() == 7)
	{
		WalkType = "move_f@film_reel";
		changingWalkType = true;
	}
	if (getOption() == 8)
	{
		WalkType = "move_m@injured";
		changingWalkType = true;
	}
	if (changingWalkType)
	{
		STREAMING::REQUEST_ANIM_SET(WalkType);
		if (STREAMING::HAS_ANIM_SET_LOADED(WalkType))
		{
			PED::SET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), WalkType, 0);
			changingWalkType = false;
		}
	}
	normalMenuActions();
}

void Animations()
{
	addTitle("Animacoes");
	addSubmenuOption("Anim De Animais ~r~>", 152);
	addOption("Parar Animacoes");
	addOption("Dando");
	addOption("Comendo");
	addOption("Strip");
	addOption("Pole Dance");
	addOption("Fexoes");
	addOption("Abdominas");
	addOption("Comemorando");
	addOption("Eletrecutado"); // 10
	addOption("Suicidio");
	addOption("Banho");
	addOption("Paparizzi");
	addOption("Vendedor De Drogas");
	addOption("Bebendo Cafe");
	addOption("Tocando Instrumento");
	addOption("Flexionando");
	addOption("Aquecendo");
	addOption("Binoculos");
	addOption("Anotacoes"); // 20
	addOption("Barra");
	addOption("Levantamento");
	addOption("Virando Bife");
	addOption("Heroi");
	addOption("Pescando");
	addOption("Seguranca");
	addOption("Soprador De Grama");
	addOption("Filmando");
	addOption("Policial");
	addOption("Bebendo"); // 30
	addOption("Jogador De Golfe");
	addOption("Reparando");
	addOption("Fumando");
	addOption("Pregando");
	addOption("Tennis");
	addOption("Drill");

	if (getOption() == 2)
	{
		AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::PLAYER_PED_ID());
		drawNotification("Animacao: ~r~Pausada");
	}
	if (getOption() == 3)
	{
		setAnimation("rcmpaparazzo_2", "shag_loop_poppy");
	}
	if (getOption() == 4)
	{
		setAnimation("rcmpaparazzo_2", "shag_loop_a");
	}
	if (getOption() == 5)
	{
		setAnimation("mini@strip_club@private_dance@part1", "priv_dance_p1");
	}
	if (getOption() == 6)
	{
		setAnimation("mini@strip_club@pole_dance@pole_dance1", "pd_dance_01");
	}
	if (getOption() == 7)
	{
		setAnimation("amb@world_human_push_ups@male@base", "base");
	}
	if (getOption() == 8)
	{
		setAnimation("amb@world_human_sit_ups@male@base", "base");
	}
	if (getOption() == 9)
	{
		setAnimation("rcmfanatic1celebrate", "celebrate");
	}
	if (getOption() == 10)
	{
		setAnimation("ragdoll@human", "electrocute");
	}
	if (getOption() == 11)
	{
		setAnimation("mp_suicide", "pistol");
	}
	if (getOption() == 12)
	{
		setAnimation("mp_safehouseshower@male@", "male_shower_idle_b");
	}
	if (getOption() == 13)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_PAPARAZZI", 0, true);
		drawNotification("Animacao: ~b~Paparazzi");
	}
	if (getOption() == 14)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_DRUG_DEALER_HARD", 0, true);
		drawNotification("Animacao: ~b~Drug Dealer");
	}
	if (getOption() == 15)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_AA_COFFEE", 0, true);
		drawNotification("Animacao: ~b~Drinking Coffee");
	}
	if (getOption() == 16)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MUSICIAN", 0, true);
		drawNotification("Animacao: ~b~Playing an instrument");
	}
	if (getOption() == 17)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MUSCLE_FLEX", 0, true);
		drawNotification("Animacao: ~b~Flexing");
	}
	if (getOption() == 18)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_JOG_STANDING", 0, true);
		drawNotification("Animacao: ~b~Jogging");
	}
	if (getOption() == 19)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_BINOCULARS", 0, true);
		drawNotification("Animacao: ~b~Binocluars");
	}
	if (getOption() == 20)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_CLIPBOARD", 0, true);
		drawNotification("Animacao: ~b~Clipboard");
	}
	if (getOption() == 21)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_SEAT_MUSCLE_BENCH_PRESS", 0, true);
		drawNotification("Animacao: ~b~Bench Press");
	}
	if (getOption() == 22)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_MUSCLE_CHIN_UPS", 0, true);
		drawNotification("Animacao: ~b~Chin Ups");
	}
	if (getOption() == 23)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "PROP_HUMAN_BBQ", 0, true);
		drawNotification("Animacao: ~b~BBQ");
	}
	if (getOption() == 24)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SUPERHERO", 0, true);
		drawNotification("Animacao: ~b~Superhero");
	}
	if (getOption() == 25)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_STAND_FISHING", 0, true);
		drawNotification("Animacao: ~b~Fishing");
	}
	if (getOption() == 26)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SECURITY_SHINE_TORCH", 0, true);
		drawNotification("Animacao: ~b~Security");
	}
	if (getOption() == 27)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_GARDENER_LEAF_BLOWER", 0, true);
		drawNotification("Animacao: ~b~Leaf Blower");
	}
	if (getOption() == 28)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_MOBILE_FILM_SHOCKING", 0, true);
		drawNotification("Animacao: ~b~Film Shocking");
	}
	if (getOption() == 29)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_COP_IDLES", 0, true);
		drawNotification("Animacao: ~b~ Idle Cop");
	}
	if (getOption() == 30)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_DRINKING", 0, true);
		drawNotification("Animacao: ~b~Drinking");
	}
	if (getOption() == 31)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_GOLF_PLAYER", 0, true);
		drawNotification("Animacao: ~b~Golf Player");
	}
	if (getOption() == 32)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_WELDING", 0, true);
		drawNotification("Animacao: ~b~ Welding");
	}
	if (getOption() == 33)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_SMOKING_POT", 0, true);
		drawNotification("Animacao: ~b~Smoking W33d");
	}
	if (getOption() == 34)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_HAMMERING", 0, true);
		drawNotification("Animacao: ~b~Hammering");
	}
	if (getOption() == 35)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_TENNIS_PLAYER", 0, true);
		drawNotification("Animacao: ~b~Tennis");
	}
	if (getOption() == 36)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_HUMAN_CONST_DRILL", 0, true);
		drawNotification("Animacao: ~b~Drilling");
	}
	normalMenuActions();
}

void AnimalAnims()
{
	addTitle("Animacoes de Animais");
	addOption("parar Animacao");
	addOption("Boar - Grazing");
	addOption("Cat - Sleeping");
	addOption("Cow - Grazing");
	addOption("Coyote - Howl");
	addOption("Coyote - Wander");
	addOption("Chicken - Feeding");
	addOption("Deer - Grazing");
	addOption("Rottweiler - Bark");
	addOption("Retreiver - Bark");
	addOption("Shepard - Bark");
	addOption("Rottweiler - Sit");
	addOption("Retreiver - Sit");
	addOption("Shepard - Sit");
	addOption("Mt Lion - Rest");
	addOption("Mt Lion - Wander");
	addOption("Pig - Grazing");
	addOption("Cachorro Mijando");
	addOption("Cachorro Fudendo");

	if (getOption() == 1)
	{
		AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::PLAYER_PED_ID());
		drawNotification("Animacao Parada");
	}
	if (getOption() == 2)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_BOAR_GRAZING", 0, true);
	}
	if (getOption() == 3)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_CAT_SLEEPING_GROUND", 0, true);
	}
	if (getOption() == 4)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_COW_GRAZING", 0, true);
	}
	if (getOption() == 5)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_COYOTE_HOWL", 0, true);
	}
	if (getOption() == 6)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_COYOTE_WANDER", 0, true);
	}
	if (getOption() == 7)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_CHICKENHAWK_FEEDING", 0, true);
	}
	if (getOption() == 8)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_DEER_GRAZING", 0, true);
	}
	if (getOption() == 9)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_DOG_BARKING_ROTTWEILER", 0, true);
	}
	if (getOption() == 10)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_DOG_BARKING_RETRIEVER", 0, true);
	}
	if (getOption() == 11)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_DOG_BARKING_SHEPHERD", 0, true);
	}
	if (getOption() == 12)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_DOG_SITTING_ROTTWEILER", 0, true);
	}
	if (getOption() == 13)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_DOG_SITTING_RETRIEVER", 0, true);
	}
	if (getOption() == 14)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_DOG_SITTING_SHEPHERD", 0, true);
	}
	if (getOption() == 15)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_MOUNTAIN_LION_REST", 0, true);
	}
	if (getOption() == 16)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_MOUNTAIN_LION_WANDER", 0, true);
	}
	if (getOption() == 17)
	{
		AI::TASK_START_SCENARIO_IN_PLACE(PLAYER::PLAYER_PED_ID(), "WORLD_PIG_GRAZING", 0, true);
	}
	if (getOption() == 18)
	{
		setAnimation("creatures@rottweiler@move", "pee_right_idle");
	}
	if (getOption() == 19)
	{
		setAnimation("missfra0_chop_find", "hump_loop_chop");
	}

	normalMenuActions();
}
 // SPAWNAR OBJETOS

int SelectedObject;
void moveEntityX_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.x += 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
void moveEntityX_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.x -= 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
void moveEntityY_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.y += 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
void moveEntityY_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.y -= 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
void moveEntityZ_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.z += 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
void moveEntityZ_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.z -= 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
int SpawnedObject[20];
char* ObjectNameArray[20];
int SpawnedObjects;

bool objectIsFrozen[50];

void toggleFreeze(int index)
{
	if (objectIsFrozen[index])
	{
		ENTITY::FREEZE_ENTITY_POSITION(SpawnedObject[index], false);
		char buf[100];
		_snprintf(buf, sizeof(buf), "~g~Destravado: ~b~%s", ObjectNameArray[index]);
		drawNotification(buf);
		objectIsFrozen[index] = false;
	}
	else
	{
		ENTITY::FREEZE_ENTITY_POSITION(SpawnedObject[index], true);
		char buf[100];
		_snprintf(buf, sizeof(buf), "~r~Travado: ~b~%s", ObjectNameArray[index]);
		drawNotification(buf);
		objectIsFrozen[index] = true;
	}
}

#pragma endregion

#pragma region Entity Pitch Roll Yaw

void changeEntityRoll_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Roll += 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}
void changeEntityRoll_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Roll -= 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}
void changeEntityPitch_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Pitch += 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}
void changeEntityPitch_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Pitch -= 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}
void changeEntityYaw_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Yaw += 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}
void changeEntityYaw_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Yaw -= 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}

#pragma endregion

#pragma region Entity Control

void freezeEntity(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		ENTITY::FREEZE_ENTITY_POSITION(Handle, true);
	}
}

void unfreezeEntity(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		ENTITY::FREEZE_ENTITY_POSITION(Handle, false);
	}
}

void setStraight(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = 0;
		float Roll = 0;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_HEADING(Handle, Yaw + 0.1f);
	}
}
void DeleteEntity(int Handle)
{
	RequestNetworkControl(Handle);
	ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Handle, 1, 1);
	ENTITY::DELETE_ENTITY(&Handle);
}

void ObjectManager()
{
	addTitle("Spawnados");
	for (int i = 0; i < 20; i++)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[i]))
			addOption(ObjectNameArray[i]);
		else
			addOption("--------");
	}
	if (optionPress)
	{
		SelectedObject = currentOption - 1;
		changeSubmenu(155);
	}
	normalMenuActions();
}

bool Create_Object(char* ObjectName, char* Name, Vector3 Pos, bool custom = false, int hash = 0)
{
	if (custom)
	{
		if (STREAMING::IS_MODEL_IN_CDIMAGE(hash))
		{
			if (STREAMING::IS_MODEL_VALID(hash))
			{
				STREAMING::REQUEST_MODEL(hash);
				if (STREAMING::HAS_MODEL_LOADED(hash))
				{
					SpawnedObject[SpawnedObjects]
						= OBJECT::CREATE_OBJECT(hash, Pos.x, Pos.y - 5, Pos.z, 1, 0, 1);
					ObjectNameArray[SpawnedObjects] = Name;
					if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SpawnedObjects]))
					{
						SpawnedObjects++;
						if (SpawnedObjects >= 15)
							SpawnedObjects = 0;
						return true;
					}
					else
						return false;
				}
				else
					return false;
			}
		}
	}
	else
	{
		if (STREAMING::IS_MODEL_IN_CDIMAGE(GAMEPLAY::GET_HASH_KEY(ObjectName)))
		{
			if (STREAMING::IS_MODEL_VALID(GAMEPLAY::GET_HASH_KEY(ObjectName)))
			{
				STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(ObjectName));
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(ObjectName)))
				{
					SpawnedObject[SpawnedObjects]
						= OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY(ObjectName), coords.x,
							coords.y - 5, coords.z, 1, 0, 1);
					ObjectNameArray[SpawnedObjects] = ObjectName;
					if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SpawnedObjects]))
					{
						SpawnedObjects++;
						if (SpawnedObjects >= 15)
							SpawnedObjects = 0;
						return true;
					}
					else
						return false;
				}
				else
					return false;
			}
		}
	}
}

void ObjectEditor()
{
	addTitle("Editor");
	addOption("Esquerda");
	addOption("Direita");
	addOption("Tras");
	addOption("Frente");
	addOption("Cima");
	addOption("Baixo");
	addOption("Tomba - Baixo");
	addOption("Tomba - Cima");
	addOption("Gira - Direita Devagar");
	addOption("Gira - Esquerda Devagar");
	addOption("Gira - Direita");
	addOption("Gira - Esquerda");
	addOption("Congelar Objeto");
	addOption("Copiar Objeto");
	addOption("Deletar Objeto");

	if (getOption() == 1)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			moveEntityX_Plus(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Movendo para Esquerda: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 2)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			moveEntityX_Min(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Movendo para Direita: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 3)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			moveEntityY_Plus(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Movendo para Frente: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 4)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			moveEntityY_Min(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Movendo para Tras: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 5)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			moveEntityZ_Plus(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Movendo para Cima: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 6)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			moveEntityZ_Min(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Movendo para Baixo: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 7)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			changeEntityPitch_Plus(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Tombando para Baixo: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 8)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			changeEntityPitch_Min(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Tombando para Cima ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 9)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			changeEntityRoll_Plus(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Girando Vagarosamente Direta: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 10)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			changeEntityRoll_Min(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Girando Vagarosamente Esquerda: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 11)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			changeEntityYaw_Plus(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Girando para Direita: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 12)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			changeEntityYaw_Min(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Girando para Esquerda: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 13)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			toggleFreeze(SelectedObject);
		}
	}
	if (getOption() == 14)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			int hash = ENTITY::GET_ENTITY_MODEL(SpawnedObject[SelectedObject]);
			Vector3 pos = ENTITY::GET_ENTITY_COORDS(SpawnedObject[SelectedObject], true);
			pos.z += 0.60;
			Create_Object("", ObjectNameArray[SelectedObject], pos, true, hash);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Copiado: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}
	}
	if (getOption() == 15)
	{
		if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SelectedObject]))
		{
			DeleteEntity(SpawnedObject[SelectedObject]);
			char buf[100];
			_snprintf(buf, sizeof(buf), "Deletado: ~b~%s", ObjectNameArray[SelectedObject]);
			drawNotification(buf);
		}

	}
	normalMenuActions();
}

bool doAttachWeed = false;

void ObjectSpawner()
{
	addTitle("Spawnar Objetos");
	addSubmenuOption("Editor ~r~>", 154);
	addOption("UFO");
	addOption("Cone");
	addOption("Barreira");
	addOption("Container Grande");
	addOption("Container Pequeno");
	addOption("Helicoptero Quebrado");
	addOption("Heli Quebrado 2");
	addOption("Metro Quebrado");
	addOption("Aviao Quebrado");
	addOption("Aviao Quebrado 2");
	addOption("Aviao Quebrado 3");
	addOption("Boing Quberado");
	addOption("Caixao");
	addOption("Flores");
	addOption("Flores 2");
	addOption("Camera TV");
	addOption("Vidro");

	if (getOption() == 2)
	{
		ObjectString = "p_spinning_anus_s";
		LoadingObject = true;
	}
	if (getOption() == 3)
	{
		ObjectString = "prop_byard_net02";
		LoadingObject = true;
	}
	if (getOption() == 4)
	{
		ObjectString = "prop_barier_conc_05b";
		LoadingObject = true;
	}
	if (getOption() == 5)
	{
		ObjectString = "prop_container_01mb";
		LoadingObject = true;
	}
	if (getOption() == 6)
	{
		ObjectString = "prop_container_03b";
		LoadingObject = true;
	}
	if (getOption() == 7)
	{
		ObjectString = "prop_crashed_heli";
		LoadingObject = true;
	}
	if (getOption() == 8)
	{
		ObjectString = "prop_wrecked_buzzard";
		LoadingObject = true;
	}
	if (getOption() == 9)
	{
		ObjectString = "p_tram_crash_s";
		LoadingObject = true;
	}
	if (getOption() == 10)
	{
		ObjectString = "p_med_jet_01_s";
		LoadingObject = true;
	}
	if (getOption() == 11)
	{
		ObjectString = "p_cs_mp_jet_01_s";
		LoadingObject = true;
	}
	if (getOption() == 12)
	{
		ObjectString = "prop_med_jet_01";
		LoadingObject = true;
	}
	if (getOption() == 13)
	{
		ObjectString = "prop_shamal_crash";
		LoadingObject = true;
	}
	if (getOption() == 14)
	{
		ObjectString = "prop_coffin_02b";
		LoadingObject = true;
	}
	if (getOption() == 15)
	{
		ObjectString = "prop_road_memorial_01";
		LoadingObject = true;
	}
	if (getOption() == 16)
	{
		ObjectString = "prop_road_memorial_02";
		LoadingObject = true;
	}
	if (getOption() == 17)
	{
		ObjectString = "prop_tv_cam_02";
		LoadingObject = true;
	}
	if (getOption() == 18)
	{
		ObjectString = "prop_showroom_glass_1b";
		LoadingObject = true;
	}
	normalMenuActions();
}

bool radio = false;

void MiscOptions() // MISC // MENU MISC // OUTRAS OPCOES
{
	addTitle("Outras Opcoes");
	addOption("Limpar a Area");
	addBoolOption("Espiar Nomes", nametagesp);
	addBoolOption("Ligar Radio", radio);
	addSubmenuOption("Super Poderes ~r~>", 9);
	addSubmenuOption("Opcoes de Clima ~r~>", 10);
	addSubmenuOption("Jeitos de Andar ~r~>", 150);
	addSubmenuOption("Animacoes ~r~>", 151);
	addSubmenuOption("Spawnar Objetos ~r~>", 153);

	if (getOption() == 1)
	{
		clearArea();
	}
	if (getOption() == 2)
	{
		nametagesp = !nametagesp;
		if (nametagesp == true)
		{
			drawNotification("Espiar Nomes: ~b~Ativado");
		}
		else if (nametagesp == false)
		{
			drawNotification("Espiar Nomes: ~r~Desativado");
		}
	}
	if (getOption() == 3)
	{
		radio = !radio;
		if (radio == true)
		{
			radio = true;
			AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(true);
			AUDIO::SET_MOBILE_PHONE_RADIO_STATE(true);
			drawNotification("Radio: ~b~Ligado");
			drawNotification("Segure ~r~Q ~w~Para Alternar A Radio");
		}
		else if (radio == false)
		{
			AUDIO::SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(false);
			AUDIO::SET_MOBILE_PHONE_RADIO_STATE(false);
			drawNotification("Radio: ~r~Desligado");
		}
	}
	normalMenuActions();
}

// ************ FINAL MISC ************ //
// ************ INICIO FORCES ************ //

void DeletePed(int pedID)
{
	if (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(pedID))
		while (!NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(pedID));

	ENTITY::SET_ENTITY_AS_MISSION_ENTITY(pedID, 1, 1);
	PED::DELETE_PED(&pedID);
}
void makePedHostile(uint Ped, int Target, bool choporswat = false, bool isClone = false)
{
	if (choporswat)
	{
		AI::TASK_COMBAT_PED(Ped, PLAYER::GET_PLAYER_PED(selectedPlayer), 0, 16);
		PED::SET_PED_CAN_SWITCH_WEAPON(Ped, true);
	}
	else
	{
		if (isClone)
		{
			int Hash = ENTITY::GET_ENTITY_MODEL(Ped);
			DeletePed(Ped);

			STREAMING::REQUEST_MODEL(Hash);
			Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(Target), 1);
			if (STREAMING::HAS_MODEL_LOADED(Hash))
			{
				int newPed = PED::CREATE_PED(21, Hash, coords.x, coords.y, coords.z, 0, 1, 0);
				if (ENTITY::GET_ENTITY_HEALTH(newPed) == ENTITY::GET_ENTITY_MAX_HEALTH(newPed))
				{
					STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Hash);
					RequestNetworkControl(newPed);
					AI::TASK_COMBAT_PED(newPed, PLAYER::GET_PLAYER_PED(selectedPlayer), 0, 16);
					PED::SET_PED_CAN_SWITCH_WEAPON(Ped, true);
				}
			}
		}
		else
		{
			int TargetHandle = PLAYER::GET_PLAYER_PED(Target);
			AI::TASK_COMBAT_PED(Ped, TargetHandle, 0, 16);
		}
	}
}

bool forceexplodewave = false;
void ForceExplodeWave()
{
	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Vehicle veh[arrSize];
	veh[0] = numElements;
	int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
	if (veh != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
			{
				Vector3 Pos = ENTITY::GET_ENTITY_COORDS(veh[offsettedID], true);
				FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 29, 0.5f, true, true, 1.0f);
				char *dict = "rcmcollect_paperleadinout@";
				char *anim = "NENHUM";
				STREAMING::REQUEST_ANIM_DICT(dict);
				AI::TASK_PLAY_ANIM(PLAYER::PLAYER_PED_ID(), dict, anim, 1, 1, -1, 16, 0, false, 0, false);
			}
		}
	}
}

bool forcewave = false;
void ForceWave() 
{
	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Vehicle veh[arrSize];
	veh[0] = numElements;
	int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
	if (veh != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
			{
				ENTITY::APPLY_FORCE_TO_ENTITY(veh[offsettedID], 1, 9, 9, 0, 0, 0, 0, 1, true, true, true, true, true);
			}
		}
	}
}

bool mcriot = false;
void MCRiot()
{
	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Ped ped[arrSize];
	ped[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
	if (ped != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
			{
				int TargetHandle = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
				RequestNetworkControl(ped[offsettedID]);
				GiveWeaponPed(ped[offsettedID], 0x47757124);
				makePedHostile(ped[offsettedID], TargetHandle, true);
			}
		}
	}
}

bool mcdance = false;
void MCDance()
{
	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Ped ped[arrSize];
	ped[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
	if (ped != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
			{
				int TargetHandle = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
				RequestNetworkControl(ped[offsettedID]);
				char *dict = "mini@strip_club@private_dance@part1";
				char *anim = "priv_dance_p1";
				STREAMING::REQUEST_ANIM_DICT(dict);
				AI::TASK_PLAY_ANIM(ped[offsettedID], dict, anim, 1, 1, -1, 16, 0, false, 0, false);
			}
		}
	}
}
void MCPushups()
{

	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Ped ped[arrSize];
	ped[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
	if (ped != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
			{
				int TargetHandle = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
				RequestNetworkControl(ped[offsettedID]);
				char *dict = "amb@world_human_push_ups@male@base";
				char *anim = "base";
				STREAMING::REQUEST_ANIM_DICT(dict);
				AI::TASK_PLAY_ANIM(ped[offsettedID], dict, anim, 1, 1, -1, 16, 0, false, 0, false);
			}
		}
	}
}

void MCFollow()
{

	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Ped ped[arrSize];
	ped[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
	if (ped != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
			{
				int TargetHandle = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
				RequestNetworkControl(ped[offsettedID]);

				int my_group = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
				PED::SET_PED_AS_GROUP_LEADER(PLAYER::PLAYER_PED_ID(), my_group);
				PED::SET_PED_AS_GROUP_MEMBER(ped[offsettedID], my_group);
			}
		}
	}
}

void MCBurn()
{

	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Ped ped[arrSize];
	ped[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
	if (ped != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
			{
				int TargetHandle = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
				RequestNetworkControl(ped[offsettedID]);

				Vector3 Pos = ENTITY::GET_ENTITY_COORDS(ped[offsettedID], true);
				FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, 12, 5, true, true, 0);

			}
		}
	}
}
void MCWater()
{

	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Ped ped[arrSize];
	ped[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
	if (ped != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
			{
				int TargetHandle = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
				RequestNetworkControl(ped[offsettedID]);

				Vector3 Pos = ENTITY::GET_ENTITY_COORDS(ped[offsettedID], true);
				FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, 13, 5, false, true, 0);

			}
		}
	}
}
void MCPush()
{

	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Ped ped[arrSize];
	ped[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
	if (ped != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
			{
				int TargetHandle = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
				RequestNetworkControl(ped[offsettedID]);

				ENTITY::APPLY_FORCE_TO_ENTITY(ped[offsettedID], 1, 9, 9, 0, 0, 0, 0, 1, true, true, true, true, true);

				PED::SET_PED_CAN_RAGDOLL(ped[offsettedID], true);
				PED::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(ped[offsettedID], true);
				PLAYER::GIVE_PLAYER_RAGDOLL_CONTROL(ped[offsettedID], true);
				PED::SET_PED_RAGDOLL_ON_COLLISION(ped[offsettedID], true);

			}
		}
	}
}
void MCShock()
{

	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Ped ped[arrSize];
	ped[0] = numElements;
	int count = PED::GET_PED_NEARBY_PEDS(PLAYER::PLAYER_PED_ID(), ped, 1);
	if (ped != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (ped[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(ped[offsettedID]))
			{
				int TargetHandle = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
				RequestNetworkControl(ped[offsettedID]);

				Vector3 coords = ENTITY::GET_ENTITY_COORDS(ped[offsettedID], 0);
				GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x + 5, coords.y + 5, coords.z + 5, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("WEAPON_STUNGUN"), PLAYER::PLAYER_PED_ID(), 1, 1, 100);


			}
		}
	}
}

bool innerforce = false;
void inner_force() 
{
	if (getKeyPressed(VK_NUMPAD0) || (CONTROLS::IS_DISABLED_CONTROL_PRESSED(0, INPUT_SCRIPT_RB)))
	{
		const int numElements = 10;
		const int arrSize = numElements * 2 + 2;
		Vehicle veh[arrSize];
		veh[0] = numElements;
		//setAnimation("rcmpaparazzo_4", "lift_hands_in_air_loop");
		int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
		if (veh != NULL)
		{
			for (int i = 1; i <= count; i++)
			{
				int offsettedID = i;
				if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
				{
					ENTITY::APPLY_FORCE_TO_ENTITY(veh[offsettedID], 1, 0, 0, 5, 0, 0, 0, 1, false, true, true, true, true);
				}
			}
		}
	}
}

void ForceBoost()
{

	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Vehicle veh[arrSize];
	veh[0] = numElements;
	int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
	if (veh != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
			{
				RequestNetworkControl(veh[offsettedID]);
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(veh[offsettedID], 100.0f);
			}
		}
	}
}

void ForceThrow()
{
	const int numElements = 10;
	const int arrSize = numElements * 2 + 2;
	Vehicle veh[arrSize];
	veh[0] = numElements;
	//setAnimation("rcmpaparazzo_4", "lift_hands_in_air_loop");
	int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
	if (veh != NULL)
	{
		for (int i = 1; i <= count; i++)
		{
			int offsettedID = i;
			if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
			{
				ENTITY::APPLY_FORCE_TO_ENTITY(veh[offsettedID], 1, 0, 0, 5, 0, 0, 0, 1, false, true, true, true, true);
				//draw(sizeof(veh));
			}
		}
	}
}

void ForcePowers() // FORCES // SUPER PODERES
{
	addTitle("Super Poderes");
	addOption("Explodir Veiculos");
	addOption("Atirar os Veiculos");
	addOption("Desgorvernar Veiculos");
	addOption("Flutuar Veiculos");
	addOption("Queimar Pedestres");
	addOption("Dar Choque nos Pedestres");
	addOption("Flutuar Pedestres");
	addOption("Campo De Forca Nos Pedestres");
	addOption("Forcar pedestres: Enlouquecerem");
	addOption("Forcar pedestres: Me Seguir");
	addOption("Forcar pedestres: Dancar");
	addOption("Forcar pedestres: Flexionar");

	if (getOption() == 1)
	{
		ForceExplodeWave();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 2)
	{
		ForceBoost();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 3)
	{
		ForceWave();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 4)
	{
		ForceThrow();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 5)
	{
		MCBurn();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 6)
	{
		MCShock();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 7)
	{
		MCWater();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 8)
	{
		MCPush();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 9)
	{
		MCRiot();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 10)
	{
		MCFollow();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 11)
	{
		MCDance();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	if (getOption() == 12)
	{
		MCPushups();
		drawNotification("~b~Ativado !");
		drawNotification("~b~Segure para Continuar !");
	}
	normalMenuActions();
}

// ************ FINAL MISC ************ //

// ************ INICIO VEHICLE OPTIONS ************ //

void Neons()
{
	addTitle("Neons");
	addOption("");
}

bool hasXenon = false;
void ToggleXenon(int VehID)
{
	if (hasXenon)
	{
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 22, 0);
		drawNotification("Xenon Lights: ~r~Uninstalled");
		hasXenon = false;
	}
	else
	{
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 22, 1);
		drawNotification("Xenon Lights: ~b~Installed");
		hasXenon = true;
	}
}

bool testneon = false;
void TestNeon()
{
	int VehicleID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	Vector3 Coords = ENTITY::GET_ENTITY_COORDS(VehicleID, true);
	GRAPHICS::DRAW_SPOT_LIGHT(Coords.x, Coords.y, Coords.z, Coords.x, Coords.y, Coords.z, 255, 0, 0, 5.0f, 100, 100, 5.0f, 1);
}
void LightsNeons()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Toggle Xeenon Lights");
	addOption("Enable Neons");
	addOption("Red Neons");
	addOption("Green Neons");
	addOption("Blue Neons");
	addOption("Hot Pink");
	addOption("Yellow");
	addOption("Orange");
	addOption("Aqua");
	addOption("White");
	addOption("Magenta");
	addOption("Purple");
	addOption("Dark Green");
	addOption("Rose Red");
	//addBoolOption("Test Neons", testneon);

	if (getOption() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		ToggleXenon(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
	}
	if (getOption() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 0, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 2, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 3, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 4, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 5, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 6, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHT_ENABLED(VehID, 7, 1);

		drawNotification("Neons: ~b~Enabled");
	}

	if (getOption() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 1);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 255, 0, 0);
		drawNotification("Neons: Red");
	}
	if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 0, 255, 0);
		drawNotification("Neons: ~g~Green");
	}
	if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 0, 0, 255);
		drawNotification("Neons: ~b~Blue");
	}//226, 35, 157
	if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 226, 35, 157);
		drawNotification("Neons: ~b~Hot Pink");
	}
	if (getOption() == 7)//247, 244, 0
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 247, 244, 0);
		drawNotification("Neons: ~b~Yellow");
	}
	if (getOption() == 8)//247, 91, 0
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 247, 91, 0);
		drawNotification("Neons: ~b~Orange");
	}
	if (getOption() == 9)//40, 255, 255
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 40, 255, 255);
		drawNotification("Neons: ~b~Aqua");
	}
	if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 255, 255, 255);
		drawNotification("Neons: ~b~White");
	}
	if (getOption() == 11)//102, 0, 35
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 102, 0, 35);
		drawNotification("Neons: ~b~Magenta");
	}
	if (getOption() == 12)//53, 0, 83
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 53, 0, 83);
		drawNotification("Neons: ~b~Purple");
	}
	if (getOption() == 13)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 0, 118, 0);
		drawNotification("Neons: ~b~Dark Green");
	}
	if (getOption() == 14)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::_IS_VEHICLE_NEON_LIGHT_ENABLED(VehID, 8);
		VEHICLE::_SET_VEHICLE_NEON_LIGHTS_COLOUR(VehID, 161, 0, 0);
		drawNotification("Neons: ~b~Rose Red");
	}
	if (getOption() == 15)
	{
		testneon = !testneon;
	}
	normalMenuActions();
}

void CarWeaponLoop(char* Bullet)
{
	int VehicleHandle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	int launchDistance = 250;
	int weaponHash = GAMEPLAY::GET_HASH_KEY(Bullet);
	float launchSpeed = 1500.0f;

	float idkcoords1[] = { 0.6f, 0.6707f, 0.3711f };
	Vector3 getcoords1 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(VehicleHandle, 0.6f, 0.6707f, 0.3711f);

	float idkcoords2[] = { -0.6f, 0.6707f, 0.3711f };
	Vector3 getcoords2 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(VehicleHandle, 0.6f, 0.6707f, 0.3711f);

	float idkcoords3[] = { 0.6f, 5.0707f, 0.3711f };
	Vector3 getcoords3 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(VehicleHandle, 0.6f, 5.0707f, 0.3711f);

	float idkcoords4[] = { -0.6f, 5.0707f, 0.3711f };
	Vector3 getcoords4 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(VehicleHandle, 0.6f, 5.0707f, 0.3711f);
	float coords1[] = { getcoords1.x, getcoords1.y, getcoords1.z };
	float coords2[] = { getcoords2.x, getcoords2.y, getcoords2.z };
	float coords3[] = { getcoords3.x, getcoords3.y, getcoords3.z };
	float coords4[] = { getcoords4.x, getcoords4.y, getcoords4.z };
	GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(getcoords1.x, getcoords1.y, getcoords1.z, getcoords3.x, getcoords3.y, getcoords3.z, launchDistance, 0, weaponHash, PLAYER::PLAYER_PED_ID(), 1, 1, launchSpeed);
	GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(getcoords2.x, getcoords2.y, getcoords2.z, getcoords4.x, getcoords4.y, getcoords4.z, launchDistance, 0, weaponHash, PLAYER::PLAYER_PED_ID(), 1, 1, launchSpeed);
}
/*
bool hasAimingLasers = false;

void drawLasers()
{
	int VehHandle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	Vector3 idk1 = { 0.6f, 0.6707f, 0.3711f };
	Vector3 idk2 = { -0.6f, 0.6707f, 0.3711f };
	Vector3 idk3 = { 0.6f, 25.0707f, 0.3711f };
	Vector3 idk4 = { -0.6f, 25.0707f, 0.3711f };
	float idkcoords1[] = { idk1.x, idk1.y, idk1.z };
	float idkcoords2[] = { idk2.x, idk2.y, idk2.z };
	float idkcoords3[] = { idk3.x, idk3.y, idk3.z };
	float idkcoords4[] = { idk4.x, idk4.y, idk4.z };

	Vector3 getcoords1 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(VehHandle, idk1.x, idk1.y, idk1.z);
	float coords1[] = { getcoords1.x, getcoords1.y, getcoords1.z };
	Vector3 getcoords2 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(VehHandle, idk2.x, idk2.y, idk2.z);
	float coords2[] = { getcoords2.x, getcoords2.y, getcoords2.z };
	Vector3 getcoords3 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(VehHandle, idk3.x, idk3.y, idk3.z);
	float coords3[] = { getcoords3.x, getcoords3.y, getcoords3.z };
	Vector3 getcoords4 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(VehHandle, idk4.x, idk4.y, idk4.z);
	float coords4[] = { getcoords4.x, getcoords4.y, getcoords4.z };
	GRAPHICS::DRAW_LINE(idk1.x, idk1.y, idk1.z, idk2.x, idk2.y, idk2.z, 255, 0, 0, 255);
	GRAPHICS::DRAW_LINE(idk3.x, idk3.y, idk3.z, idk4.x, idk4.y, idk4.z, 255, 0, 0, 255);
} */

bool hasVehicleWeapons;
int Interval = 0;
int weapLoop = 0;
char* VehicleWeapons1;

void VehicleWeapons()
{
	DRAW_TEXTURE("shopui_title_carmod2", "shopui_title_carmod2", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addBoolOption("Bala Modificada", hasVehicleWeapons);
	addOption("Arma: Tank");
	addOption("Arma: Laser");
	addOption("Arma: Space Rocket");
	addOption("Arma: FireWork");
	addOption("Arma: Molotov");
	addOption("Arma: Flare");
	addOption("Arma: Sniper");

	if (getOption() == 1)
	{
		if (hasVehicleWeapons)
		{
			hasVehicleWeapons = false;
			WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::PLAYER_PED_ID(), true);
			drawNotification("Armas: ~r~Desativado");
		}
		else
		{
			Interval = 60;
			hasVehicleWeapons = true;
			drawNotification("Armas: ~b~Ativado");
			drawNotification("~b~NUMPAD 0 para atirar !");
		}
	}
	if (getOption() == 2)
	{
		Interval = 5;
		VehicleWeapons1 = "VEHICLE_WEAPON_TANK";
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x73F7C04B, 0, 20, 0);
		drawNotification("Tipo de Bala: ~b~Tank");
	}
	if (getOption() == 3)
	{
		Interval = 5;
		VehicleWeapons1 = "VEHICLE_WEAPON_PLAYER_LAZER";
		drawNotification("Tipo de Bala: ~b~Lazer");
	}
	if (getOption() == 4)
	{
		Interval = 5;
		VehicleWeapons1 = "VEHICLE_WEAPON_SPACE_ROCKET";
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xF8A3939F, 0, 20, 0);
		drawNotification("Tipo de Bala: ~b~Space Rocket");
	}
	if (getOption() == 5)
	{
		Interval = 5;
		VehicleWeapons1 = "WEAPON_FIREWORK";
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x7F7497E5, 0, 20, 0);
		drawNotification("Tipo de Bala: ~b~FireWork");
	}
	if (getOption() == 6)
	{
		Interval = 5;
		VehicleWeapons1 = "WEAPON_MOLOTOV";
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x24B17070, 0, 20, 0);
		drawNotification("Tipo de Bala: ~b~Molotov");
	}
	if (getOption() == 7)
	{
		Interval = 5;
		VehicleWeapons1 = "WEAPON_FLAREGUN";
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x47757124, 0, 20, 0);
		drawNotification("Tipo de Bala: ~b~ Flare");
	}
	if (getOption() == 8)
	{
		Interval = 5;
		VehicleWeapons1 = "WEAPON_HEAVYSNIPER";
		drawNotification("Tipo de Bala: ~b~Sniper");
	}
	normalMenuActions();
}

void WheelAccessories()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Stock Wheels");
	addOption("Custom Wheels");
	addOption("Bulletproof Tyres");
	addOption("White Smoke");
	addOption("Black Smoke");
	addOption("Blue Smoke");
	addOption("Yellow Smoke");
	addOption("Purple Smoke");
	addOption("Orange Smoke");
	addOption("Green Smoke");
	addOption("Red Smoke");
	addOption("Pink Smoke");
	addOption("Patriot Smoke");

	if (getOption() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 1, 0);
		drawNotification("Wheels: ~b~Stock");
	}
	if (getOption() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 1, 1);
		drawNotification("Wheels: ~b~Custom");
	}
	if (getOption() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(VehID, 0);
		drawNotification("Tires: ~b~Bulletproof");
	}
	if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 254, 254, 254);
		drawNotification("Tire Smoke: ~b~White");
	}
	if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 1, 1, 1);
		drawNotification("Tire Smoke: ~b~Black");
	}
	if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 0, 0, 255);
		drawNotification("Tire Smoke: ~b~Blue");
	}
	if (getOption() == 7)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 255, 255, 0);
		drawNotification("Tire Smoke: ~b~Yellow");
	}
	if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 150, 0, 255);
		drawNotification("Tire Smoke: ~b~Purple");
	}
	if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 255, 175, 0);
		drawNotification("Tire Smoke: ~b~Orange");
	}
	if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 0, 255, 0);
		drawNotification("Tire Smoke: ~b~Green");
	}
	if (getOption() == 11)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 255, 0, 0);
		drawNotification("Tire Smoke: ~b~Red");
	}
	if (getOption() == 12)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 255, 0, 255);
		drawNotification("Tire Smoke: ~b~Pink");
	}
	if (getOption() == 13)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(VehID);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 20, 1);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehID, 0, 0, 0);
		drawNotification("Tire Smoke: ~b~Patriot");
	}
	normalMenuActions();
}

void Wheels()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("High End", 81);
	addSubmenuOption("Lowrider", 82);
	addSubmenuOption("Muscle", 83);
	addSubmenuOption("Offroad", 84);
	addSubmenuOption("Sport", 85);
	addSubmenuOption("SUV", 86);
	addSubmenuOption("Tuner", 87);
	addSubmenuOption("Wheel Accessories", 88);
	normalMenuActions();
}

void HighEnd()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Shadow");
	addOption("Hypher");
	addOption("Blade");
	addOption("Diamond");
	addOption("Supa Gee");
	addOption("Chromatic Z");
	addOption("Obey RS");
	addOption("GT Chrome");
	addOption("Cheetah RR");
	addOption("Solar");
	addOption("Split Ten");
	addOption("Dash VIP");
	addOption("LozSpeed Ten");
	addOption("Carbon Shadow");
	addOption("Carbon S Racer");

	if (getOption() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 0, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Shadow");
	}
	if (getOption() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 1, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Hypher");
	}
	if (getOption() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 2, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Blade");
	}
	if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 3, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Diamond");
	}
	if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 4, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Supa Gee");
	}
	if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 5, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Chromatic Z");
	}
	if (getOption() == 7)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 7, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Obey RS");
	}
	if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 8, 0);
		drawNotification("Wheel Type: ~b~High End ~g~GT Chrome");
	}
	if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 9, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Cheetah RR");
	}
	if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 10, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Solar");
	}
	if (getOption() == 11)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 11, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Split Ten");
	}
	if (getOption() == 12)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 12, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Dash VIP");
	}
	if (getOption() == 13)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 13, 0);
		drawNotification("Wheel Type: ~b~High End ~g~LozSpeed Ten");
	}
	if (getOption() == 14)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 15, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Carbon Shadow");
	}
	if (getOption() == 15)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 7);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 19, 0);
		drawNotification("Wheel Type: ~b~High End ~g~Carbon S Racer");
	}
	normalMenuActions();
}

void Lowrider()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Flare");
	addOption("Wired");
	addOption("Triple Golds");
	addOption("Big Worm");
	addOption("Seven Fives");
	addOption("Split Six");
	addOption("Fresh Mesh");
	addOption("Lead Sliced");
	addOption("Turbine");
	addOption("Super Fin");
	addOption("Classic Rod");
	addOption("Dollar");
	addOption("Dukes");
	addOption("Low Five");
	addOption("Gooch");

	if (getOption() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 0, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~g~Flare");
	}
	else if (getOption() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 1, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Wired");
	}
	else if (getOption() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 2, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Triple Golds");
	}
	else if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 3, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Big Worm");
	}
	else if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 4, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Seven Fives");
	}
	else if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 5, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Split Six");
	}
	else if (getOption() == 7)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 6, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Fresh Mesh");
	}
	else if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 7, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Lead Sled");
	}
	else if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 8, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Turbine");
	}
	else if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 9, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Super Fin");
	}
	else if (getOption() == 11)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 10, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Classic Rod");
	}
	else if (getOption() == 12)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 11, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Dollar");
	}
	else if (getOption() == 13)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 12, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Dukes");
	}
	else if (getOption() == 14)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 13, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Low Five");
	}
	else if (getOption() == 15)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 2);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 14, 0);
		drawNotification("Wheel Type: ~b~Lowrider ~r~- ~g~Gooch");
	}
	normalMenuActions();
}

void MuscleWheels()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Classic Five");
	addOption("Dukes");
	addOption("Muscle Freak");
	addOption("Kracka");
	addOption("Azreal");
	addOption("Mecha");
	addOption("Black Top");
	addOption("Drag SPL");
	addOption("Revolver");
	addOption("Classic Rod");
	addOption("Spooner");
	addOption("Five Star");
	addOption("Old School");
	addOption("El Jefe");
	addOption("Mercenary");

	if (getOption() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 0, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Classic Five");
	}
	else if (getOption() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 1, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Dukes");
	}
	else if (getOption() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 2, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Muscle Freak");
	}
	else if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 3, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Kracka");
	}
	else if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 4, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Azreal");
	}
	else if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 5, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Mecha");
	}
	else if (getOption() == 7)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 6, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Black Top");
	}
	else if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 7, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Drag SPL");
	}
	else if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 8, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Revolver");
	}
	else if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 9, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Classic Rod");
	}
	else if (getOption() == 11)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 11, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Spooner");
	}
	else if (getOption() == 12)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 12, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Five Star");
	}
	else if (getOption() == 13)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 13, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Old School");
	}
	else if (getOption() == 14)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 14, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~El Jefe");
	}
	else if (getOption() == 15)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 1);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 17, 0);
		drawNotification("Wheel Type: ~b~Muscle ~r~- ~g~Mercenary");
	}
	normalMenuActions();
}

void OffroadWheels()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Raider");
	addOption("Mudslinger");
	addOption("Nevis");
	addOption("Cairngorm");
	addOption("Amazon");
	addOption("Challenger");
	addOption("Dune Basher");
	addOption("Five Star");
	addOption("Rock Crawler");
	addOption("Mil Spec Steelie");

	if (getOption() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 0, 0);
		drawNotification("Wheel Type: ~b~Offroad ~r~- ~g~Raider");
	}
	else if (getOption() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 1, 0);
		drawNotification("Wheel Type: ~b~Offroad ~r~- ~g~Mudslinger");
	}
	else if (getOption() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 2, 0);
		drawNotification("Wheel Type: ~b~Offroad ~r~- ~g~Nevis");
	}
	else if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 3, 0);
		drawNotification("Wheel Type: ~b~Offroad ~r~- ~g~Cairngorm");
	}
	else if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 4, 0);
		drawNotification("Wheel Type: ~b~Offroad ~r~- ~g~Amazon");
	}
	else if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 5, 0);
		drawNotification("Wheel Type: ~b~Offroad ~r~- ~g~Challenger");
	}
	else if (getOption() == 7)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 6, 0);
		drawNotification("Wheel Tyrawpe: ~b~Offroad ~r~- ~g~Dune Basher");
	}
	else if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 7, 0);
		drawNotification("Wheel Type: ~b~Offroad ~r~- ~g~Five Star");
	}
	else if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 8, 0);
		drawNotification("Wheel Type: ~b~Offroad ~r~- ~g~Rock Crawler");
	}
	else if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 4);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 9, 0);
		drawNotification("Wheel Type: ~b~Offroad ~r~- ~g~Mil Spec Steelie");
	}
	normalMenuActions();
}

void SportWheels()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Inferno");
	addOption("Deep Five");
	addOption("LozSpeed Mk. V");
	addOption("Diamond Cut");
	addOption("Feroci RR");
	addOption("FiftyNine");
	addOption("Synthetic Z");
	addOption("Organic Type 0");
	addOption("GT One");
	addOption("S Racer");
	addOption("Venum");
	addOption("Cosmo");
	addOption("Dash VIP");
	addOption("Ice Kid");
	addOption("Split Six");

	if (getOption() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 0, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Inferno");
	}
	else if (getOption() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 1, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Deep Five");
	}
	else if (getOption() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 2, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~LozSpeed Mk. V");
	}
	else if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 3, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Diamond Cut");
	}
	else if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 5, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Feroci RR");
	}
	else if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 6, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~FiftyNine");
	}
	else if (getOption() == 7)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 8, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Synthetic Z");
	}
	else if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 9, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Organic Type 0");
	}
	else if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 11, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~GT One");
	}
	else if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 15, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~S Racer");
	}
	else if (getOption() == 11)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 16, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Venum");
	}
	else if (getOption() == 12)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 17, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Cosmo");
	}
	else if (getOption() == 13)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 18, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Dash VIP");
	}
	else if (getOption() == 14)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 19, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Ice Kid");
	}
	else if (getOption() == 15)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 0);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 24, 0);
		drawNotification("Wheel Type: ~b~Sport ~r~- ~g~Split Six");
	}
	normalMenuActions();
}

void SUV()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Benefactor");
	addOption("Cosmo");
	addOption("Royal Six");
	addOption("Fagorme");
	addOption("Deluxe");
	addOption("Iced Out");
	addOption("Cognoscenti");
	addOption("Supernova");
	addOption("Obey RS");
	addOption("LozSpeed Baller");
	addOption("Extravaganzo");
	addOption("Split Six");
	addOption("Empowered");
	addOption("Sunrise");
	addOption("Dash VIP");

	if (getOption() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 1, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Benefactor");
	}
	else if (getOption() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 2, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Cosmo");
	}
	else if (getOption() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 4, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Royal Six");
	}
	else if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 5, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Fagorme");
	}
	else if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 6, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Deluxe");
	}
	else if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 7, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Iced Out");
	}
	else if (getOption() == 7)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 8, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Cognoscenti");
	}
	else if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 10, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Supernova");
	}
	else if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 11, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Obey RS");
	}
	else if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 12, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~LozSpeed Baller");
	}
	else if (getOption() == 11)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 13, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Extravaganzo");
	}
	else if (getOption() == 12)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 14, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Split Six");
	}
	else if (getOption() == 13)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 15, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Empowered");
	}
	else if (getOption() == 14)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 16, 0);
		drawNotification("Wheel Type: ~b~SUV ~r~- ~g~Sunrise");
	}
	else if (getOption() == 15)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 3);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 17, 0);
		("Wheel Type: ~b~SUV ~r~- ~g~Dash VIP", 2000);
	}
	normalMenuActions();
}

void Tuner()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addOption("Cosmo");
	addOption("Super Mesh");
	addOption("Driftmeister");
	addOption("El Quatro");
	addOption("Dubbed");
	addOption("Slideways");
	addOption("Stanced EG");
	addOption("Countersteer");
	addOption("Endo v.2 Dish");
	addOption("Choku-Dori");
	addOption("Chicane");
	addOption("Saisoku");
	addOption("Dished 8");
	addOption("Battle VIII");
	addOption("Rally Master");

	if (getOption() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 0, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Cosmo");
	}
	else if (getOption() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 1, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Super Mesh");
	}
	else if (getOption() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 4, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Driftmeister");
	}
	else if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 6, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~El Quatro");
	}
	else if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 7, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Dubbed");
	}
	else if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 9, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Slideways");
	}
	else if (getOption() == 7)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 11, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Stanced EG");
	}
	else if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 12, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Countersteer");
	}
	else if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 14, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Endo v.2 Dish");
	}
	else if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 16, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Choku-Dori");
	}
	else if (getOption() == 11)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 17, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Chicane");
	}
	else if (getOption() == 12)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 18, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Saisoku");
	}
	else if (getOption() == 13)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 19, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Dished Eight");
	}
	else if (getOption() == 14)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 22, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Battle VIII");
	}
	else if (getOption() == 15)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehID, 5);
		VEHICLE::SET_VEHICLE_MOD(VehID, 23, 23, 0);
		drawNotification("Wheel Type: ~b~Tuner ~r~- ~g~Rally Master");
	}
	normalMenuActions();
}

bool hasTurbo = false;
int VehID;

int Spoilers_ = 0;
int Tint_ = 0;
int Interior_ = 0;
int Grill_ = 0;
int Exhaust_ = 0;
int Skirts_ = 0;
int Suspension_ = 0;
int Hoods_ = 0;
int Bumpers_ = 0;
int Transmission_ = 0;
int Brakes_ = 0;
int Armor_ = 0;
int Colour_ = 0;
int Prim_ = 0;
int Sec_ = 0;
int Red_ = 0;
int Green_ = 0;
int Blue_ = 0;
int horns = 0;
void Colours()
{
	DRAW_TEXTURE("shopui_title_carmod", "shopui_title_carmod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addIntOption("Both Colour", &Colour_, 0, 150);
	addIntOption("Primary Color", &Prim_, 0, 150);
	addIntOption("Secondary Color", &Sec_, 0, 150);
	addIntOption("Vehicle Red", &Red_, 0, 255);
	addIntOption("Vehicle Green", &Green_, 0, 255);
	addIntOption("Vehicle Blue", &Blue_, 0, 255);

	if (getOptionint() == 1)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_COLOURS(VehID, Colour_, Colour_);
	}
	if (getOptionint() == 2)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_COLOURS(VehID, Prim_, Sec_);
	}
	if (getOptionint() == 3)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_COLOURS(VehID, Prim_, Sec_);
	}
	if (getOptionint() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, Red_, Green_, Blue_);
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh, Red_, Green_, Blue_);
	}
	if (getOptionint() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, Red_, Green_, Blue_);
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh, Red_, Green_, Blue_);
	}
	if (getOptionint() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(veh, Red_, Green_, Blue_);
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(veh, Red_, Green_, Blue_);
	}
	normalMenuActions();
}

char *Spoilers[] = { "Stock", "Sport", "Race", "Competition" };

void LosSantosCustoms()
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Wheel Shop ~r~>", 63);
	addSubmenuOption("Lights & Neons ~r~>", 64);
	addSubmenuOption("Colours ~r~>", 65);
	addIntOption("Armor", &Armor_, 0, 6);
	addIntOption("Brakes", &Brakes_, 0, 4);
	addIntOption("Transmission", &Transmission_, 0, 4);
	addOption("Turbo");
	addIntOption("Bumpers", &Bumpers_, 0, 3);
	addIntOption("Hoods", &Hoods_, 0, 5);
	addIntOption("Suspension", &Suspension_, 0, 5);//10
	addIntOption("Spoiler", &Spoilers_, 0, 6);
	addIntOption("SideSkirts", &Skirts_, 0, 6);
	addIntOption("Exhaust", &Exhaust_, 0, 6);
	addIntOption("Grill", &Grill_, 0, 3);
	addIntOption("Interior", &Interior_, 0, 1);
	addIntOption("Window Tint", &Tint_, 0, 5);
	addIntOption("Horns", &horns, 1, 32);

	if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Armor_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 16, Armor_, 0);
	}
	if (getOption() == 5)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Brakes_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 12, Brakes_, 0);
	}
	if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Transmission_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 13, Transmission_, 0);
	}
	if (getOption() == 7)
	{
		if (hasTurbo)
		{
			VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
			VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 18, 0);
			drawNotification("Turbo: ~r~Desinstalado");
			hasTurbo = false;
		}
		else
		{
			VEHICLE::SET_VEHICLE_MOD_KIT(VehID, 0);
			VEHICLE::TOGGLE_VEHICLE_MOD(VehID, 18, 1);
			drawNotification("Turbo: ~b~Instalado");
			hasTurbo = true;
		}
	}
	if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Bumpers_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 2, Bumpers_, 0);
	}

	if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Hoods_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 7, Hoods_, 0);
	}
	if (getOption() == 10)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Suspension_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 15, Suspension_, 0);
	}
	if (getOption() == 11)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Spoilers_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 0, Spoilers_, 0);
	}
	if (getOption() == 12)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Skirts_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 3, Skirts_, 0);
	}
	if (getOption() == 13)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Exhaust_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 4, Exhaust_, 0);
	}
	if (getOption() == 14)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Grill_);
		VEHICLE::SET_VEHICLE_MOD(VehID, 6, Grill_, 0);
	}
	if (getOption() == 15)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Interior_);
		VEHICLE::REMOVE_VEHICLE_MOD(VehID, Interior_);
	}
	else if (getOption() == 16)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, Tint_);
		VEHICLE::SET_VEHICLE_WINDOW_TINT(VehID, Tint_);
	}
	else if (getOption() == 17)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_MOD_KIT(VehID, horns);
		VEHICLE::SET_VEHICLE_MOD(VehID, 14, horns, 0);
	}
	normalMenuActions();
}

bool boost = false;
void BoostBind()
{
	if (getKeyPressed(VK_NUMPAD5))
	{
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
		AUDIO::SET_VEHICLE_BOOST_ACTIVE(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), 1);
		VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), 60);
		AUDIO::SET_VEHICLE_BOOST_ACTIVE(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), 0);
	}
}

bool brake = false;
void BrakeBind()
{
	if (getKeyPressed(VK_NUMPAD8))
	{
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
		VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0), 0);
	}
}

bool carjump = false;
void CarJump()
{
	if (getKeyPressed(VK_NUMPAD2))
	{
		int ped = PLAYER::PLAYER_PED_ID();
		int veh = PED::GET_VEHICLE_PED_IS_IN(ped, true);
		if (PED::IS_PED_IN_VEHICLE(ped, veh, true))
		{
			ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0, 0, 3, 0, 0, 0, 1, false, true, true, true, true);
		}
	}
}

void FixWashVehicleClient(int Client = PLAYER::PLAYER_ID())
{
	uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED(Client));
	VEHICLE::SET_VEHICLE_FIXED(Vehicle);
	VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(Vehicle);
	VEHICLE::SET_VEHICLE_DIRT_LEVEL(Vehicle, 0);
}

bool walldrive_ = false;
void walldrive()
{
	int ped = PLAYER::PLAYER_PED_ID();
	int veh = PED::GET_VEHICLE_PED_IS_IN(ped, true);
	if (PED::IS_PED_IN_VEHICLE(ped, veh, true))
	{
		ENTITY::APPLY_FORCE_TO_ENTITY(veh, 1, 0, 0, -0.4, 0, 0, 0, 1, true, true, true, true, true);
	}
}

bool HasNoDamage;
bool Inv;

void VehicleOptions() // OPCOES DO VEICULO
{
	DRAW_TEXTURE("shopui_title_supermod", "shopui_title_supermod", titlebox, 0.1175f, 0.23f, 0.083f, 0, 255, 255, 255, 255);
	addSubmenuOption("Los Santos Customs ~r~>", 61);
	addSubmenuOption("Armas do Veiculo ~r~>", 62);
	addOption("Consertar Veiculo");
	addOption("Tunar Veiculo");
	addOption("Deletar Veiculo");
	addOption("Pintar Aleatoriamente");
	addOption("Desvirar Veiculo");
	addBoolOption("Veiculo Indestrutivel", HasNoDamage);
	addBoolOption("Veiculo Invisivel", Inv);
	addBoolOption("Dirigir Na Parede", walldrive_);
	addBoolOption("Saltar", carjump);
	addBoolOption("Turbo", boost);
	addBoolOption("Super Freio", brake);
	addOption("Turbo ~b~[ Manual ]");


	if (getOption() == 3)
	{
		uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED(PLAYER::PLAYER_ID()));
		VEHICLE::SET_VEHICLE_FIXED(Vehicle);
		VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(Vehicle);
		VEHICLE::SET_VEHICLE_DIRT_LEVEL(Vehicle, 0);
		drawNotification("~b~Consertado");
	}
	else if (getOption() == 4)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		MaxUpgrades(VehID);
		drawNotification("~b~Tunado");
	}
	if (getOption() == 5)
	{
		int ped = PLAYER::PLAYER_PED_ID();
		int veh = PED::GET_VEHICLE_PED_IS_IN(ped, false);
		ENTITY::SET_ENTITY_AS_MISSION_ENTITY(veh, true, true);
		VEHICLE::DELETE_VEHICLE(&veh);
	}
	else if (getOption() == 6)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(VehID, GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
		drawNotification("~b~Pintado");
	}
	else if (getOption() == 7)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(VehID);
		drawNotification("~b~Veiculo Desvirado");
	}
	else if (getOption() == 8)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		RequestNetworkControl(VehID);
		if (HasNoDamage)
		{
			HasNoDamage = false;
			ENTITY::SET_ENTITY_INVINCIBLE(VehID, false);
			drawNotification("Veiculo: ~r~Vulveravel !");
		}
		else
		{
			HasNoDamage = true;
			ENTITY::SET_ENTITY_INVINCIBLE(VehID, true);
			drawNotification("~r~Veiculo: Invulneravel !");
		}
	}
	else if (getOption() == 9)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		RequestNetworkControl(VehID);
		if (ENTITY::IS_ENTITY_VISIBLE(VehID))
		{
			Inv = true;
			ENTITY::SET_ENTITY_VISIBLE(VehID, false, 0);
			drawNotification("~r~ Veiculo: Invisivel !");
		}
		else
		{
			Inv = false;
			ENTITY::SET_ENTITY_VISIBLE(VehID, true, 0);
			drawNotification("Veiculo: ~b~Visivel !");
		}
	}
	else if (getOption() == 10)
	{
		walldrive_ = !walldrive_;
		drawNotification("~b~Pegue um Monster Truck de Preferencia !");
		drawNotification("~b~Dica: Suba de Re !");
	}
	else if (getOption() == 11)
	{
		carjump = !carjump;
		drawNotification("NUMPAD ~r~2 ~w~Para Ativar !");
	}
	else if (getOption() == 12)
	{
		boost = !boost;
		drawNotification("NUMPAD ~r~5 ~w~Para Ativar !");
	}
	else if (getOption() == 13)
	{
		brake = !brake;
		drawNotification("NUMPAD ~r~8 ~w~Para Ativar");
	}
	else if (getOption() == 14)
	{
		int VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		RequestNetworkControl(VehID);
		AUDIO::SET_VEHICLE_BOOST_ACTIVE(VehID, 1);
		VEHICLE::SET_VEHICLE_FORWARD_SPEED(VehID, 100.0f);
		AUDIO::SET_VEHICLE_BOOST_ACTIVE(VehID, 0);
		drawNotification("~b~Impulsonado");
	}
	normalMenuActions();
}

// ************ FIM VEHICLE OPTIONS ************ //

// ************ INICIO PLAYERS LIST ************ //
void PlayersList()
{
	addTitle("Lista de Jogadores");

	Player playerPed = PLAYER::PLAYER_PED_ID();
	for (int i = 0; i < 100; i++)
	{
		addOption(PLAYER::GET_PLAYER_NAME(i));
		Player playerHandle = PLAYER::GET_PLAYER_PED(i);
		Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0);
		Vector3 playerCoords = ENTITY::GET_ENTITY_COORDS(playerPed, 0);
	}
	if (optionPress && PLAYER::IS_PLAYER_PLAYING(currentOption - 1))
	{
		selectedPlayer = currentOption - 1;
		changeSubmenu(30); // Vai Para ~> PlayerListPage2
	}
	normalMenuActions();
}

#pragma region Client Mods

void GiveWeaponsClient() // DAR ARMAS
{
	uint Weapons[] = { 0x92A27487 , 0x958A4A8F , 0xF9E6AA4B , 0x84BD7BFD, 0x8BB05FD7 , 0x440E4788, 0x4E875F73, 0xF9DCBF2D, 0xD8DF3C3C, 0x99B507EA, 0xDD5DF8D9, 0xDFE37640, 0x678B81B1, 0x19044EE0, 0xCD274149, 0x94117305, 0x3813FC08, 0x1B06D571, 0xBFE256D4, 0x5EF9FEC4, 0x22D8FE39, 0x3656C8C1, 0x99AEEB3B, 0xBFD21232, 0x88374054, 0xD205520E, 0x83839C4, 0x47757124, 0xDC4DB296, 0xC1B3C3D1, 0xCB96392F, 0x97EA20B8 , 0xAF3696A1, 0x2B5EF5EC, 0x917F6C8C, 0x57A4368C, 0x13532244, 0x2BE6766B, 0x78A97CD0, 0xEFE7E2DF, 0x0A3D4D34, 0xDB1AA450, 0xBD248B55, 0x476BF155, 0x1D073A89, 0x555AF99A, 0x7846A318, 0xE284C527, 0x9D61E50F, 0xA89CB99E, 0x3AABBBAA, 0xEF951FBB, 0x12E82D3D, 0x5A96BA4, 0xBFEFFF6D, 0x394F415C, 0x83BF0278, 0xFAD1F1C9, 0xAF113F99, 0xC0A3098D, 0x969C3D67, 0x7F229F94, 0x84D6FAFD, 0x624FE830, 0x9D1F17E6, 0x9D07F764, 0x7FD62962, 0xDBBD7280, 0x61012683, 0x05FC3C11, 0x0C472FE2, 0xA914799, 0xC734385A, 0x6A6C02E0, 0xB1CA77B1, 0xA284510B, 0x4DD2DC56, 0x42BF8A85, 0x7F7497E5, 0x6D544C99, 0x63AB0442, 0x0781FE4A, 0xB62D1F67, 0x93E220BD, 0xA0973D5E, 0x24B17070, 0x2C3731D9, 0xAB564B93, 0x787F0BB, 0xBA45E8B8, 0x23C9F95C, 0xFDBC8A50, 0x497FACC3, 0x34A67B97, 0xFBAB5776, 0x060EC506, 0xBA536372 };
	for (int i = 0; i < (sizeof(Weapons) / 4); i++)
	{
		WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), Weapons[i], 250, false);
		WAIT(10);
	}
}

void TakeWeaponsClient() // REMOVER ARMAS
{
	uint Weapons[] = { 0x92A27487 , 0x958A4A8F , 0xF9E6AA4B , 0x84BD7BFD, 0x8BB05FD7 , 0x440E4788, 0x4E875F73, 0xF9DCBF2D, 0xD8DF3C3C, 0x99B507EA, 0xDD5DF8D9, 0xDFE37640, 0x678B81B1, 0x19044EE0, 0xCD274149, 0x94117305, 0x3813FC08, 0x1B06D571, 0xBFE256D4, 0x5EF9FEC4, 0x22D8FE39, 0x3656C8C1, 0x99AEEB3B, 0xBFD21232, 0x88374054, 0xD205520E, 0x83839C4, 0x47757124, 0xDC4DB296, 0xC1B3C3D1, 0xCB96392F, 0x97EA20B8 , 0xAF3696A1, 0x2B5EF5EC, 0x917F6C8C, 0x57A4368C, 0x13532244, 0x2BE6766B, 0x78A97CD0, 0xEFE7E2DF, 0x0A3D4D34, 0xDB1AA450, 0xBD248B55, 0x476BF155, 0x1D073A89, 0x555AF99A, 0x7846A318, 0xE284C527, 0x9D61E50F, 0xA89CB99E, 0x3AABBBAA, 0xEF951FBB, 0x12E82D3D, 0x5A96BA4, 0xBFEFFF6D, 0x394F415C, 0x83BF0278, 0xFAD1F1C9, 0xAF113F99, 0xC0A3098D, 0x969C3D67, 0x7F229F94, 0x84D6FAFD, 0x624FE830, 0x9D1F17E6, 0x9D07F764, 0x7FD62962, 0xDBBD7280, 0x61012683, 0x05FC3C11, 0x0C472FE2, 0xA914799, 0xC734385A, 0x6A6C02E0, 0xB1CA77B1, 0xA284510B, 0x4DD2DC56, 0x42BF8A85, 0x7F7497E5, 0x6D544C99, 0x63AB0442, 0x0781FE4A, 0xB62D1F67, 0x93E220BD, 0xA0973D5E, 0x24B17070, 0x2C3731D9, 0xAB564B93, 0x787F0BB, 0xBA45E8B8, 0x23C9F95C, 0xFDBC8A50, 0x497FACC3, 0x34A67B97, 0xFBAB5776, 0x060EC506, 0xBA536372 };
	for (int i = 0; i < (sizeof(Weapons) / 4); i++)
	{
		WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), Weapons[i]);
		WAIT(10);
	}
}

void stopTasksPed(int Ped)
{
	AI::CLEAR_PED_TASKS_IMMEDIATELY(Ped);
}

void Cloning()
{
	addTitle("Clones");
	addOption("Paparazzi");
	addOption("Musico");
	addOption("Gay");
	addOption("Lanterna");
	addOption("Soprador");
	addOption("Flexionando");
	addOption("Yoga");
	addOption("Turista");
	addOption("Stripper");
	addOption("Inimigo - Taco");
	addOption("Inimigo - Rifle");
	
	if (getOption() == 1)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		AI::TASK_START_SCENARIO_IN_PLACE(Ped, "WORLD_HUMAN_PAPARAZZI", 0, true);
		drawNotification("Jogador Clonado - ~b~Paparazzi");
	}
	else if (getOption() == 2)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		AI::TASK_START_SCENARIO_IN_PLACE(Ped, "WORLD_HUMAN_MUSICIAN", 0, true);
		drawNotification("Jogador Clonado - ~b~Musico");
	}
	else if (getOption() == 3)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		AI::TASK_START_SCENARIO_IN_PLACE(Ped, "WORLD_HUMAN_PROSTITUTE_HIGH_CLASS", 0, true);
		drawNotification("Jogador Clonado - ~b~Gay");
	}
	else if (getOption() == 4)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		AI::TASK_START_SCENARIO_IN_PLACE(Ped, "WORLD_HUMAN_SECURITY_SHINE_TORCH", 0, true);
		drawNotification("Jogador Clonado - ~b~Lanterna");
	}
	else if (getOption() == 5)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		AI::TASK_START_SCENARIO_IN_PLACE(Ped, "WORLD_HUMAN_GARDENER_LEAF_BLOWER", 0, true);
		drawNotification("Jogador Clonado - ~b~Soprador");
	}
	else if (getOption() == 6)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		AI::TASK_START_SCENARIO_IN_PLACE(Ped, "WORLD_HUMAN_SIT_UPS", 0, true);
		drawNotification("Jogador Clonado - ~b~Flexionando");
	}
	else if (getOption() == 7)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		AI::TASK_START_SCENARIO_IN_PLACE(Ped, "WORLD_HUMAN_YOGA", 0, true);
		drawNotification("Jogador Clonado - ~b~Yoga");
	}
	else if (getOption() == 8)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		AI::TASK_START_SCENARIO_IN_PLACE(Ped, "WORLD_HUMAN_TOURIST_MOBILE", 0, true);
		drawNotification("Jogador Clonado - ~b~Turista");
	}
	else if (getOption() == 9)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		PedToDoAnim = Ped;
		RequestNetworkControl(Ped);
		Anim = "mini@strip_club@private_dance@part1";
		AnimID = "priv_dance_p1";
		LoadingAnimForPed = true;
		drawNotification("Jogador Clonado - ~b~Stripper");
	}
	else if (getOption() == 10)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		GiveWeaponPed(Ped, 0x958A4A8F);
		makePedHostile(Ped, PLAYER::GET_PLAYER_PED(selectedPlayer), true);
		drawNotification("Jogador Clonado - ~b~Inimigo com Taco");
	}
	else if (getOption() == 11)
	{
		int Ped = PED::CLONE_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 1);
		RequestNetworkControl(Ped);
		GiveWeaponPed(Ped, 0x83BF0278);
		makePedHostile(Ped, PLAYER::GET_PLAYER_PED(selectedPlayer), true);
		drawNotification("Jogador Clonado - ~b~Inimigo com Rifle");
	}
	normalMenuActions();
}

/*else if (getOption() == 12)
{
CloneVehicle();
drawNotification("Player ~b~Veiculo Clonado");
} */

bool freezeplayer;

int Explosion_ = 0;
int Wanted = 0;

void doForceField(int client)
{
	Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(client), true);
	FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 80, FLT_MAX, false, true, 0.0f);
	FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 75, FLT_MAX, false, true, 0.0f);
}

bool forcefield = false;
void ForceField()
{
	Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true);
	FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 29, 5, false, true, 0.0f);
	FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 26, 5, false, true, 0.0f);
}

bool spawnobjonplayer;
char *onplayerobj;
void CREATE_OBJONPLAYER(char *modelhash)
{
	onplayerobj = modelhash;
	spawnobjonplayer = true;
}
void CREATE_OBJONPLAYER_looped()
{
	if (spawnobjonplayer)
	{
		int model = GAMEPLAY::GET_HASH_KEY(onplayerobj);
		if (STREAMING::IS_MODEL_IN_CDIMAGE(model))
		{
			STREAMING::REQUEST_MODEL(model);
			if (STREAMING::HAS_MODEL_LOADED(model))
			{
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
				OBJECT::CREATE_OBJECT(model, coords.x, coords.y, coords.z -1.0f, 1, 0, 1);
				spawnobjonplayer = false;
			}
		}
	}
}

bool explodirveh;
void ExplodirVeh()
{
	Ped playerPed = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			if (ENTITY::DOES_ENTITY_EXIST(playerVeh))
			{
				VEHICLE::SET_VEHICLE_TIMED_EXPLOSION(playerVeh, playerPed, true);
			}
			explodirveh = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		explodirveh = false;
	}
}

void dropPickup(Vector3 Location, char* PickupModel, char* PickupBehavior, int PickupAmount, char* DisplayName, int Client)
{
	int Model = GAMEPLAY::GET_HASH_KEY(PickupModel);
	int Behavior = GAMEPLAY::GET_HASH_KEY(PickupBehavior);
	STREAMING::REQUEST_MODEL(Model);
	if (STREAMING::HAS_MODEL_LOADED(Model))
	{
		OBJECT::CREATE_AMBIENT_PICKUP(Behavior, Location.x, Location.y, Location.z, 0, PickupAmount, Model, 0, 1);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Model);
	}
}

bool ForcaMag;

void Trolling() // TROLL // MENU TROLL // OPCOES TROLLS
{
	addTitle("Trollar / Ajudar");
	addOption("~o~Dar Todas As Armas Ao Jogador");
	addOption("~g~Destruir Todas As Armas Do jogador");
	addBoolOption("Travar Jogador", freezeplayer);
	addOption("Prender Jogador");
	addBoolOption("Forca Magnetica", ForcaMag);
	addOption("Prender No Galpao ~r~[ C/Veic ] ");
	addOption("~b~Dropar: Vida");
	addOption("~b~Dropar: Colete");
	addOption("~b~Dropar: Faca");
	addOption("~y~Dar Faca");
	addOption("~y~Dar Uma Pistola");
	addOption("~y~Dar Uma SMG");
	addOption("~y~Dar Uma AK-47");
	addOption("Clonar ~r~>");
	addOption("Veiculo do Jogador ~r~>");

	if (getOption() == 1)
	{
		GiveWeaponsClient();
		drawNotification("~b~Voce deu todas as armas ao jogador");
	}
	if (getOption() == 2)
	{
		TakeWeaponsClient();
		drawNotification("~b~Voce retirou todas as armas do jogador");
	}
	if (getOption() == 3)
	{
		freezeplayer = !freezeplayer;
	}
	if (getOption() == 4)
	{
		CREATE_OBJONPLAYER("prop_food_van_01");
	}
	if (getOption() == 5)
	{
		forcefield = !forcefield;
		if (forcefield == true)
		{
			ForcaMag = true;
			drawNotification("Forca Magnetica: ~b~Ativado");

		}
		else if (forcefield == false)
		{
			ForcaMag = false;
			drawNotification("Forca Magnetica: ~r~Desativado");
		}
	}
	if (getOption() == 6)
	{
		TeleportClientHook(selectedPlayer, -1991.348, 3200.953, 32.39795);
		drawNotification("Jogador Teleportado para o ~b~Hangar Fechado~w~.");
	}
	if (getOption() == 7)
	{
		dropPickup(ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1), "prop_ld_health_pack", "PICKUP_HEALTH_STANDARD", 1, "Health", selectedPlayer);
	}
	if (getOption() == 8)
		{
		dropPickup(ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1), "prop_armour_pickup", "PICKUP_ARMOUR_STANDARD", 1, "Armor", selectedPlayer);
		}
	if (getOption() == 9)
	{
		dropPickup(ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1), "prop_knife", "PICKUP_WEAPON_KNIFE", 10, "Knife", selectedPlayer);
	}
	if (getOption() == 10)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), 0x99B507EA, 1, 1, 1); // FACA
	}
	if (getOption() == 11)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), 0x1B06D571, 250, 1, 1); // PISTOLA
	}
	if (getOption() == 12)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), 0x2BE6766B, 250, 1, 1); // SMG
	}
	if (getOption() == 13)
	{
		WEAPON::GIVE_WEAPON_TO_PED(PLAYER::GET_PLAYER_PED(selectedPlayer), 0xBFEFFF6D, 250, 1, 1); // AK
	}
	if (getOption() == 14)
	{
		changeSubmenu(401);
	}
	if (getOption() == 15)
	{
		changeSubmenu(406);
	}
	normalMenuActions();
}

// BAD PEDS // PEDESTRES LOUCOS // TROLL

bool Onca = false; // INIMIGO ON�A // COYOTE
bool spawnonca()
{
	if (Onca)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("a_c_mtlion"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("a_c_mtlion")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("a_c_mtlion"), coords.x, coords.y +15, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("a_c_mtlion"));
				RequestNetworkControl(Ped);
				ENTITY::SET_ENTITY_INVINCIBLE(Ped, true); // GODMODE
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

bool SegurancaCassetete = false; // INIMIGO SEGURAN�A COM CASSETETE
bool segurancacassetete()
{
	if (SegurancaCassetete)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_m_security_01"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_m_security_01")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_m_security_01"), coords.x, coords.y + 15, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("s_m_m_security_01"));
				RequestNetworkControl(Ped);
				GiveWeaponPed(Ped, 0x678B81B1);
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

bool BombeiroMachado = false; // INIMIGO BOMBEIRO COM MACHADO
bool bombeiromachado()
{
	if (BombeiroMachado)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_fireman_01"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_fireman_01")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_fireman_01"), coords.x, coords.y +15, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("s_m_y_fireman_01"));
				RequestNetworkControl(Ped);
				GiveWeaponPed(Ped, 0xF9DCBF2D);
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

bool MedicoTaser = false; // INIMIGO MEDICO COM TASER
bool medicotaser()
{
	if (MedicoTaser)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_m_doctor_01"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_m_doctor_01")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_m_doctor_01"), coords.x, coords.y, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("s_m_m_doctor_01"));
				RequestNetworkControl(Ped);
				ENTITY::SET_ENTITY_INVINCIBLE(Ped, true); // GODMODE
				GiveWeaponPed(Ped, 0x3656C8C1);
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

bool LadraoPistola = false; // INIMIGO LADRAO PISTOLA
bool ladraopistola()
{
	if (LadraoPistola)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("g_m_m_chicold_01"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("g_m_m_chicold_01")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("g_m_m_chicold_01"), coords.x, coords.y +15, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("g_m_m_chicold_01"));
				RequestNetworkControl(Ped);
				GiveWeaponPed(Ped, 0x1B06D571);
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

bool PrisioneiroSMG = false; // INIMIGO PRISIONEIRO COM SMG
bool prisioneirosmg()
{
	if (PrisioneiroSMG)
	{

		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_prismuscl_01"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_prismuscl_01")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_prismuscl_01"), coords.x, coords.y +15, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("s_m_y_prismuscl_01"));
				RequestNetworkControl(Ped);
				GiveWeaponPed(Ped, 0x2BE6766B);
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

bool Lunatico = false; // INIMIGO LUNATICO COM PISTOLA ALIEN
bool lunatico()
{
	if (Lunatico)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("u_m_y_juggernaut_01"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("u_m_y_juggernaut_01")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("u_m_y_juggernaut_01"), coords.x, coords.y +15, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("u_m_y_juggernaut_01"));
				RequestNetworkControl(Ped);
				GiveWeaponPed(Ped, 0xAF3696A1);
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

bool PeGrandeRPG = false;
bool pegranderpg()
{
	if (PeGrandeRPG) // INIMIGO P� GRANDE COM RPG
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("CS_Orleans"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("CS_Orleans")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("CS_Orleans"), coords.x, coords.y +15, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("CS_Orleans"));
				RequestNetworkControl(Ped);
				GiveWeaponPed(Ped, 0xB1CA77B1);
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

bool NovatoPistola = false; // INIMIGO NOVATO COM PISTOLA
bool novatopistola()
{
	if (NovatoPistola)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("mp_m_freemode_01"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("mp_m_freemode_01")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("mp_m_freemode_01"), coords.x, coords.y + 15, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("mp_m_freemode_01"));
				RequestNetworkControl(Ped);
				GiveWeaponPed(Ped, 0x5EF9FEC4);
				ENTITY::SET_ENTITY_INVINCIBLE(Ped, true); // GODMODE
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

bool NovataPistola = false; // INIMIGO NOVATA COM PISTOLA
bool novatapistola()
{
	if (NovataPistola)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("mp_f_freemode_01"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("mp_f_freemode_01")))
		{
			int Ped = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("mp_f_freemode_01"), coords.x, coords.y +15, coords.z, 0, 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Ped))
			{ 
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("mp_f_freemode_01"));
				RequestNetworkControl(Ped);
				GiveWeaponPed(Ped, 0x5EF9FEC4); WEAPON_COMBATPISTOL;
				makePedHostile(Ped, selectedPlayer, true);
				return true;
			}
			return false;
		}
		return false;
	}
}

int pedattackers;
int pedattackers1;
int pedattackers2;
int pedattackers3;
int pedattackers4;
int pedattackers5;
int vehattackers;
bool pedspawncheck;

bool HydraInimigo = false; // INIMIGO HYDRA
bool hydrainimigo()
{
	if (HydraInimigo)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("hydra");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("hydra"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("hydra")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("hydra"), coords.x, coords.y + 20, coords.z + 50, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 3);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehattackers);
								AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
								int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
								AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
								AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								pedattackers = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool TrioExercito = false; // INIMIGO DUPLA EXERCITO
bool trioexercito()
{
	if (TrioExercito)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("barrage");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("barrage"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("barrage")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("barrage"), coords.x, coords.y + 20, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_03"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_marine_03"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01")))
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_03")))
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_marine_03")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_03"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_marine_03"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, -2);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 1);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers1, false, false);
								GiveWeaponPed(pedattackers, 0xBFEFFF6D); // COLOQUEI ARMA
								GiveWeaponPed(pedattackers1, 0xBFEFFF6D);
								int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
								AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers1, TargetHandle, 0, 16);
								//AI::TASK_COMBAT_PED(pedattackers2, TargetHandle, 0, 16);
								AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
								//PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers2, false);
								pedattackers = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool HelicopteroPM = false; // INIMIGO HELICOPTERO
bool helicopteropm()
{
	if (HelicopteroPM)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("Polmav");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("Polmav"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("Polmav")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("Polmav"), coords.x +40, coords.y + 40, coords.z + 60, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers2 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers3 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, 0);
								PED::SET_PED_INTO_VEHICLE(pedattackers2, vehattackers, 1);
								PED::SET_PED_INTO_VEHICLE(pedattackers3, vehattackers, 2);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 3);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehattackers);
								AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers1, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers2, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers3, false, false);
								GiveWeaponPed(pedattackers, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers1, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers2, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers3, 0xBFEFFF6D);
								int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
								AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 10);
								AI::TASK_COMBAT_PED(pedattackers1, TargetHandle, 0, 10);
								AI::TASK_COMBAT_PED(pedattackers2, TargetHandle, 0, 10);
								AI::TASK_COMBAT_PED(pedattackers3, TargetHandle, 0, 10);
								AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers2, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers3, false);
								pedattackers = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool FBI = false; // INIMIGO FBI
bool fbi()
{
	if (FBI)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("FBI2");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("FBI2"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("FBI2")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("FBI2"), coords.x, coords.y +30, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers2 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers3 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers4 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers5 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_swat_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, 0);
								PED::SET_PED_INTO_VEHICLE(pedattackers2, vehattackers, 1);
								PED::SET_PED_INTO_VEHICLE(pedattackers3, vehattackers, 2);
								PED::SET_PED_INTO_VEHICLE(pedattackers4, vehattackers, 3);
								PED::SET_PED_INTO_VEHICLE(pedattackers5, vehattackers, 4);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 1);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers1, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers2, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers3, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers4, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers5, false, false);
								GiveWeaponPed(pedattackers, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers1, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers2, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers3, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers4, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers5, 0xBFEFFF6D);
								int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
								AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers1, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers2, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers3, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers4, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers5, TargetHandle, 0, 16);
								AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers2, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers3, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers4, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers5, false);
								pedattackers = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool CarroForte = false; // INIMIGO CARRO FORTE
bool carroforte()
{
	if (CarroForte)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("stockade");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("stockade"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("stockade")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("stockade"), coords.x, coords.y + 20, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_m_armoured_01"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_m_armoured_02"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_m_armoured_01")))
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_m_armoured_02")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_m_armoured_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_m_armoured_02"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers2 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_m_armoured_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers3 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_m_armoured_02"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, 0);
								PED::SET_PED_INTO_VEHICLE(pedattackers2, vehattackers, 1);
								PED::SET_PED_INTO_VEHICLE(pedattackers3, vehattackers, 2);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 1);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers1, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers2, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers3, false, false);
								GiveWeaponPed(pedattackers, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers1, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers2, 0xBFEFFF6D);
								GiveWeaponPed(pedattackers3, 0xBFEFFF6D);
								int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
								AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers1, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers2, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers3, TargetHandle, 0, 16);
								AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers2, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers3, false);
								pedattackers = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool Zombie = false; // INIMIGO ZOMBIE FUNERARIA
bool zombie()
{
	if (Zombie)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("Lurcher");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("Lurcher"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("Lurcher")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("Lurcher"), coords.x, coords.y + 20, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("u_m_y_zombie_01"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("cs_bradcadaver"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("u_m_y_zombie_01")))
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("cs_bradcadaver")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("u_m_y_zombie_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("cs_bradcadaver"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, 0);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 3);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers1, false, false);
								int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
								AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers1, TargetHandle, 0, 16);
								AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
								pedattackers = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool CopMoto = false; // INIMIGO MOTO
bool copmoto()
{
	if (CopMoto)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("Policeb");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("Policeb"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("Policeb")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("Policeb"), coords.x +20, coords.y, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_hwaycop_01"));
							if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_hwaycop_01")))
							{
								Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
								pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_hwaycop_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
								if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
								{
									PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
									VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 1);
									VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
									AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
									AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
									GiveWeaponPed(pedattackers, 0x1B06D571);
									int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
									AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
									AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
									PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
									pedattackers = false;
									return true;
								}
								return false;
							}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool JesusKuruma = false; // INIMIGO JESUS DE KURUMA
bool jesuskuruma()
{
	if (JesusKuruma)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("kuruma2");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("kuruma2"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("kuruma2")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("kuruma2"), coords.x +15, coords.y +15, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("u_m_m_jesus_01"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("u_m_m_jesus_01")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("u_m_m_jesus_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 3);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
								//GiveWeaponPed(pedattackers, 0xA2719263);
								int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
								AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								pedattackers = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool Palhaco = false; // INIMIGO PALHA�O
bool palhaco()
{
	if (Palhaco)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("Speedo2");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("Speedo2"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("Speedo2")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("Speedo2"), coords.x, coords.y + 20, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_clown_01"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_clown_01")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_clown_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_clown_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers2 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_clown_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							pedattackers3 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_clown_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, 0);
								PED::SET_PED_INTO_VEHICLE(pedattackers2, vehattackers, 1);
								PED::SET_PED_INTO_VEHICLE(pedattackers3, vehattackers, 2);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 1);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers1, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers2, false, false);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers3, false, false);
								GiveWeaponPed(pedattackers, 0x7F7497E5);
								GiveWeaponPed(pedattackers1, 0x7F7497E5);
								GiveWeaponPed(pedattackers2, 0x7F7497E5);
								GiveWeaponPed(pedattackers3, 0x7F7497E5);
								ENTITY::SET_ENTITY_INVINCIBLE(pedattackers, true);
								ENTITY::SET_ENTITY_INVINCIBLE(pedattackers1, true);
								ENTITY::SET_ENTITY_INVINCIBLE(pedattackers2, true);
								ENTITY::SET_ENTITY_INVINCIBLE(pedattackers3, true);
								int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
								AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers1, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers2, TargetHandle, 0, 16);
								AI::TASK_COMBAT_PED(pedattackers3, TargetHandle, 0, 16);
								AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers2, false);
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers3, false);
								pedattackers = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool PrisioneirosVan = false; // INIMIGO PRISIONEIROS NA VAN
bool prisioneirosvan()
{
	if (PrisioneirosVan)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("pony2");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("pony2"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("pony2")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("pony2"), coords.x, coords.y + 20, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_prisoner_01"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_prismuscl_01"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("u_m_y_prisoner_01"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("csb_rashcosvki"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_prisoner_01")))
							if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_prismuscl_01")))
								if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("u_m_y_prisoner_01")))
									if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("csb_rashcosvki")))
									{
										Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
										pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_prisoner_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
										pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_prismuscl_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
										pedattackers2 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("u_m_y_prisoner_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
										pedattackers3 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("csb_rashcosvki"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
										if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
										{
											PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
											PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, 0);
											PED::SET_PED_INTO_VEHICLE(pedattackers2, vehattackers, 1);
											PED::SET_PED_INTO_VEHICLE(pedattackers3, vehattackers, 2);
											VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 6);
											VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
											AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
											AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
											AI::TASK_LEAVE_ANY_VEHICLE(pedattackers1, false, false);
											AI::TASK_LEAVE_ANY_VEHICLE(pedattackers2, false, false);
											AI::TASK_LEAVE_ANY_VEHICLE(pedattackers3, false, false);
											GiveWeaponPed(pedattackers, 0x1B06D571);
											GiveWeaponPed(pedattackers1, 0x555AF99A);
											GiveWeaponPed(pedattackers2, 0x83BF0278);
											GiveWeaponPed(pedattackers3, 0x2BE6766B);
											int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
											AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
											AI::TASK_COMBAT_PED(pedattackers1, TargetHandle, 0, 16);
											AI::TASK_COMBAT_PED(pedattackers2, TargetHandle, 0, 16);
											AI::TASK_COMBAT_PED(pedattackers3, TargetHandle, 0, 16);
											AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
											PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
											PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
											PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers2, false);
											PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers3, false);
											pedattackers = false;
											return true;
										}
										return false;
									}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool LimosineProstitutas = false; // INIMIGO CARRO FORTE
bool limosineprostitutas()
{
	if (LimosineProstitutas)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("patriot2");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("patriot2"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("patriot2")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("patriot2"), coords.x, coords.y + 20, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_f_y_hooker_01"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_f_y_hooker_02"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_f_y_hooker_03"));
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_f_y_hooker_01")))
							if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_f_y_hooker_02")))
								if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_f_y_hooker_03")))
									if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01")))
									{
										Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
										pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_f_y_hooker_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
										pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_f_y_hooker_02"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
										pedattackers2 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_f_y_hooker_03"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
										pedattackers3 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_f_y_stripper_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
										if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
										{
											PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
											PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, 0);
											PED::SET_PED_INTO_VEHICLE(pedattackers2, vehattackers, 1);
											PED::SET_PED_INTO_VEHICLE(pedattackers3, vehattackers, 2);
											VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 5);
											VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
											AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
											AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, false, false);
											AI::TASK_LEAVE_ANY_VEHICLE(pedattackers1, false, false);
											AI::TASK_LEAVE_ANY_VEHICLE(pedattackers2, false, false);
											AI::TASK_LEAVE_ANY_VEHICLE(pedattackers3, false, false);
											GiveWeaponPed(pedattackers, 0xA2719263);
											GiveWeaponPed(pedattackers1, 0xA2719263);
											GiveWeaponPed(pedattackers2, 0xA2719263);
											GiveWeaponPed(pedattackers3, 0xA2719263);
											int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
											AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
											AI::TASK_COMBAT_PED(pedattackers1, TargetHandle, 0, 16);
											AI::TASK_COMBAT_PED(pedattackers2, TargetHandle, 0, 16);
											AI::TASK_COMBAT_PED(pedattackers3, TargetHandle, 0, 16);
											AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
											PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
											PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
											PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers2, false);
											PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers3, false);
											pedattackers = false;
											return true;
										}
										return false;
									}
						            return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

bool TankInimigo = false; // INIMIGO TANK
bool tankinimigo()
{
	if (TankInimigo)
	{
		if (vehspawncheck)
		{
			int model = GAMEPLAY::GET_HASH_KEY("rhino");
			float speed = ENTITY::GET_ENTITY_SPEED(PLAYER::PLAYER_PED_ID());
			STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("rhino"));
			if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("rhino")))
			{
				Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
				vehattackers = VEHICLE::CREATE_VEHICLE(GAMEPLAY::GET_HASH_KEY("rhino"), coords.x, coords.y + 20, coords.z, 0, 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehattackers))
				{
					vehspawncheck = false;
					pedattackers = true;
					if (pedattackers)
					{
						STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"));
						if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01")))
						{
							Vector3 coords_ = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 6.0, 0.0, 0.0);
							pedattackers = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							//pedattackers1 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							//pedattackers2 = PED::CREATE_PED(21, GAMEPLAY::GET_HASH_KEY("s_m_y_blackops_01"), coords_.x, coords_.y, coords_.z, 1, 1, 0);
							if (ENTITY::DOES_ENTITY_EXIST(pedattackers))
							{
								PED::SET_PED_INTO_VEHICLE(pedattackers, vehattackers, -1);
								//	PED::SET_PED_INTO_VEHICLE(pedattackers1, vehattackers, -2);
								//PED::SET_PED_INTO_VEHICLE(pedattackers2, vehattackers, -3);
								VEHICLE::SET_VEHICLE_DOORS_LOCKED(vehattackers, 3);
								VEHICLE::SET_VEHICLE_ENGINE_ON(vehattackers, true, true, true);
								AI::TASK_VEHICLE_SHOOT_AT_PED(0, 0, 0);
								AI::TASK_LEAVE_ANY_VEHICLE(pedattackers, true, false);
								//AI::TASK_LEAVE_ANY_VEHICLE(pedattackers1, false, false);
								//AI::TASK_LEAVE_ANY_VEHICLE(pedattackers2, false, false);
								//GiveWeaponPed(pedattackers, 0x2BE6766B);
								int TargetHandle = PLAYER::GET_PLAYER_PED(selectedPlayer);
								AI::TASK_COMBAT_PED(pedattackers, TargetHandle, 0, 16);
								//AI::TASK_COMBAT_PED(pedattackers1, TargetHandle, 0, 16);
								//AI::TASK_COMBAT_PED(pedattackers2, TargetHandle, 0, 16);
								AI::TASK_VEHICLE_CHASE(pedattackers, PLAYER::GET_PLAYER_PED(selectedPlayer));
								PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers, false);
								//PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers1, false);
								//PED::SET_PED_CAN_SWITCH_WEAPON(pedattackers2, false);
								pedattackers = false;
								return true;
							}
							return false;
						}
						return false;
					}
					return false;
				}
				return false;
			}
		}
	}
}

void SpawnPeds() // BAD PADS // PEDESTRES LOUCOS // TROLL
{
	addTitle("Pedestres Loucos");
	addOption("Fake Novato com Pistola ~b~[GodMode]");
	addOption("Fake Novata com Pistola");
	addOption("Onca");
	addOption("Seguranca Com Cassetete");
	addOption("Bombeiro Com Machado");
	addOption("Medico Com Taser ~b~[GodMode]");
	addOption("Ladrao Com Pistola");
	addOption("Prisioneiro Com SMG");
	addOption("Lunatico Com Arma Alien");
	addOption("Pe Grande Com RPG");
	addOption("Jesus - Kuruma");
	addOption("Zombie - Funeraria");
	addOption("Carro Forte Com Guardas"); 
	addOption("Palhaco - Fogos ~b~[GodMode]");
	addOption("Cop - Moto");
	addOption("HELI PM");
	addOption("FBI");
	addOption("Exercito Inimigo");
	addOption("Hydra Inimigo");
	addOption("Tank Inimigo");
	addOption("Prisioneiros Com Van");
	addOption("Limosine Com Prostitutas");

	if (getOption() == 1)
	{
		NovatoPistola = true;
		if (novatopistola())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 2)
	{
		NovataPistola = true;
		if (novatapistola())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 3)
	{
		Onca = true;
		if (spawnonca())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 4)
	{

		SegurancaCassetete = true;
		if (segurancacassetete())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 5)
	{

		BombeiroMachado = true;
		if (bombeiromachado())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 6)
	{
		MedicoTaser = true;
		if (medicotaser())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 7)
	{
		LadraoPistola = true;
		if (ladraopistola())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 8)
	{
		PrisioneiroSMG = true;
		if (prisioneirosmg())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 9)
	{
		Lunatico = true;
		if (lunatico())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 10)
	{
		PeGrandeRPG = true;
		if (pegranderpg())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 11)
	{
		JesusKuruma = true;
		vehspawncheck = true;
		if (jesuskuruma())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 12)
	{
		Zombie = true;
		vehspawncheck = true;
		if (zombie())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 13)
	{
		CarroForte = true;
		vehspawncheck = true;
		if (carroforte())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 14)
	{
		Palhaco = true;
		vehspawncheck = true;
		if (palhaco())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 15)
	{
		CopMoto = true;
		vehspawncheck = true;
		if (copmoto())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 16)
	{
		HelicopteroPM = true;
		vehspawncheck = true;
		if (helicopteropm())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 17)
	{
		FBI = true;
		vehspawncheck = true;
		if (fbi())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 18)
	{
		TrioExercito = true;
		vehspawncheck = true;
		if (trioexercito())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 19)
	{
		HydraInimigo = true;
		vehspawncheck = true;
		if (hydrainimigo())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 20)
	{
		TankInimigo = true;
		vehspawncheck = true;
		if (tankinimigo())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 21)
	{
		PrisioneirosVan = true;
		vehspawncheck = true;
		if (prisioneirosvan())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	if (getOption() == 22)
	{
		LimosineProstitutas = true;
		vehspawncheck = true;
		if (limosineprostitutas())
		{
			drawNotification("~w~NPC: ~b~Spawnado");
		}
	}
	normalMenuActions();
}

void BulletstoFire()
{
	addTitle("Ataques");
	addOption("Matar ~b~ [ Invisivel]");
	addOption("Queimar Jogador ~b~[ Invisivel ]");
	addOption("Asfixiar Jogador ~b~[ Invisivel ]");
	addIntOption("Variadas~r~<>", &Explosion_, 0, 20);
	addOption("Jogar Uma Granada");
	addOption("Jogar Uma Granada De Fumaca");
	addOption("Jogar Um Sinalizador");
	addOption("Atirar Com Uma Bala De Tank");
	addOption("Fazer Ataque Aereo");

	if (getOption() == 1)
	{
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true);
		FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, 4, 5.0f, false, true, false);
		drawNotification("~b~Jogador Assasinado !");
	}
	if (getOption() == 2)
	{
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true);
		FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, EXPLOSION_MOLOTOV, 5.0f, false, true, false);
		drawNotification("~b~Fogo Lancado !");
	}
	if (getOption() == 3)
	{
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true);
		FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, EXPLOSION_SMOKEGRENADE, 5.0f, false, true, false);
		drawNotification("~b~Granada Lancada !");
	}
	if (getOption() == 4)
	{
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true);
		FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, Explosion_, 5, true, 0, 0);
	}
	if (getOption() == 5)
	{
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y, coords.z, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("WEAPON_GRENADE"), PLAYER::PLAYER_PED_ID(), 1, 1, 100);
	}
	if (getOption() == 6)
	{
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y, coords.z, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("WEAPON_SMOKEGRENADE"), PLAYER::GET_PLAYER_PED(selectedPlayer), 1, 1, 100);
	}
	if (getOption() == 7)
	{
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y, coords.z, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN"), PLAYER::PLAYER_PED_ID(), 1, 1, 100);
	}
	if (getOption() == 8)
	{
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 0);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x , coords.y, coords.z, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("VEHICLE_WEAPON_TANK"), PLAYER::PLAYER_PED_ID(), 1, 1, 100);
	}
	if (getOption() == 9)
	{
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 0);
		Ped Player = PLAYER::GET_PLAYER_PED(selectedPlayer);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y, coords.z + 5, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET"), PLAYER::PLAYER_PED_ID(), 1, 1, 100);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y + 5, coords.z + 5, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET"), PLAYER::PLAYER_PED_ID(), 1, 1, 130);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x + 3, coords.y, coords.z + 5, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET"), PLAYER::PLAYER_PED_ID(), 1, 1, 80);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x - 5, coords.y, coords.z + 5, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET"), PLAYER::PLAYER_PED_ID(), 1, 1, 110);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(coords.x, coords.y - 2, coords.z + 5, coords.x, coords.y, coords.z, 100, 1, GAMEPLAY::GET_HASH_KEY("WEAPON_AIRSTRIKE_ROCKET"), PLAYER::PLAYER_PED_ID(), 1, 1, 150);
	}
	normalMenuActions();
}

void DroparVeiculos() // Dropar Veiculos
{
	addTitle("Dropar Veiculos");
	addOption("~b~Moto: Hakuchou");
	addOption("~b~Moto: Tron");
	addOption("~r~Carro: Tyrant");
	addOption("~r~Carro: Ferrari");
	addOption("~r~Carro: Ferrari 2");
	addOption("~r~Carro: Batman");
	addOption("~r~Carro: Kuruma");
	addOption("~c~Caminhao: Chernobog");
	addOption("~c~Caminhao: Festa");
	addOption("~d~OffRoad: Brutus");
	addOption("~d~OffRoad: Bruiser");
	addOption("~g~Guerra: HalfTrack");
	addOption("~g~Guerra: Riot 2");
	addOption("~m~Heli: Volatus");
	addOption("~m~Heli: Savage");
	addOption("~o~Aviao: Cuban");
	addOption("~o~Aviao: Besra");
	addOption("~p~Aquatico: Jetsky"); 
	addOption("~p~Aquatico: Submarino");
	addOption("~q~Moto Voadora");
	addOption("~y~Mochila A Jato");

	if (getOption() == 1)
	{
		CREATE_VEHONPLAYER("hakuchou2");
	}
	if (getOption() == 2)
	{
		CREATE_VEHONPLAYER("shotaro");
	}
	if (getOption() == 3)
	{
		CREATE_VEHONPLAYER("tyrant");
	}
	if (getOption() == 4)
	{
		CREATE_VEHONPLAYER("infernus2");
	}
	if (getOption() == 5)
	{
		CREATE_VEHONPLAYER("ardent");
	}
	if (getOption() == 6)
	{
		CREATE_VEHONPLAYER("vigilante");
	}
	if (getOption() == 7)
	{
		CREATE_VEHONPLAYER("kuruma2");
	}
	if (getOption() == 8)
	{
		CREATE_VEHONPLAYER("chernobog");
	}
	if (getOption() == 9)
	{
		CREATE_VEHONPLAYER("pbus2");
	}
	if (getOption() == 10)
	{
		CREATE_VEHONPLAYER("brutus");
	}
	if (getOption() == 11)
	{
		CREATE_VEHONPLAYER("bruiser2");
	}
	if (getOption() == 12)
	{
		CREATE_VEHONPLAYER("halftrack");
	}
	if (getOption() == 13)
	{
		CREATE_VEHONPLAYER("riot2");
	}
	if (getOption() == 14)
	{
		CREATE_VEHONPLAYER("volatus");
	}
	if (getOption() == 15)
	{
		CREATE_VEHONPLAYER("savage");
	}
	if (getOption() == 16)
	{
		CREATE_VEHONPLAYER("cuban800");
	}
	if (getOption() == 17)
	{
		CREATE_VEHONPLAYER("besra");
	}
	if (getOption() == 18)
	{
		CREATE_VEHONPLAYER("seashark3");
	}
	if (getOption() == 19)
	{
		CREATE_VEHONPLAYER("submersible2");
	}
	if (getOption() == 20)
	{
		CREATE_VEHONPLAYER("oppressor2");
	}
	if (getOption() == 21)
	{
		CREATE_VEHONPLAYER("thruster");
	}
    normalMenuActions();
}

bool invincibleClientVeh[20];
bool SlingShot = false;
bool upgradeplayerscar = false;
bool fixplayerscar = false;
bool godplayerscar = false;
bool resprayplayerscar = false;
bool undrivableplayerscar = false;
bool boostplayerscar = false;
bool deleteplayerscar = false;

bool slingshotcar_;
void slingshotcar()
{
	Ped playerPed = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			ENTITY::APPLY_FORCE_TO_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), true), 1, 0, 0, 90, 0, 0, 0, 1, false, true, true, true, true);
			drawNotification("Veiculo ~b~Arremessado !");
			slingshotcar_ = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		slingshotcar_ = false;
	}
}
bool maxcar_;
void maxcar()
{
	int playerPed = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			MaxUpgrades(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), true));
			drawNotification("Veiculo ~b~Tunado !");
			maxcar_ = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		maxcar_ = false;
	}
}
bool boostcar_;
void boostcar()
{
	Ped playerPed = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			AUDIO::SET_VEHICLE_BOOST_ACTIVE(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), 0), 1);
			VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), 0), 100.0f);
			AUDIO::SET_VEHICLE_BOOST_ACTIVE(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), 0), 0);
			drawNotification("Veiculo ~b~Empulsonado !");
			boostcar_ = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		boostcar_ = false;
	}
}

bool undrivablecar_;
void undrivablecar()
{
	Ped playerPed = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			VEHICLE::SET_VEHICLE_ENGINE_HEALTH(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), 0), -4000);
			drawNotification("Veiculo ~b~Estragado !");
			undrivablecar_ = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		undrivablecar_ = false;
	}
}
bool paintcar_;
void paintcar()
{
	Ped playerPed = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), 0), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), 0), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255), GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255));
			drawNotification("Veiculo ~b~Pintado Aleatoriamente !");
			paintcar_ = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		paintcar_ = false;
	}
}

bool tripalarm;
void TripAlarm()
{
	Ped Ped = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(Ped, false))
	{
		Vehicle Veh = PED::GET_VEHICLE_PED_IS_IN(Ped, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Veh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(Veh))
		{
			VEHICLE::SET_VEHICLE_ALARM(Veh, true);
			VEHICLE::START_VEHICLE_ALARM(Veh);
			VEHICLE::IS_VEHICLE_ALARM_ACTIVATED(Veh);
			VEHICLE::SET_VEHICLE_DOORS_LOCKED(VehID, 2);
			drawNotification("Alarme ~b~Desparado !");
			tripalarm = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		tripalarm = false;
	}
}

bool godcar_;
void godcar()
{
	Ped playerPed = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			ENTITY::SET_ENTITY_INVINCIBLE(selectedPlayer, true);
			invincibleClientVeh[selectedPlayer] = true;
			drawNotification("Veiculo GodMode: ~b~Ativado !");
			godcar_ = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		godcar_ = false;
	}
}

bool fixcar_;
void fixcar()
{
	Ped playerPed = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			FixWashVehicleClient(selectedPlayer);
			drawNotification("Veiculo ~b~Reparado !");
			fixcar_ = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		fixcar_ = false;
	}
}

bool delete_;
void deletecar()
{
	Ped playerPed = PLAYER::GET_PLAYER_PED(selectedPlayer);
	if (PED::IS_PED_IN_ANY_VEHICLE(playerPed, 0))
	{
		Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_IN(playerPed, false);
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(playerVeh);
		if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(playerVeh))
		{
			if (ENTITY::DOES_ENTITY_EXIST(playerVeh))
			{
				ENTITY::SET_ENTITY_AS_MISSION_ENTITY(playerVeh, true, true);
				VEHICLE::DELETE_VEHICLE(&playerVeh);
			}
			delete_ = false;
		}
	}
	else
	{
		drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
		delete_ = false;
	}
}

void PlayerVehicle() // VEICULO DO JOGADOR // MENU VEICULO DO JOGADOR
{
	addTitle("Veiculo do Jogador");
	addOption("Kickar do Veiculo + Trancar");
	addOption("Carro Estilingue");
	addOption("Tunar veiculo do Jogador");
	addOption("Impulsionar Veiculo");
	addOption("Fuder o Motor");
	addOption("Pintura Aleatoria");
	addOption("Veiculo Invencivel");
	addOption("Consertar Veiculo");
	addOption("Destruir veiculo do Jogador");
	addOption("Explodir Veiculo");
	addOption("Disparar Alarme + Trancar");

	if (getOption() == 1)
	{
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED(selectedPlayer), 0))
		{
			Vehicle VehID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), 0);
			VEHICLE::SET_VEHICLE_DOORS_LOCKED(VehID, 2);
			AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED(selectedPlayer));
			drawNotification("Retirado do veiculo !");
		}
		else drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
	}
	if (getOption() == 2)
	{
		slingshotcar_ = true;
	}
	if (getOption() == 3)
	{
		maxcar_ = true;
	}
	if (getOption() == 4)
	{
		boostcar_ = true;
	}
	if (getOption() == 5)
	{
		undrivablecar_ = true;
	}
	if (getOption() == 6)
	{
		paintcar_ = true;
	}
	if (getOption() == 7)
	{
		godcar_ = true;
	}
	if (getOption() == 8)
	{
		fixcar_ = true;
	}
	if (getOption() == 9)
	{
		delete_ = true;
	}
	if (getOption() == 10)
	{
		explodirveh = true;
	}
	if (getOption() == 11)
	{
		TripAlarm();
	}
	normalMenuActions();
}

bool SPECTATE = false;
void SpectatePlayer(Ped playerped)
{
	Any SpectateCam;

	Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(playerped, false);
	SpectateCam = CAM::CREATE_CAM_WITH_PARAMS("DEFAULT_SCRIPTED_FLY_CAMERA", playerPosition.x, playerPosition.y, playerPosition.z, 0.0, 0.0, 0.0, 50.0, 0, 2);
	CAM::ATTACH_CAM_TO_ENTITY(SpectateCam, playerped, 0, -5, 1, 1);
	CAM::SET_CAM_ACTIVE(playerped, 1);
}

void SpectateMode(bool Active, Ped selectedPed)
{
	NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(Active, selectedPed);
}

void TeleportToMe(int Client)
{
	Vector3 Coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	ENTITY::SET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_USING(Client), Coords.x, Coords.y, Coords.z, 1, 0, 0, 1);
}

void PlayerListPage2() // LIST // PLAYER LIST PAGINA 2 // MENU PLAYERS LIST PAGINA 2
{
	addTitle(PLAYER::GET_PLAYER_NAME(selectedPlayer));
	addBoolOption("Modo Espectador", SPECTATE);
	addOption("Teleportar ate o jogador");
	addOption("Teleportar para o veiculo");
	addOption("Teleportar ate mim ~b~[ Veiculo ]");
	addOption("Trollar / Ajudar ~r~>");
	addOption("Atacar Jogador ~r~>");
	addOption("Dropar Veiculos ~r~>");
	addOption("~p~Pedestres Loucos ~r~>");
	addOption("Teleportar Ate Mim ~b~[ Trabalhando ]"); // TESTE // VER

	//addIntOption("Ir Para Sessao Solo ~b~[ VOCE ]", &PLAYER_ID, 1, 32); // 11

	if (getOption() == 1)
	{
		SPECTATE = !SPECTATE;
		if (SPECTATE == true)
		{
			drawNotification("Espectador: ~b~Ativado");

		}
		else if (SPECTATE == false)
		{
			drawNotification("Espectador: ~r~Desativado");
		}
	}
	if (getOption() == 2)
	{
		TeleportToClient(PLAYER::GET_PLAYER_PED(selectedPlayer));
	}
	if (getOption() == 3)
	{
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED(selectedPlayer), true))
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED(selectedPlayer)), VEHICLE::IS_VEHICLE_SEAT_FREE(PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED(selectedPlayer)), -1)); drawNotification("Teleportado !");
		}
		else
			drawNotification("~r~O Jogador Nao Esta Em Um Veiculo !");
	}
	if (getOption() == 4)
	{
		Vector3 My = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
		TeleportClientHook(selectedPlayer, My.x, My.y, My.z);
	}
	if (getOption() == 5)
	{
		changeSubmenu(402);
	}
	if (getOption() == 6)
	{
		changeSubmenu(404);
	}
	if (getOption() == 7)
	{
		changeSubmenu(405);
	}

	if (getOption() == 8)
	{
		changeSubmenu(403);
	}
	else if (getOption() == 9)
	{
		Vector3 My = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
		TeleportClientHook(selectedPlayer, My.x, My.y, My.z);
	}
	normalMenuActions();
} 

/*	if (getOption() == 11)
	{
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(PLAYER_ID), true);
		FIRE::ADD_OWNED_EXPLOSION(PLAYER::GET_PLAYER_PED(selectedPlayer), Pos.x, Pos.y, Pos.z, 1, 5, true, true, false);
		drawNotification("~b~ Voce esta em sessao solo !");
	} */

// ************ FIM PLAYERS LIST ************ //

	// ************ INICIO ALL PLAYERS ************ //

bool allPlayers = false; // TODOS OS JOGADORES // MENU TODOS OS JOGADORES
void AllPlayers()
{
	addTitle("Todos Os Jogadores");
	addOption("Dar Todas As Armas");
	addOption("Retirar Todas As Armas");
	addOption("Travar Tds Os Jogadores");
	addOption("Fumaca Toxica ~b~[ Invisivel ]");
	addOption("Queimar ~b~[ Invisivel ]"); // 5
	addOption("Matar ~r~[ Visivel ]");
	addOption("Trazer Todos Os Jogadores ~b~[ Trabalhando ]");

	if (getOption() == 1)
	{
		for (int i = 0; i < 100; i++)
		{
			if (!(cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")))
			{
				GiveWeaponsClient();
				drawNotification("~r~Dando Armas... Aguarde !");

			}
			WAIT(25);
		}
		drawNotification("~b~Todos Os Jogadores Ganharam Armas");
	}
	if (getOption() == 2)
	{
		for (int i = 0; i < 100; i++)
		{
			if (!(cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")))
			{
				TakeWeaponsClient();
			}
			WAIT(10);
		}
		drawNotification("~b~Retirado Todas As Armas");
	}
	if (getOption() == 3)
	{
		for (int i = 0; i < 100; i++)
		{
			int id = PLAYER::GET_PLAYER_PED(i);
			if (id > 0 && id != PLAYER::PLAYER_PED_ID())
			{
				AI::CLEAR_PED_TASKS_IMMEDIATELY(id);
			}
			WAIT(50);
		}
		drawNotification("~b~Travou Todos Os Jogadores");
	}
	if (getOption() == 4)
	{
		for (int i = 0; i < 100; i++)
		{
			if (!(cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")) && i != PLAYER::PLAYER_ID())
			{
				Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), true);
				FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, EXPLOSION_SMOKEGRENADE, 5.0f, false, true, false);
			}
		}
		drawNotification("~r~A Fumaca Foi Lancada !");
	}
	if (getOption() == 5)
	{
		for (int i = 0; i < 100; i++)
		{
			if (!(cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")) && i != PLAYER::PLAYER_ID())
			{
				Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), true);
				FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, EXPLOSION_MOLOTOV, 5.0f, false, true, false);
			}
		}
		drawNotification("~r~Todo Mundo Esta Pegando Fogo !");
	}
	if (getOption() == 6)
	{
		for (int i = 0; i < 100; i++)
		{
			if (!(cstrcmp(PLAYER::GET_PLAYER_NAME(i), "-")) && i != PLAYER::PLAYER_ID())
			{
				Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), true);
				FIRE::ADD_OWNED_EXPLOSION(PLAYER::PLAYER_PED_ID(), Pos.x, Pos.y, Pos.z, EXPLOSION_CAR, 10.0f, true, false, true);
			}
		}
		drawNotification("~r~Todo Mundo Foi Assasinado !");
	}
	if (getOption() == 7)
	{
		for (int i = 0; i < 100; i++)
		{
			int playerid = PLAYER::GET_PLAYER_PED(i);
			if (playerid > 0 && playerid != PLAYER::PLAYER_PED_ID())
			{
				ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerid, 0.0f, 0.0f, 0.0f);
			}
		}
		drawNotification("~r~Todo Mundo Foi Puxado !");
	}
	normalMenuActions();
}
	// ************ FIM ALL PLAYERS ************ //

Vector3 obje;
Vector3 fff;

DWORD64 GetModuleBase(HANDLE hProc, string &sModuleName)
{
	HMODULE *hModules;
	hModules = 0;
	char szBuf[50];
	DWORD cModules = 0;
	DWORD64 dwBase = 0;

	EnumProcessModules(hProc, hModules, 0, &cModules);
	hModules = new HMODULE[cModules / sizeof(HMODULE)];

	if (EnumProcessModules(hProc, hModules, cModules / sizeof(HMODULE), &cModules)) {
		for (int i = 0; i < cModules / sizeof(HMODULE); ++i) {
			if (GetModuleBaseName(hProc, hModules[i], szBuf, sizeof(szBuf))) {
				if (sModuleName.compare(szBuf) == 0) {
					dwBase = (DWORD64)hModules[i];
					break;
				}
			}
		}
	}
	return dwBase;
}

void bypass_online()
{
	__int64 Address = GetModuleBase(GetCurrentProcess(), string("GTA5.exe"));

	CHAR *MemoryBuff = new CHAR[4096];
	HANDLE hProcess = GetCurrentProcess();
	BYTE bytes[10] = { 0x48, 0x8B, 0x88, 0x10, 0x01, 0x00, 0x00, 0x48, 0x8B, 0xC1, };//BYPASS_SPAWN
	BYTE bytes2[10] = { 0x83, 0xBB, 0x34, 0x01, 0x00, 0x00, 0xFF, 0x0F, 0x95, 0xC0 };//BYPASS_EVERY_TIME_CHECK_FOR_PLAYER_MODEL
	BYTE nop2[2] = { 0x90, 0x90 };
	BYTE nop3[3] = { 0x90, 0x90, 0x90 };

	int Check = 0;
	for (;;)
	{
		ReadProcessMemory(hProcess, (LPVOID)Address, (LPVOID)MemoryBuff, 4096, NULL);
		for (INT p = 0; p < 4096; p++)
		{
			Address++;
			MemoryBuff++;
			if (memcmp(MemoryBuff, bytes, 10) == 0)
			{
				WriteProcessMemory(hProcess, (LPVOID)(Address + 0x20), nop2, 2, NULL);
				WriteProcessMemory(hProcess, (LPVOID)(Address + 0x2D), nop2, 2, NULL);
				Check += 1;
			}
			if (memcmp(MemoryBuff, bytes2, 10) == 0)
			{
				WriteProcessMemory(hProcess, (LPVOID)(Address - 3), nop3, 3, NULL);
				Check += 1;
			}
			if (Check >= 2)
			{
				goto endfunc;
			}
		}
		MemoryBuff = MemoryBuff - 4096;
	}
endfunc:;
}

void Hook() // TELA INICIAL - OP��ES
{
	bypass_online();
	while (true)
	{
		monitorButtons();
		optionCount = 0;

		if (SPECTATE == true)
		{
			SpectateMode(true, PLAYER::GET_PLAYER_PED(selectedPlayer));
		}
		if (SPECTATE == false)
		{
			AI::CLEAR_PED_TASKS(PLAYER::PLAYER_ID());
			SpectateMode(false, PLAYER::GET_PLAYER_PED(selectedPlayer));
		}
		if (submenu == 1) // MAIN - CAMINHO DE ONDE VAI CADA OP��O
		{
			Main();
		}
		else if (submenu == 2)
		{
			Selfmenu();
		}
		else if (submenu == 3)
		{
			ModelsOutfits();
		}
		else if (submenu == 30)
		{
			PlayerListPage2();
		}
		else if (submenu == 4)
		{
			VehSpawner();
		}
		else if (submenu == 5)
		{
			VehicleOptions();
		}
		else if (submenu == 6)
		{
			TeleportMenu();
		}
		else if (submenu == 7)
		{
			WeaponEditor();
		}
		else if (submenu == 8)
		{
			MiscOptions();
		}
		else if (submenu == 9)
		{
			ForcePowers();
		}
		else if (submenu == 10)
		{
			WeatherOptions();
		}
		else if (submenu == 11)
		{
			AllPlayers();
		}
		else if (submenu == 12)
		{
			PlayersList();
		}
		else if (submenu == 401) // PLAYER LIST
		{
			Cloning();
		}
		else if (submenu == 402)
		{
			Trolling();
		}
		else if (submenu == 403)
		{
			SpawnPeds();
		}
		else if (submenu == 404)
		{
			BulletstoFire();
			Notificacao1();
			Notificacao2();
		}
		else if (submenu == 405)
		{
			DroparVeiculos();
		}
		else if (submenu == 406)
		{
			PlayerVehicle();
		}
		else if (submenu == 150) // MISC
		{
			WalkTypes();
		}
		else if (submenu == 151)
		{
			Animations();
		}
		else if (submenu == 152)
		{
			AnimalAnims();
		}
		else if (submenu == 153)
		{
			ObjectSpawner();
		}
		else if (submenu == 154)
		{
			ObjectManager();
		}
		else if (submenu == 155)
		{
			ObjectEditor();
		}
		else if (submenu == 130)
		{
			Credits();
		}
		else if (submenu == 80) // VEICS
		{
			VehOptions();
		}
		else if (submenu == 81)
		{
			HighEnd();
		}
		else if (submenu == 82)
		{
			Lowrider();
		}
		else if (submenu == 83)
		{
			MuscleWheels();
		}
		else if (submenu == 84)
		{
			OffroadWheels();
		}
		else if (submenu == 85)
		{
			SportWheels();
		}
		else if (submenu == 86)
		{
			SUV();
		}
		else if (submenu == 87)
		{
			Tuner();
		}
		else if (submenu == 88)
		{
			WheelAccessories();
		}
		else if (submenu == 99)
		{
			ModdedVehicles();
		}
		else if (submenu == 100)
		{
			Barcos();
		}
		else if (submenu == 101)
		{
			Comerciais();
		}
		else if (submenu == 102)
		{
			Compactos();
		}
		else if (submenu == 103)
		{
			Coupes();
		}
		else if (submenu == 104)
		{
			Bikes();
		}
		else if (submenu == 105)
		{
			Emergencia();
		}
		else if (submenu == 106)
		{
			Helicopteros();
		}
		else if (submenu == 107)
		{
			Industrial();
		}
		else if (submenu == 108)
		{
			Militares();
		}
		else if (submenu == 109)
		{
			Motos();
		}
		else if (submenu == 110)
		{
			Muscle();
		}
		else if (submenu == 111)
		{
			OffRoad();
		}
		else if (submenu == 112)
		{
			Avioes();
		}
		else if (submenu == 113)
		{
			Suvs();
		}
		else if (submenu == 114)
		{
			Sedans();
		}
		else if (submenu == 115)
		{
			Servicos();
		}
		else if (submenu == 116)
		{
			Esportes();
		}
		else if (submenu == 117)
		{
			EsportesClassicos();
		}
		else if (submenu == 118)
		{
			Supers();
		}
		else if (submenu == 119)
		{
			Utilitarios();
		}
		else if (submenu == 120)
		{
			Vans();
		}
		else if (submenu == 121)
		{
			Trailers();
		}
		else if (submenu == 122)
		{
			Trains();
		}
		else if (submenu == 123) // 2021 - Atualizando
		{
		    Novos1();
		}
		else if (submenu == 124) // 2021 - Atualizando (~N�o Est�o Spawnando )
		{
		    Novos2();
		}
		else if (submenu == 61)
		{
			LosSantosCustoms();
		}
		else if (submenu == 62)
		{
			VehicleWeapons();
		}
		else if (submenu == 63)
		{
			Wheels();
		}
		else if (submenu == 64)
		{
			LightsNeons();
		}
		else if (submenu == 65)
		{
			Colours();
		}
		else if (submenu == 299) // WEAPON
		{
			Ammunation();
		}
		else if (submenu == 300)
		{
			WeaponSkins();
		}
		else if (submenu == 301)
		{
			Pistols();
		}
		else if (submenu == 302)
		{
			SubMachine();
		}
		else if (submenu == 303)
		{
			ShotGuns();
		}
		else if (submenu == 304)
		{
			Rifles();
		}
		else if (submenu == 305)
		{
			SniperRifles();
		}
		else if (submenu == 306)
		{
			Sniper();
		}
		else if (submenu == 307)
		{
			HeavySniper();
		}
		else if (submenu == 308)
		{
			MarksmanRifle();
		}
		else if (submenu == 309)
		{
			GusenbergRifle();
		}
		else if (submenu == 310)
		{
			AssaultRifle();
		}
		else if (submenu == 311)
		{
			CarbineRifle();
		}
		else if (submenu == 312)
		{
			AdvancedRifle();
		}
		else if (submenu == 313)
		{
			MG();
		}
		else if (submenu == 314)
		{
			CombatMG();
		}
		else if (submenu == 315)
		{
			SpecialCarbine();
		}
		else if (submenu == 316)
		{
			BullpupRifle();
		}
		else if (submenu == 317)
		{
			Pistol();
		}
		else if (submenu == 318)
		{
			CombatPistol();
		}
		else if (submenu == 319)
		{
			ApPistol();
		}
		else if (submenu == 320)
		{
			VintagePistol();
		}
		else if (submenu == 321)
		{
			Pistol50cal();
		}
		else if (submenu == 322)
		{
			SNSPistol();
		}
		else if (submenu == 323)
		{
			HeavyPistol();
		}
		else if (submenu == 324)
		{
			PumpShotgun();
		}
		else if (submenu == 325)
		{
			AssaultShotgun();
		}
		else if (submenu == 326)
		{
			BullpupShotgun();
		}
		else if (submenu == 327)
		{
			HeavyShotgun();
		}
		else if (submenu == 328)
		{
			MicroSMG();
		}
		else if (submenu == 329)
		{
			SMG();
		}
		else if (submenu == 330)
		{
			AssaultSMG();
		}
		else if (submenu == 331)
		{
		ArmasPesadas();
		}
		else if (submenu == 144) // TELEPORTE
		{
			IPLMaps();
		}
		else if (submenu == 70) // ROUPAS
		{
			ComponentChanger();
		}
		else if (submenu == 71)
		{
			Outfits();
		}
		else if (submenu == 72)
		{
			Animals();
		}
		else if (submenu == 73)
		{
			AllModels::All();
		}
		if (explodirveh)
		{
			ExplodirVeh();
		}
		if (nametagesp) // IF'S
		{
			NameTagESP();
		}
		if (forcefield)
		{
			ForceField();
		}
		if (forcejump)
		{
			ForceJump();
		}
		if (forceexplodewave)
		{
			ForceExplodeWave();
		}
		if (slingshotcar_)
		{
			slingshotcar();
		}
		if (tripalarm)
		{
			TripAlarm();
		}
		if (delete_)
		{
			deletecar();
		}
		if (undrivablecar_)
		{
			undrivablecar();
		}
		if (maxcar_)
		{
			maxcar();
		}
		if (boostcar_)
		{
			boostcar();
		}
		if (paintcar_)
		{
			paintcar();
		}
		if (godcar_)
		{
			godcar();
		}
		if (fixcar_)
		{
			fixcar();
		}
		if (superman)
		{
			SuperMan();
		}
		if (boost)
		{
			BoostBind();
		}
		if (brake)
		{
			BrakeBind();
		}
		if (carjump)
		{
			CarJump();
		}
		if (walldrive_)
		{
			walldrive();
		}
		CREATE_OBJONPLAYER_looped(); // FIM
		if (doTrolley)
		{
		if (spawnTrolley())
		{
			doTrolley = false;
		}
		}
		if (doWheelbarrow)
		{
		if (spawnWheelbarrow())
		{
			doWheelbarrow = false;
		}
		}
		if (doBumpercar)
		{
		if (spawnBumpercar())
		{
			doBumpercar = false;
		}
		}
		if (doWheelchair)
		{
		if (spawnWheelchair())
		{
			doWheelchair = false;
		}
		}
		if (doCouch)
		{
		if (spawnCouch())
		{
			doCouch = false;
		}
		}
		if (doToilet)
		{
		if (spawnToilet())
		{
			doToilet = false;
		}
		}
		if (LoadingObject)
		{

		if (Create_Object(ObjectString, "", obje) == true)
		{
			LoadingObject = false;
			ObjectString = "";
		}
		}
		if (HasNoDamage)
		{
			if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0))
			{
				if (ENTITY::GET_ENTITY_HEALTH(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0)) != ENTITY::GET_ENTITY_MAX_HEALTH(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0)))
				{
					NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
				}
			}
		}
		if (g_bKeyBoardDisplayed)
		{
			if (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 1)
			{
				g_bKeyBoardDisplayed = false;
				doKeyboardFunc(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT(), KeyboardIndex, SelectedClient);
			}
			else if (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 2)
			{
				g_bKeyBoardDisplayed = false;
			}
			else if (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 3)
			{
				g_bKeyBoardDisplayed = false;
			}
		}
		if (hasVehicleWeapons)
		{
			if (getKeyPressed(VK_NUMPAD0) || PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0) && weapLoop >= 5)
			{
				CarWeaponLoop(VehicleWeapons1);
				weapLoop = 0;
			}
		}
		if (SJump)
		{
			GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(PLAYER::PLAYER_PED_ID());
			GAMEPLAY::SET_SUPER_JUMP_THIS_FRAME(PLAYER::PLAYER_ID());
		}
		if (nocops)
		{
			PLAYER::CLEAR_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID());
			PLAYER::SET_MAX_WANTED_LEVEL(0);
		}
		if (freezeplayer)
		{
			AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED(selectedPlayer));
		}
		if (LoadingPed)
		{
			if (SetModelOption(ModelString) == true)
			{
				LoadingPed = false;
				ModelString = "";
				if (!isMainCharacter)
					PED::SET_PED_RANDOM_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 1);
			}
		}
		if (LoadingAnim)
		{
			if (doAnimation(Anim, AnimID))
			{
				LoadingAnim = false;
				Anim = "";
				AnimID = "";
			}
		}
		if (LoadingAnimForPed)
		{
			if (doAnimationPed(PedToDoAnim, Anim, AnimID))
			{
				LoadingAnimForPed = false;
				Anim = "";
				AnimID = "";
			}
		}
		PLAYER::SET_PLAYER_INVINCIBLE(PLAYER::PLAYER_ID(), God);
		ENTITY::SET_ENTITY_INVINCIBLE(PLAYER::PLAYER_PED_ID(), God);
		PED::SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(PLAYER::PLAYER_PED_ID(), God);
		PED::SET_PED_CAN_RAGDOLL(PLAYER::PLAYER_ID(), !God);
		PED::SET_PED_CAN_RAGDOLL(PLAYER::PLAYER_PED_ID(), !God);
		PED::SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(PLAYER::PLAYER_ID(), !God);
		PED::SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(PLAYER::PLAYER_ID(), !God);
		PLAYER::GIVE_PLAYER_RAGDOLL_CONTROL(PLAYER::PLAYER_ID(), !God);
		PED::SET_PED_RAGDOLL_ON_COLLISION(PLAYER::PLAYER_ID(), God);
		WEAPON::SET_PED_INFINITE_AMMO_CLIP(PLAYER::PLAYER_PED_ID(), Ammo);

		optionPress = false;
		WAIT(0);
	}
}

void ScriptMain()
{
	srand(GetTickCount());
	Hook();
}
